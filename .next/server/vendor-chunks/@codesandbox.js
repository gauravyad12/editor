"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@codesandbox";
exports.ids = ["vendor-chunks/@codesandbox"];
exports.modules = {

/***/ "(ssr)/./node_modules/@codesandbox/nodebox/build/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@codesandbox/nodebox/build/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INJECT_MESSAGE_TYPE: () => (/* binding */ INJECT_MESSAGE_TYPE),\n/* harmony export */   MessageReceiver: () => (/* binding */ MessageReceiver),\n/* harmony export */   MessageSender: () => (/* binding */ MessageSender),\n/* harmony export */   Nodebox: () => (/* binding */ Nodebox),\n/* harmony export */   PREVIEW_LOADED_MESSAGE_TYPE: () => (/* binding */ PREVIEW_LOADED_MESSAGE_TYPE)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/pad.js\nvar require_pad = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/pad.js\"(exports, module) {\n    module.exports = function pad(num, size) {\n      var s = \"000000000\" + num;\n      return s.substr(s.length - size);\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/fingerprint.browser.js\nvar require_fingerprint_browser = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/fingerprint.browser.js\"(exports, module) {\n    var pad = require_pad();\n    var env = typeof window === \"object\" ? window : self;\n    var globalCount = Object.keys(env).length;\n    var mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;\n    var clientId = pad((mimeTypesLength + navigator.userAgent.length).toString(36) + globalCount.toString(36), 4);\n    module.exports = function fingerprint() {\n      return clientId;\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/getRandomValue.browser.js\nvar require_getRandomValue_browser = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/lib/getRandomValue.browser.js\"(exports, module) {\n    var getRandomValue;\n    var crypto = typeof window !== \"undefined\" && (window.crypto || window.msCrypto) || typeof self !== \"undefined\" && self.crypto;\n    if (crypto) {\n      lim = Math.pow(2, 32) - 1;\n      getRandomValue = function() {\n        return Math.abs(crypto.getRandomValues(new Uint32Array(1))[0] / lim);\n      };\n    } else {\n      getRandomValue = Math.random;\n    }\n    var lim;\n    module.exports = getRandomValue;\n  }\n});\n\n// ../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/index.js\nvar require_cuid = __commonJS({\n  \"../../node_modules/.pnpm/cuid@2.1.8/node_modules/cuid/index.js\"(exports, module) {\n    var fingerprint = require_fingerprint_browser();\n    var pad = require_pad();\n    var getRandomValue = require_getRandomValue_browser();\n    var c = 0;\n    var blockSize = 4;\n    var base = 36;\n    var discreteValues = Math.pow(base, blockSize);\n    function randomBlock() {\n      return pad((getRandomValue() * discreteValues << 0).toString(base), blockSize);\n    }\n    function safeCounter() {\n      c = c < discreteValues ? c : 0;\n      c++;\n      return c - 1;\n    }\n    function cuid3() {\n      var letter = \"c\", timestamp = new Date().getTime().toString(base), counter = pad(safeCounter().toString(base), blockSize), print = fingerprint(), random = randomBlock() + randomBlock();\n      return letter + timestamp + counter + print + random;\n    }\n    cuid3.slug = function slug() {\n      var date = new Date().getTime().toString(36), counter = safeCounter().toString(36).slice(-4), print = fingerprint().slice(0, 1) + fingerprint().slice(-1), random = randomBlock().slice(-2);\n      return date.slice(-2) + counter + print + random;\n    };\n    cuid3.isCuid = function isCuid(stringToCheck) {\n      if (typeof stringToCheck !== \"string\")\n        return false;\n      if (stringToCheck.startsWith(\"c\"))\n        return true;\n      return false;\n    };\n    cuid3.isSlug = function isSlug(stringToCheck) {\n      if (typeof stringToCheck !== \"string\")\n        return false;\n      var stringLength = stringToCheck.length;\n      if (stringLength >= 7 && stringLength <= 10)\n        return true;\n      return false;\n    };\n    cuid3.fingerprint = fingerprint;\n    module.exports = cuid3;\n  }\n});\n\n// ../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/createDeferredExecutor.js\nvar require_createDeferredExecutor = __commonJS({\n  \"../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/createDeferredExecutor.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.createDeferredExecutor = void 0;\n    function createDeferredExecutor() {\n      const executor = (resolve, reject) => {\n        executor.state = \"pending\";\n        executor.resolve = (data) => {\n          if (executor.state !== \"pending\") {\n            return;\n          }\n          executor.result = data;\n          const onFulfilled = (value) => {\n            executor.state = \"fulfilled\";\n            return value;\n          };\n          return resolve(data instanceof Promise ? data : Promise.resolve(data).then(onFulfilled));\n        };\n        executor.reject = (reason) => {\n          if (executor.state !== \"pending\") {\n            return;\n          }\n          queueMicrotask(() => {\n            executor.state = \"rejected\";\n          });\n          return reject(executor.rejectionReason = reason);\n        };\n      };\n      return executor;\n    }\n    exports.createDeferredExecutor = createDeferredExecutor;\n  }\n});\n\n// ../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/DeferredPromise.js\nvar require_DeferredPromise = __commonJS({\n  \"../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/DeferredPromise.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.DeferredPromise = void 0;\n    var createDeferredExecutor_1 = require_createDeferredExecutor();\n    var DeferredPromise4 = class extends Promise {\n      #executor;\n      resolve;\n      reject;\n      constructor(executor = null) {\n        const deferredExecutor = (0, createDeferredExecutor_1.createDeferredExecutor)();\n        super((originalResolve, originalReject) => {\n          deferredExecutor(originalResolve, originalReject);\n          executor?.(deferredExecutor.resolve, deferredExecutor.reject);\n        });\n        this.#executor = deferredExecutor;\n        this.resolve = this.#executor.resolve;\n        this.reject = this.#executor.reject;\n      }\n      get state() {\n        return this.#executor.state;\n      }\n      get rejectionReason() {\n        return this.#executor.rejectionReason;\n      }\n      then(onFulfilled, onRejected) {\n        return this.#decorate(super.then(onFulfilled, onRejected));\n      }\n      catch(onRejected) {\n        return this.#decorate(super.catch(onRejected));\n      }\n      finally(onfinally) {\n        return this.#decorate(super.finally(onfinally));\n      }\n      #decorate(promise) {\n        return Object.defineProperties(promise, {\n          resolve: { configurable: true, value: this.resolve },\n          reject: { configurable: true, value: this.reject }\n        });\n      }\n    };\n    exports.DeferredPromise = DeferredPromise4;\n  }\n});\n\n// ../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/index.js\nvar require_build = __commonJS({\n  \"../../node_modules/.pnpm/@open-draft+deferred-promise@2.1.0/node_modules/@open-draft/deferred-promise/build/index.js\"(exports) {\n    \"use strict\";\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o, k2, desc);\n    } : function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_createDeferredExecutor(), exports);\n    __exportStar(require_DeferredPromise(), exports);\n  }\n});\n\n// ../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/MemoryLeakError.js\nvar require_MemoryLeakError = __commonJS({\n  \"../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/MemoryLeakError.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.MemoryLeakError = void 0;\n    var MemoryLeakError = class extends Error {\n      emitter;\n      type;\n      count;\n      constructor(emitter, type, count) {\n        super(`Possible EventEmitter memory leak detected. ${count} ${type.toString()} listeners added. Use emitter.setMaxListeners() to increase limit`);\n        this.emitter = emitter;\n        this.type = type;\n        this.count = count;\n        this.name = \"MaxListenersExceededWarning\";\n      }\n    };\n    exports.MemoryLeakError = MemoryLeakError;\n  }\n});\n\n// ../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/Emitter.js\nvar require_Emitter = __commonJS({\n  \"../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/Emitter.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Emitter = void 0;\n    var MemoryLeakError_1 = require_MemoryLeakError();\n    var _events, _maxListeners, _hasWarnedAboutPotentialMemortyLeak, _getListeners, getListeners_fn, _removeListener, removeListener_fn, _wrapOnceListener, wrapOnceListener_fn, _internalEmit, internalEmit_fn;\n    var _Emitter = class {\n      constructor() {\n        __privateAdd(this, _getListeners);\n        __privateAdd(this, _removeListener);\n        __privateAdd(this, _wrapOnceListener);\n        __privateAdd(this, _internalEmit);\n        __privateAdd(this, _events, void 0);\n        __privateAdd(this, _maxListeners, void 0);\n        __privateAdd(this, _hasWarnedAboutPotentialMemortyLeak, void 0);\n        __privateSet(this, _events, /* @__PURE__ */ new Map());\n        __privateSet(this, _maxListeners, _Emitter.defaultMaxListeners);\n        __privateSet(this, _hasWarnedAboutPotentialMemortyLeak, false);\n      }\n      static listenerCount(emitter, eventName) {\n        return emitter.listenerCount(eventName);\n      }\n      setMaxListeners(maxListeners) {\n        __privateSet(this, _maxListeners, maxListeners);\n        return this;\n      }\n      getMaxListeners() {\n        return __privateGet(this, _maxListeners);\n      }\n      eventNames() {\n        return Array.from(__privateGet(this, _events).keys());\n      }\n      emit(eventName, ...data) {\n        const listeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName);\n        listeners.forEach((listener) => {\n          listener.apply(this, data);\n        });\n        return listeners.length > 0;\n      }\n      addListener(eventName, listener) {\n        __privateMethod(this, _internalEmit, internalEmit_fn).call(this, \"newListener\", eventName, listener);\n        const nextListeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName).concat(listener);\n        __privateGet(this, _events).set(eventName, nextListeners);\n        if (__privateGet(this, _maxListeners) > 0 && this.listenerCount(eventName) > __privateGet(this, _maxListeners) && !__privateGet(this, _hasWarnedAboutPotentialMemortyLeak)) {\n          __privateSet(this, _hasWarnedAboutPotentialMemortyLeak, true);\n          const memoryLeakWarning = new MemoryLeakError_1.MemoryLeakError(this, eventName, this.listenerCount(eventName));\n          console.warn(memoryLeakWarning);\n        }\n        return this;\n      }\n      on(eventName, listener) {\n        return this.addListener(eventName, listener);\n      }\n      once(eventName, listener) {\n        return this.addListener(eventName, __privateMethod(this, _wrapOnceListener, wrapOnceListener_fn).call(this, eventName, listener));\n      }\n      prependListener(eventName, listener) {\n        const listeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName);\n        if (listeners.length > 0) {\n          const nextListeners = [listener].concat(listeners);\n          __privateGet(this, _events).set(eventName, nextListeners);\n        } else {\n          __privateGet(this, _events).set(eventName, listeners.concat(listener));\n        }\n        return this;\n      }\n      prependOnceListener(eventName, listener) {\n        return this.prependListener(eventName, __privateMethod(this, _wrapOnceListener, wrapOnceListener_fn).call(this, eventName, listener));\n      }\n      removeListener(eventName, listener) {\n        const listeners = __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName);\n        if (listeners.length > 0) {\n          __privateMethod(this, _removeListener, removeListener_fn).call(this, listeners, listener);\n          __privateGet(this, _events).set(eventName, listeners);\n          __privateMethod(this, _internalEmit, internalEmit_fn).call(this, \"removeListener\", eventName, listener);\n        }\n        return this;\n      }\n      off(eventName, listener) {\n        return this.removeListener(eventName, listener);\n      }\n      removeAllListeners(eventName) {\n        if (eventName) {\n          __privateGet(this, _events).delete(eventName);\n        } else {\n          __privateGet(this, _events).clear();\n        }\n        return this;\n      }\n      listeners(eventName) {\n        return Array.from(__privateMethod(this, _getListeners, getListeners_fn).call(this, eventName));\n      }\n      listenerCount(eventName) {\n        return __privateMethod(this, _getListeners, getListeners_fn).call(this, eventName).length;\n      }\n      rawListeners(eventName) {\n        return this.listeners(eventName);\n      }\n    };\n    var Emitter2 = _Emitter;\n    _events = new WeakMap();\n    _maxListeners = new WeakMap();\n    _hasWarnedAboutPotentialMemortyLeak = new WeakMap();\n    _getListeners = new WeakSet();\n    getListeners_fn = function(eventName) {\n      return __privateGet(this, _events).get(eventName) || [];\n    };\n    _removeListener = new WeakSet();\n    removeListener_fn = function(listeners, listener) {\n      const index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n      return [];\n    };\n    _wrapOnceListener = new WeakSet();\n    wrapOnceListener_fn = function(eventName, listener) {\n      const onceListener = (...data) => {\n        this.removeListener(eventName, onceListener);\n        listener.apply(this, data);\n      };\n      return onceListener;\n    };\n    _internalEmit = new WeakSet();\n    internalEmit_fn = function(internalEventName, eventName, listener) {\n      this.emit(\n        internalEventName,\n        ...[eventName, listener]\n      );\n    };\n    __publicField(Emitter2, \"defaultMaxListeners\", 10);\n    exports.Emitter = Emitter2;\n  }\n});\n\n// ../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/index.js\nvar require_lib = __commonJS({\n  \"../../node_modules/.pnpm/strict-event-emitter@0.4.3/node_modules/strict-event-emitter/lib/index.js\"(exports) {\n    \"use strict\";\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o, k2, desc);\n    } : function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_Emitter(), exports);\n    __exportStar(require_MemoryLeakError(), exports);\n  }\n});\n\n// src/messages.ts\nvar import_cuid = __toESM(require_cuid());\n\n// ../../node_modules/.pnpm/outvariant@1.4.0/node_modules/outvariant/lib/index.mjs\nvar POSITIONALS_EXP = /(%?)(%([sdjo]))/g;\nfunction serializePositional(positional, flag) {\n  switch (flag) {\n    case \"s\":\n      return positional;\n    case \"d\":\n    case \"i\":\n      return Number(positional);\n    case \"j\":\n      return JSON.stringify(positional);\n    case \"o\": {\n      if (typeof positional === \"string\") {\n        return positional;\n      }\n      const json = JSON.stringify(positional);\n      if (json === \"{}\" || json === \"[]\" || /^\\[object .+?\\]$/.test(json)) {\n        return positional;\n      }\n      return json;\n    }\n  }\n}\nfunction format(message, ...positionals) {\n  if (positionals.length === 0) {\n    return message;\n  }\n  let positionalIndex = 0;\n  let formattedMessage = message.replace(\n    POSITIONALS_EXP,\n    (match, isEscaped, _, flag) => {\n      const positional = positionals[positionalIndex];\n      const value = serializePositional(positional, flag);\n      if (!isEscaped) {\n        positionalIndex++;\n        return value;\n      }\n      return match;\n    }\n  );\n  if (positionalIndex < positionals.length) {\n    formattedMessage += ` ${positionals.slice(positionalIndex).join(\" \")}`;\n  }\n  formattedMessage = formattedMessage.replace(/%{2,2}/g, \"%\");\n  return formattedMessage;\n}\nvar STACK_FRAMES_TO_IGNORE = 2;\nfunction cleanErrorStack(error) {\n  if (!error.stack) {\n    return;\n  }\n  const nextStack = error.stack.split(\"\\n\");\n  nextStack.splice(1, STACK_FRAMES_TO_IGNORE);\n  error.stack = nextStack.join(\"\\n\");\n}\nvar InvariantError = class extends Error {\n  constructor(message, ...positionals) {\n    super(message);\n    this.message = message;\n    this.name = \"Invariant Violation\";\n    this.message = format(message, ...positionals);\n    cleanErrorStack(this);\n  }\n};\nvar invariant = (predicate, message, ...positionals) => {\n  if (!predicate) {\n    throw new InvariantError(message, ...positionals);\n  }\n};\ninvariant.as = (ErrorConstructor, predicate, message, ...positionals) => {\n  if (!predicate) {\n    const isConstructor = ErrorConstructor.prototype.name != null;\n    const error = isConstructor ? new ErrorConstructor(format(message, positionals)) : ErrorConstructor(format(message, positionals));\n    throw error;\n  }\n};\n\n// src/messages.ts\nvar import_deferred_promise = __toESM(require_build());\n\n// src/logger.ts\nvar FLAG = window.localStorage[\"CSB_EMULATOR_DEBUG\"];\nvar DEFAULT = \"\\x1B[0m\";\nvar GREEN = \"\\x1B[32;1m\";\nvar RED = \"\\x1B[31m\";\nvar BLUE = \"\\x1B[34m\";\nvar YELLOW = \"\\x1B[33;1m\";\nvar MAGENTA = \"\\x1B[35;1m\";\nvar CYAN = \"\\x1B[36;1m\";\nvar COLOR_SCOPE = {\n  preview: YELLOW,\n  emulator: MAGENTA,\n  runtime: CYAN,\n  bridge: BLUE,\n  \"runtime:worker\": CYAN\n};\nfunction createDebug(scope) {\n  return function debug3(message, ...data) {\n    if (FLAG === \"true\") {\n      const direction = () => {\n        if (message.includes(\"sender\"))\n          return `${GREEN}sender`;\n        if (message.includes(\"receiver\"))\n          return `${RED}receiver`;\n        return \"\";\n      };\n      const cleanMessage = message.replace(/\\[.+\\]:/, \"\");\n      console.debug(`${COLOR_SCOPE[scope]}${scope}:${direction()}${DEFAULT}:${cleanMessage}`, ...data);\n    }\n  };\n}\n\n// src/messages.ts\nvar debug = createDebug(\"emulator\");\nvar MessageReceiver = class {\n  emitter;\n  senderPort = null;\n  constructor() {\n    this.emitter = new EventTarget();\n    this.waitForHandshake();\n  }\n  waitForHandshake() {\n    const handshakePromise = new import_deferred_promise.DeferredPromise();\n    const handshakeListener = (message) => {\n      const { data } = message;\n      debug(\"[message-receiver]: incoming\", message);\n      if (data.type === \"internal/handshake\") {\n        invariant(\n          message.ports.length > 0,\n          \"Failed to confirm a MessageReceiver handshake: received event has no ports\"\n        );\n        this.senderPort = message.ports[0];\n        this.addMessageListener();\n        debug(\"[message-receiver]: handshake received!\", this.senderPort);\n        this.send(\"internal/handshake/done\");\n        debug(\"[message-receiver]: finish handshake\");\n      }\n    };\n    window.addEventListener(\"message\", handshakeListener);\n    handshakePromise.then(() => {\n      window.removeEventListener(\"message\", handshakeListener);\n    });\n    window.parent.postMessage({ type: \"internal/ready\" }, \"*\");\n    return handshakePromise;\n  }\n  addMessageListener() {\n    invariant(\n      this.senderPort,\n      \"[MessageReceiver] Failed to add a message listener: sender port is not defined. Did you forget to await a handshake?\"\n    );\n    this.senderPort.onmessage = (evt) => {\n      const data = evt.data;\n      if (data.type == null) {\n        return;\n      }\n      this.emitter.dispatchEvent(\n        new MessageEvent(data.type, {\n          data: data.payload\n        })\n      );\n    };\n  }\n  on(event, listener, options) {\n    this.emitter.addEventListener(\n      event,\n      async (message) => {\n        if (!(message instanceof MessageEvent)) {\n          return;\n        }\n        const { operationId, payload } = message.data;\n        try {\n          const listenerPayload = await listener(payload);\n          this.send(\"internal/operation/done\", { operationId, listenerPayload });\n        } catch (error) {\n          if (error instanceof Error) {\n            this.send(\"internal/operation/failed\", { operationId, error });\n          }\n        }\n      },\n      options\n    );\n  }\n  send(event, ...data) {\n    invariant(\n      this.senderPort,\n      '[MessageReceiver] Failed to send a message \"%j\": sender port is not defined. Did you forget to await a handshake?',\n      event\n    );\n    const payload = data[0] || {};\n    debug('[message-receiver]: send \"%s\"', event, payload);\n    this.senderPort.postMessage({ type: event, payload });\n  }\n};\nvar MessageSender = class {\n  constructor(target) {\n    this.target = target;\n    this.emitter = new EventTarget();\n    this.channel = new MessageChannel();\n    this.receiverPort = this.channel.port1;\n    const receiverReadyPromise = new import_deferred_promise.DeferredPromise();\n    const handshakeListener = (message) => {\n      if (message.data.type === \"internal/ready\") {\n        debug(\"[message-sender]: runtime is ready\");\n        receiverReadyPromise.resolve();\n      }\n    };\n    window.addEventListener(\"message\", handshakeListener);\n    receiverReadyPromise.then(() => {\n      window.removeEventListener(\"message\", handshakeListener);\n    });\n    this.receiverReadyPromise = receiverReadyPromise;\n    this.receiverPort.onmessage = (evt) => {\n      const data = evt.data;\n      if (data.type != null) {\n        debug('[message-sender]: emitting \"%s\" event...', data.type, data.payload);\n        this.emitter.dispatchEvent(new MessageEvent(data.type, { data: data.payload }));\n      }\n    };\n  }\n  emitter;\n  channel;\n  receiverPort;\n  receiverReadyPromise;\n  async handshake() {\n    const handshakePromise = new import_deferred_promise.DeferredPromise();\n    await this.receiverReadyPromise;\n    debug(\"[message-sender]: sending handshake\");\n    this.target.postMessage(\n      {\n        type: \"internal/handshake\"\n      },\n      \"*\",\n      [this.channel.port2]\n    );\n    this.on(\"internal/handshake/done\", () => {\n      handshakePromise.resolve();\n      clearTimeout(rejectionTimeout);\n    });\n    const rejectionTimeout = setTimeout(() => {\n      handshakePromise.reject(new Error(\"MessageSender: Handshake timeout\"));\n    }, 5e3);\n    return handshakePromise;\n  }\n  on(event, listener, options) {\n    debug('[message-sender]: add listener \"%s\"', event);\n    this.emitter.addEventListener(\n      event,\n      (message) => {\n        if (message instanceof MessageEvent) {\n          listener(message);\n        }\n      },\n      options\n    );\n  }\n  off(event, listener, options) {\n    this.emitter.removeEventListener(event, listener, options);\n  }\n  async send(event, ...data) {\n    const operationPromise = new import_deferred_promise.DeferredPromise();\n    const operationId = (0, import_cuid.default)();\n    const payload = data[0] || {};\n    debug('[message-sender]: send \"%s\" (%s)', event, operationId, payload);\n    this.receiverPort.postMessage({ type: event, payload: { operationId, payload } });\n    debug('[message-sender]: adding done listener for \"%s\" (%s)', event, operationId);\n    const handleOperationDone = (doneEvent) => {\n      const { data: data2 } = doneEvent;\n      if (data2.operationId === operationId) {\n        const listenerPayload = data2.listenerPayload || {};\n        debug('[message-sender]: resolving \"%s (%s) promise!', event, operationId);\n        operationPromise.resolve({\n          ...listenerPayload,\n          operationId: data2.operationId\n        });\n      }\n    };\n    const handleOperationFailed = (failEvent) => {\n      const { data: data2 } = failEvent;\n      if (data2.operationId === operationId) {\n        debug('[message-sender]: rejecting \"%s (%s) promise!', event, operationId);\n        operationPromise.reject(data2.error);\n      }\n    };\n    this.on(\"internal/operation/done\", handleOperationDone);\n    this.on(\"internal/operation/failed\", handleOperationFailed);\n    return operationPromise.finally(() => {\n      this.emitter.removeEventListener(\"internal/operation/done\", handleOperationDone);\n      this.emitter.removeEventListener(\"internal/operation/failed\", handleOperationFailed);\n    });\n  }\n};\n\n// src/Nodebox.ts\nvar import_deferred_promise3 = __toESM(require_build());\n\n// src/modules/fs.ts\nvar import_cuid2 = __toESM(require_cuid());\nvar FileSystemApi = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  async init(files) {\n    await this.channel.send(\"fs/init\", { files });\n  }\n  async readFile(path, encoding) {\n    const response = await this.channel.send(\"fs/readFile\", { path, encoding }).catch((error) => {\n      throw new Error(format('Failed to read file at path \"%s\"', path), { cause: error });\n    });\n    if (!response) {\n      throw new Error(\"File not found\");\n    }\n    return response.data;\n  }\n  async writeFile(path, content, options) {\n    let encoding = void 0;\n    let recursive = false;\n    if (typeof options === \"object\") {\n      encoding = options.encoding;\n      recursive = !!options.recursive;\n    } else if (typeof options === \"string\") {\n      encoding = options;\n    }\n    await this.channel.send(\"fs/writeFile\", { path, content, encoding, recursive }).catch((error) => {\n      throw new Error(format('Failed to write file at path \"%s\"', path), { cause: error });\n    });\n  }\n  async readdir(path) {\n    const response = await this.channel.send(\"fs/readdir\", { path }).catch((error) => {\n      throw new Error(format('Failed to read directory at path \"%s\"', path), { cause: error });\n    });\n    if (!response) {\n      throw new Error(\"Directory not found\");\n    }\n    return response.data;\n  }\n  async mkdir(path, options) {\n    const recursive = !!options?.recursive;\n    await this.channel.send(\"fs/mkdir\", { path, recursive }).catch((error) => {\n      throw new Error(format('Failed to make directory at path \"%s\"', path), { cause: error });\n    });\n  }\n  async stat(path) {\n    const response = await this.channel.send(\"fs/stat\", { path }).catch((error) => {\n      throw new Error(format('Failed to stat file at path \"%s\"', path), { cause: error });\n    });\n    if (!response) {\n      throw new Error(\"File not found\");\n    }\n    return response.data;\n  }\n  async rm(path, options) {\n    const { force, recursive } = options || {};\n    await this.channel.send(\"fs/rm\", { path, force, recursive }).catch((error) => {\n      throw new Error(format('Failed to remove file at path \"%s\"', path), { cause: error });\n    });\n  }\n  async watch(includes, excludes, listener) {\n    const watcherId = (0, import_cuid2.default)();\n    await this.channel.send(\"fs/watch\", { watcherId, includes, excludes });\n    this.channel.on(\"fs/watch-event\", ({ data }) => {\n      if (data.watcherId === watcherId && listener) {\n        const evt = { ...data };\n        delete evt.watcherId;\n        listener(evt);\n      }\n    });\n    return {\n      dispose: () => this.channel.send(\"fs/unwatch\", { watcherId })\n    };\n  }\n};\n\n// src/modules/shell.ts\nvar import_strict_event_emitter = __toESM(require_lib());\nvar ShellApi = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  create() {\n    return new ShellProcess(this.channel);\n  }\n};\nvar ShellProcess = class {\n  constructor(channel) {\n    this.channel = channel;\n    this.state = \"running\";\n    this.stdout = new import_strict_event_emitter.Emitter();\n    this.stderr = new import_strict_event_emitter.Emitter();\n    this.stdin = {\n      write: (data) => {\n        if (!this.id) {\n          throw new Error(\"Failed to write to stdin, no process is currently running\");\n        }\n        return this.channel.send(\"shell/stdin\", { data, workerId: this.id });\n      }\n    };\n    this.forwardStdEvents();\n  }\n  id;\n  state;\n  stdout;\n  stderr;\n  stdin;\n  forwardStdEvents() {\n    this.channel.on(\"worker/tty\", (message) => {\n      const { data } = message;\n      if (data.workerId !== this.id) {\n        return;\n      }\n      switch (data.payload.type) {\n        case \"out\": {\n          this.stdout.emit(\"data\", data.payload.data);\n          break;\n        }\n        case \"err\": {\n          this.stderr.emit(\"data\", data.payload.data);\n          break;\n        }\n      }\n    });\n  }\n  async runCommand(command, args, options = {}) {\n    invariant(!this.id, 'Failed to run \"runCommand\" on a ShellProcess: there is already a process running.');\n    const shellInfo = await this.channel.send(\"shell/runCommand\", { command, args, options });\n    invariant(shellInfo, 'Failed to run \"runCommand\" on a ShellProcess: was not able to retrieve a running process.');\n    this.id = shellInfo.id;\n    this.state = \"running\";\n    return shellInfo;\n  }\n  async on(message, listener) {\n    switch (message) {\n      case \"progress\": {\n        this.channel.on(\"worker/progress\", ({ data }) => {\n          listener(data.status);\n        });\n        return;\n      }\n      case \"exit\": {\n        this.channel.on(\"worker/exit\", ({ data }) => {\n          if (data.workerId === this.id) {\n            listener(data.exitCode, data.error);\n          }\n        });\n        return;\n      }\n    }\n  }\n  async kill() {\n    invariant(\n      this.id,\n      'Failed to run \"kill\" on a ShellProcess: there is no process running. Did you forget to run it?'\n    );\n    this.state = \"idle\";\n    await this.channel.send(\"shell/exit\", { id: this.id }).catch((error) => {\n      throw new Error(format('Failed to kill shell with ID \"%s\"', this.id), { cause: error });\n    });\n    this.id = void 0;\n  }\n};\n\n// src/modules/preview.ts\nvar import_deferred_promise2 = __toESM(require_build());\nvar TIMEOUT = 2e4;\nvar PreviewApi = class {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  async waitFor(payload, predicate, timeout = TIMEOUT) {\n    const readyPromise = new import_deferred_promise2.DeferredPromise();\n    const rejectTimeout = setTimeout(() => {\n      readyPromise.reject();\n    }, timeout);\n    const previewInformation = await this.channel.send(\"preview/get/info\", payload).catch((error) => {\n      readyPromise.reject(\n        new Error(\n          format(\n            'Failed to look up preview information for shell ID \"%s\" (port: %d)',\n            payload.sourceShellId,\n            payload.port\n          )\n        )\n      );\n    });\n    const foundPreview = previewInformation && predicate(previewInformation);\n    if (foundPreview) {\n      readyPromise.resolve({\n        url: previewInformation.url,\n        port: previewInformation.port,\n        sourceShellId: previewInformation.sourceShellId\n      });\n    }\n    this.channel.on(\"preview/port/ready\", ({ data }) => {\n      if (!foundPreview && predicate(data)) {\n        readyPromise.resolve({\n          url: data.url,\n          port: data.port,\n          sourceShellId: data.sourceShellId\n        });\n      }\n    });\n    return readyPromise.finally(() => {\n      clearTimeout(rejectTimeout);\n    });\n  }\n  async getByShellId(sourceShellId, timeout) {\n    return this.waitFor({ sourceShellId }, (data) => data.sourceShellId === sourceShellId, timeout).catch((error) => {\n      throw new Error(format('Failed to get shell by ID \"%s\"', sourceShellId), { cause: error });\n    });\n  }\n  async waitForPort(port, timeout) {\n    return this.waitFor({ port }, (data) => data.port === port, timeout).catch((error) => {\n      throw new Error(format(\"Failed to await port %d\", port), { cause: error });\n    });\n  }\n};\n\n// src/Nodebox.ts\nvar DEFAULT_RUNTIME_URL = \"https://nodebox-runtime.codesandbox.io\";\nvar debug2 = createDebug(\"emulator\");\nvar Nodebox = class {\n  constructor(options) {\n    this.options = options;\n    invariant(\n      this.options.iframe,\n      'Failed to create a Nodebox: expected \"iframe\" argument to be a reference to an <iframe> element but got %j',\n      this.options.iframe\n    );\n    this.url = this.options.runtimeUrl || DEFAULT_RUNTIME_URL;\n    this.isConnected = false;\n  }\n  channel = null;\n  isConnected;\n  url;\n  fileSystemApi = null;\n  shellApi = null;\n  previewApi = null;\n  async connect() {\n    const { iframe, cdnUrl } = this.options;\n    debug2(\"[message-sender]: Connecting to node emulator...\");\n    const connectionPromise = new import_deferred_promise3.DeferredPromise();\n    if (!this.url) {\n      connectionPromise.reject(\n        new Error(\"Nodebox URL is missing. Did you forget to provide it when creating this Nodebox instance?\")\n      );\n    }\n    invariant(\n      iframe.contentWindow,\n      \"Failed to create a MessageChannel with the Nodebox iframe: no content window found\"\n    );\n    this.channel = new MessageSender(iframe.contentWindow);\n    const frameLoadPromise = new import_deferred_promise3.DeferredPromise();\n    iframe.setAttribute(\"src\", this.url);\n    iframe.addEventListener(\n      \"load\",\n      () => {\n        frameLoadPromise.resolve();\n      },\n      { once: true }\n    );\n    iframe.addEventListener(\n      \"error\",\n      (event) => {\n        frameLoadPromise.reject(event.error);\n      },\n      { once: true }\n    );\n    await frameLoadPromise;\n    debug2(\"[message-sender]: IFrame loaded...\");\n    await this.channel.handshake();\n    debug2(\"[message-sender]: Handshake completed...\");\n    this.channel.send(\"connect\", {\n      cdnUrl\n    });\n    this.channel.on(\"runtime/ready\", () => {\n      connectionPromise.resolve();\n    });\n    return connectionPromise.then(() => {\n      debug2(\"[message-sender]: Connected to runtime...\");\n      this.isConnected = true;\n    });\n  }\n  get fs() {\n    invariant(\n      this.isConnected,\n      'Failed to access the File System API: consumer is not connected. Did you forget to run \"connect()\"?'\n    );\n    if (this.fileSystemApi) {\n      return this.fileSystemApi;\n    }\n    this.fileSystemApi = new FileSystemApi(this.channel);\n    return this.fileSystemApi;\n  }\n  get shell() {\n    invariant(\n      this.isConnected,\n      'Failed to access the Shell API: consumer is not connected. Did you forget to run \"connect()\"?'\n    );\n    if (this.shellApi) {\n      return this.shellApi;\n    }\n    this.shellApi = new ShellApi(this.channel);\n    return this.shellApi;\n  }\n  get preview() {\n    invariant(\n      this.isConnected,\n      'Failed to access the Preview API: consumer is not connected. Did you forget to run \"connect()\"?'\n    );\n    if (this.previewApi) {\n      return this.previewApi;\n    }\n    this.previewApi = new PreviewApi(this.channel);\n    return this.previewApi;\n  }\n};\n\n// src/runtime-protocol.types.ts\nvar INJECT_MESSAGE_TYPE = \"INJECT_AND_INVOKE\";\nvar PREVIEW_LOADED_MESSAGE_TYPE = \"PREVIEW_LOADED\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/nodebox/build/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ SandpackClient)\n/* harmony export */ });\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n\n\nvar SandpackClient = /** @class */ (function () {\n    function SandpackClient(iframeSelector, sandboxSetup, options) {\n        if (options === void 0) { options = {}; }\n        this.status = \"idle\";\n        this.options = options;\n        this.sandboxSetup = sandboxSetup;\n        this.iframeSelector = iframeSelector;\n    }\n    /**\n     * Clients handles\n     */\n    SandpackClient.prototype.updateOptions = function (options) {\n        if (!(0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(this.options, options)) {\n            this.options = options;\n            this.updateSandbox();\n        }\n    };\n    SandpackClient.prototype.updateSandbox = function (_sandboxSetup, _isInitializationCompile) {\n        if (_sandboxSetup === void 0) { _sandboxSetup = this.sandboxSetup; }\n        throw Error(\"Method not implemented\");\n    };\n    SandpackClient.prototype.destroy = function () {\n        throw Error(\"Method not implemented\");\n    };\n    /**\n     * Bundler communication\n     */\n    SandpackClient.prototype.dispatch = function (_message) {\n        throw Error(\"Method not implemented\");\n    };\n    SandpackClient.prototype.listen = function (_listener) {\n        throw Error(\"Method not implemented\");\n    };\n    return SandpackClient;\n}());\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudC9kaXN0L2Jhc2UtODBhMWY3NjAubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdDOztBQUVoQztBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOENBQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUU4QiIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudC9kaXN0L2Jhc2UtODBhMWY3NjAubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlcXVhbCB9IGZyb20gJ2RlcXVhbCc7XG5cbnZhciBTYW5kcGFja0NsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTYW5kcGFja0NsaWVudChpZnJhbWVTZWxlY3Rvciwgc2FuZGJveFNldHVwLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMuc3RhdHVzID0gXCJpZGxlXCI7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuc2FuZGJveFNldHVwID0gc2FuZGJveFNldHVwO1xuICAgICAgICB0aGlzLmlmcmFtZVNlbGVjdG9yID0gaWZyYW1lU2VsZWN0b3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsaWVudHMgaGFuZGxlc1xuICAgICAqL1xuICAgIFNhbmRwYWNrQ2xpZW50LnByb3RvdHlwZS51cGRhdGVPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFkZXF1YWwodGhpcy5vcHRpb25zLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2FuZGJveCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTYW5kcGFja0NsaWVudC5wcm90b3R5cGUudXBkYXRlU2FuZGJveCA9IGZ1bmN0aW9uIChfc2FuZGJveFNldHVwLCBfaXNJbml0aWFsaXphdGlvbkNvbXBpbGUpIHtcbiAgICAgICAgaWYgKF9zYW5kYm94U2V0dXAgPT09IHZvaWQgMCkgeyBfc2FuZGJveFNldHVwID0gdGhpcy5zYW5kYm94U2V0dXA7IH1cbiAgICAgICAgdGhyb3cgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkXCIpO1xuICAgIH07XG4gICAgU2FuZHBhY2tDbGllbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEJ1bmRsZXIgY29tbXVuaWNhdGlvblxuICAgICAqL1xuICAgIFNhbmRwYWNrQ2xpZW50LnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChfbWVzc2FnZSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfTtcbiAgICBTYW5kcGFja0NsaWVudC5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKF9saXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfTtcbiAgICByZXR1cm4gU2FuZHBhY2tDbGllbnQ7XG59KCkpO1xuXG5leHBvcnQgeyBTYW5kcGFja0NsaWVudCBhcyBTIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandpackNode: () => (/* binding */ SandpackNode)\n/* harmony export */ });\n/* harmony import */ var _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils-52664384.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codesandbox/nodebox */ \"(ssr)/./node_modules/@codesandbox/nodebox/build/index.mjs\");\n/* harmony import */ var _base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../base-80a1f760.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs\");\n/* harmony import */ var _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../consoleHook-59e792cb.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n\n\n\n\n\n\n\nfunction loadPreviewIframe(iframe, url) {\n    return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n        var contentWindow, TIME_OUT, MAX_MANY_TIRES, tries, timeout;\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n            contentWindow = iframe.contentWindow;\n            (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(contentWindow, \"Failed to await preview iframe: no content window found\");\n            TIME_OUT = 90000;\n            MAX_MANY_TIRES = 20;\n            tries = 0;\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n                    var triesToSetUrl = function () {\n                        var onLoadPage = function () {\n                            clearTimeout(timeout);\n                            tries = MAX_MANY_TIRES;\n                            resolve();\n                            iframe.removeEventListener(\"load\", onLoadPage);\n                        };\n                        if (tries >= MAX_MANY_TIRES) {\n                            reject((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(\"Could not able to connect to preview.\"));\n                            return;\n                        }\n                        iframe.setAttribute(\"src\", url);\n                        timeout = setTimeout(function () {\n                            triesToSetUrl();\n                            iframe.removeEventListener(\"load\", onLoadPage);\n                        }, TIME_OUT);\n                        tries = tries + 1;\n                        iframe.addEventListener(\"load\", onLoadPage);\n                    };\n                    iframe.addEventListener(\"error\", function () { return reject(new Error(\"Iframe error\")); });\n                    iframe.addEventListener(\"abort\", function () { return reject(new Error(\"Aborted\")); });\n                    triesToSetUrl();\n                })];\n        });\n    });\n}\nvar setPreviewIframeProperties = function (iframe, options) {\n    iframe.style.border = \"0\";\n    iframe.style.width = options.width || \"100%\";\n    iframe.style.height = options.height || \"100%\";\n    iframe.style.overflow = \"hidden\";\n    iframe.allow = \"cross-origin-isolated\";\n};\n\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/explicit-function-return-type, no-restricted-globals, @typescript-eslint/no-explicit-any  */\nfunction setupHistoryListeners(_a) {\n    var scope = _a.scope;\n    // @ts-ignore\n    var origHistoryProto = window.history.__proto__;\n    var historyList = [];\n    var historyPosition = 0;\n    var dispatchMessage = function (url) {\n        parent.postMessage({\n            type: \"urlchange\",\n            url: url,\n            back: historyPosition > 0,\n            forward: historyPosition < historyList.length - 1,\n            channelId: scope.channelId,\n        }, \"*\");\n    };\n    function pushHistory(url, state) {\n        // remove \"future\" locations\n        historyList.splice(historyPosition + 1);\n        historyList.push({ url: url, state: state });\n        historyPosition = historyList.length - 1;\n    }\n    Object.assign(window.history, {\n        go: function (delta) {\n            var newPos = historyPosition + delta;\n            if (newPos >= 0 && newPos <= historyList.length - 1) {\n                historyPosition = newPos;\n                var _a = historyList[historyPosition], url = _a.url, state = _a.state;\n                origHistoryProto.replaceState.call(window.history, state, \"\", url);\n                var newURL = document.location.href;\n                dispatchMessage(newURL);\n                window.dispatchEvent(new PopStateEvent(\"popstate\", { state: state }));\n            }\n        },\n        back: function () {\n            window.history.go(-1);\n        },\n        forward: function () {\n            window.history.go(1);\n        },\n        pushState: function (state, title, url) {\n            origHistoryProto.replaceState.call(window.history, state, title, url);\n            pushHistory(url, state);\n            dispatchMessage(document.location.href);\n        },\n        replaceState: function (state, title, url) {\n            origHistoryProto.replaceState.call(window.history, state, title, url);\n            historyList[historyPosition] = { state: state, url: url };\n            dispatchMessage(document.location.href);\n        },\n    });\n    function handleMessage(_a) {\n        var data = _a.data;\n        if (data.type === \"urlback\") {\n            history.back();\n        }\n        else if (data.type === \"urlforward\") {\n            history.forward();\n        }\n        else if (data.type === \"refresh\") {\n            document.location.reload();\n        }\n    }\n    window.addEventListener(\"message\", handleMessage);\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction watchResize(_a) {\n    var scope = _a.scope;\n    var lastHeight = 0;\n    function getDocumentHeight() {\n        if (typeof window === \"undefined\")\n            return 0;\n        var body = document.body;\n        var html = document.documentElement;\n        return Math.max(body.scrollHeight, body.offsetHeight, html.offsetHeight);\n    }\n    function sendResizeEvent() {\n        var height = getDocumentHeight();\n        if (lastHeight !== height) {\n            window.parent.postMessage({\n                type: \"resize\",\n                height: height,\n                codesandbox: true,\n                channelId: scope.channelId,\n            }, \"*\");\n        }\n        lastHeight = height;\n    }\n    sendResizeEvent();\n    var throttle;\n    var observer = new MutationObserver(function () {\n        if (throttle === undefined) {\n            sendResizeEvent();\n            throttle = setTimeout(function () {\n                throttle = undefined;\n            }, 300);\n        }\n    });\n    observer.observe(document, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n    });\n    /**\n     * Ideally we should only use a `MutationObserver` to trigger a resize event,\n     * however, we noted that it's not 100% reliable, so we went for polling strategy as well\n     */\n    setInterval(sendResizeEvent, 300);\n}\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nvar scripts = [\n    { code: setupHistoryListeners.toString(), id: \"historyListener\" },\n    {\n        code: \"function consoleHook({ scope }) {\" + _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.c + \"\\n};\",\n        id: \"consoleHook\",\n    },\n    { code: watchResize.toString(), id: \"watchResize\" },\n];\nvar injectScriptToIframe = function (iframe, channelId) {\n    scripts.forEach(function (_a) {\n        var _b;\n        var code = _a.code, id = _a.id;\n        var message = {\n            uid: id,\n            type: _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__.INJECT_MESSAGE_TYPE,\n            code: \"exports.activate = \".concat(code),\n            scope: { channelId: channelId },\n        };\n        (_b = iframe.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage(message, \"*\");\n    });\n};\n\n/* eslint-disable no-console,@typescript-eslint/no-explicit-any,prefer-rest-params,@typescript-eslint/explicit-module-boundary-types */\nvar SandpackNode = /** @class */ (function (_super) {\n    (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(SandpackNode, _super);\n    function SandpackNode(selector, sandboxInfo, options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, selector, sandboxInfo, (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, options), { bundlerURL: options.bundlerURL })) || this;\n        _this._modulesCache = new Map();\n        _this.messageChannelId = (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.g)();\n        _this._initPromise = null;\n        _this.emitter = new _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.E();\n        // Assign iframes\n        _this.manageIframes(selector);\n        // Init emulator\n        _this.emulator = new _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__.Nodebox({\n            iframe: _this.emulatorIframe,\n            runtimeUrl: _this.options.bundlerURL,\n        });\n        // Trigger initial compile\n        _this.updateSandbox(sandboxInfo);\n        return _this;\n    }\n    // Initialize nodebox, should only ever be called once\n    SandpackNode.prototype._init = function (files) {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.emulator.connect()];\n                    case 1:\n                        _a.sent();\n                        // 2. Setup\n                        return [4 /*yield*/, this.emulator.fs.init(files)];\n                    case 2:\n                        // 2. Setup\n                        _a.sent();\n                        // 2.1 Other dependencies\n                        return [4 /*yield*/, this.globalListeners()];\n                    case 3:\n                        // 2.1 Other dependencies\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * It initializes the emulator and provide it with files, template and script to run\n     */\n    SandpackNode.prototype.compile = function (files) {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var shellId, err_1;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 5, , 6]);\n                        // 1. Init\n                        this.status = \"initializing\";\n                        this.dispatch({ type: \"start\", firstLoad: true });\n                        if (!this._initPromise) {\n                            this._initPromise = this._init(files);\n                        }\n                        return [4 /*yield*/, this._initPromise];\n                    case 1:\n                        _a.sent();\n                        this.dispatch({ type: \"connected\" });\n                        return [4 /*yield*/, this.createShellProcessFromTask(files)];\n                    case 2:\n                        shellId = (_a.sent()).id;\n                        // 4. Launch Preview\n                        return [4 /*yield*/, this.createPreviewURLFromId(shellId)];\n                    case 3:\n                        // 4. Launch Preview\n                        _a.sent();\n                        return [4 /*yield*/, this.setLocationURLIntoIFrame()];\n                    case 4:\n                        _a.sent();\n                        // 5. Returns to consumer\n                        this.dispatchDoneMessage();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        err_1 = _a.sent();\n                        this.dispatch({\n                            type: \"action\",\n                            action: \"notification\",\n                            notificationType: \"error\",\n                            title: (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(err_1),\n                        });\n                        this.dispatch({ type: \"done\", compilatonError: true });\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * It creates a new shell and run the starting task\n     */\n    SandpackNode.prototype.createShellProcessFromTask = function (files) {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var packageJsonContent;\n            var _a;\n            var _this = this;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        packageJsonContent = (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.r)(files[\"/package.json\"]);\n                        this.emulatorCommand = (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.b)(packageJsonContent);\n                        this.emulatorShellProcess = this.emulator.shell.create();\n                        // Shell listeners\n                        return [4 /*yield*/, this.emulatorShellProcess.on(\"exit\", function (exitCode) {\n                                _this.dispatch({\n                                    type: \"action\",\n                                    action: \"notification\",\n                                    notificationType: \"error\",\n                                    title: (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(\"Error: process.exit(\".concat(exitCode, \") called.\")),\n                                });\n                            })];\n                    case 1:\n                        // Shell listeners\n                        _b.sent();\n                        return [4 /*yield*/, this.emulatorShellProcess.on(\"progress\", function (data) {\n                                var _a, _b;\n                                if (data.state === \"command_running\" ||\n                                    data.state === \"starting_command\") {\n                                    _this.dispatch({\n                                        type: \"shell/progress\",\n                                        data: (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, data), { command: [\n                                                (_a = _this.emulatorCommand) === null || _a === void 0 ? void 0 : _a[0],\n                                                (_b = _this.emulatorCommand) === null || _b === void 0 ? void 0 : _b[1].join(\" \"),\n                                            ].join(\" \") }),\n                                    });\n                                    _this.status = \"installing-dependencies\";\n                                    return;\n                                }\n                                _this.dispatch({ type: \"shell/progress\", data: data });\n                            })];\n                    case 2:\n                        _b.sent();\n                        this.emulatorShellProcess.stdout.on(\"data\", function (data) {\n                            _this.dispatch({ type: \"stdout\", payload: { data: data, type: \"out\" } });\n                        });\n                        this.emulatorShellProcess.stderr.on(\"data\", function (data) {\n                            _this.dispatch({ type: \"stdout\", payload: { data: data, type: \"err\" } });\n                        });\n                        return [4 /*yield*/, (_a = this.emulatorShellProcess).runCommand.apply(_a, this.emulatorCommand)];\n                    case 3: return [2 /*return*/, _b.sent()];\n                }\n            });\n        });\n    };\n    SandpackNode.prototype.createPreviewURLFromId = function (id) {\n        var _a;\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var url;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.iframePreviewUrl = undefined;\n                        return [4 /*yield*/, this.emulator.preview.getByShellId(id)];\n                    case 1:\n                        url = (_b.sent()).url;\n                        this.iframePreviewUrl = url + ((_a = this.options.startRoute) !== null && _a !== void 0 ? _a : \"\");\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Nodebox needs to handle two types of iframes at the same time:\n     *\n     * 1. Runtime iframe: where the emulator process runs, which is responsible\n     *    for creating the other iframes (hidden);\n     * 2. Preview iframes: any other node process that contains a PORT (public);\n     */\n    SandpackNode.prototype.manageIframes = function (selector) {\n        var _a;\n        /**\n         * Pick the preview iframe\n         */\n        if (typeof selector === \"string\") {\n            var element = document.querySelector(selector);\n            (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(element, \"The element '\".concat(selector, \"' was not found\"));\n            this.iframe = document.createElement(\"iframe\");\n            element === null || element === void 0 ? void 0 : element.appendChild(this.iframe);\n        }\n        else {\n            this.iframe = selector;\n        }\n        // Set preview iframe styles\n        setPreviewIframeProperties(this.iframe, this.options);\n        (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(this.iframe.parentNode, \"The given iframe does not have a parent.\");\n        /**\n         * Create the runtime iframe, which is hidden sibling\n         * from the preview one\n         */\n        this.emulatorIframe = document.createElement(\"iframe\");\n        this.emulatorIframe.classList.add(\"sp-bridge-frame\");\n        (_a = this.iframe.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(this.emulatorIframe);\n    };\n    SandpackNode.prototype.setLocationURLIntoIFrame = function () {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.iframePreviewUrl) return [3 /*break*/, 2];\n                        return [4 /*yield*/, loadPreviewIframe(this.iframe, this.iframePreviewUrl)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Send all messages and events to tell to the\n     * consumer that the bundler is ready without any error\n     */\n    SandpackNode.prototype.dispatchDoneMessage = function () {\n        this.status = \"done\";\n        this.dispatch({ type: \"done\", compilatonError: false });\n        if (this.iframePreviewUrl) {\n            this.dispatch({\n                type: \"urlchange\",\n                url: this.iframePreviewUrl,\n                back: false,\n                forward: false,\n            });\n        }\n    };\n    SandpackNode.prototype.globalListeners = function () {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var _this = this;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        window.addEventListener(\"message\", function (event) {\n                            if (event.data.type === _codesandbox_nodebox__WEBPACK_IMPORTED_MODULE_0__.PREVIEW_LOADED_MESSAGE_TYPE) {\n                                injectScriptToIframe(_this.iframe, _this.messageChannelId);\n                            }\n                            if (event.data.type === \"urlchange\" &&\n                                event.data.channelId === _this.messageChannelId) {\n                                _this.dispatch({\n                                    type: \"urlchange\",\n                                    url: event.data.url,\n                                    back: event.data.back,\n                                    forward: event.data.forward,\n                                });\n                            }\n                            else if (event.data.channelId === _this.messageChannelId) {\n                                _this.dispatch(event.data);\n                            }\n                        });\n                        return [4 /*yield*/, this.emulator.fs.watch([\"*\"], [\n                                \".next\",\n                                \"node_modules\",\n                                \"build\",\n                                \"dist\",\n                                \"vendor\",\n                                \".config\",\n                                \".vuepress\",\n                            ], function (message) { return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(_this, void 0, void 0, function () {\n                                var event, path, type, _a, content, newContent, err_2;\n                                return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            if (!message)\n                                                return [2 /*return*/];\n                                            event = message;\n                                            path = \"newPath\" in event\n                                                ? event.newPath\n                                                : \"path\" in event\n                                                    ? event.path\n                                                    : \"\";\n                                            return [4 /*yield*/, this.emulator.fs.stat(path)];\n                                        case 1:\n                                            type = (_b.sent()).type;\n                                            if (type !== \"file\")\n                                                return [2 /*return*/, null];\n                                            _b.label = 2;\n                                        case 2:\n                                            _b.trys.push([2, 10, , 11]);\n                                            _a = event.type;\n                                            switch (_a) {\n                                                case \"change\": return [3 /*break*/, 3];\n                                                case \"create\": return [3 /*break*/, 3];\n                                                case \"remove\": return [3 /*break*/, 5];\n                                                case \"rename\": return [3 /*break*/, 6];\n                                                case \"close\": return [3 /*break*/, 8];\n                                            }\n                                            return [3 /*break*/, 9];\n                                        case 3: return [4 /*yield*/, this.emulator.fs.readFile(event.path, \"utf8\")];\n                                        case 4:\n                                            content = _b.sent();\n                                            this.dispatch({\n                                                type: \"fs/change\",\n                                                path: event.path,\n                                                content: content,\n                                            });\n                                            this._modulesCache.set(event.path, (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.w)(content));\n                                            return [3 /*break*/, 9];\n                                        case 5:\n                                            this.dispatch({\n                                                type: \"fs/remove\",\n                                                path: event.path,\n                                            });\n                                            this._modulesCache.delete(event.path);\n                                            return [3 /*break*/, 9];\n                                        case 6:\n                                            this.dispatch({\n                                                type: \"fs/remove\",\n                                                path: event.oldPath,\n                                            });\n                                            this._modulesCache.delete(event.oldPath);\n                                            return [4 /*yield*/, this.emulator.fs.readFile(event.newPath, \"utf8\")];\n                                        case 7:\n                                            newContent = _b.sent();\n                                            this.dispatch({\n                                                type: \"fs/change\",\n                                                path: event.newPath,\n                                                content: newContent,\n                                            });\n                                            this._modulesCache.set(event.newPath, (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.w)(newContent));\n                                            return [3 /*break*/, 9];\n                                        case 8: return [3 /*break*/, 9];\n                                        case 9: return [3 /*break*/, 11];\n                                        case 10:\n                                            err_2 = _b.sent();\n                                            this.dispatch({\n                                                type: \"action\",\n                                                action: \"notification\",\n                                                notificationType: \"error\",\n                                                title: (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(err_2),\n                                            });\n                                            return [3 /*break*/, 11];\n                                        case 11: return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * PUBLIC Methods\n     */\n    SandpackNode.prototype.restartShellProcess = function () {\n        var _a;\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(this.emulatorShellProcess && this.emulatorCommand)) return [3 /*break*/, 3];\n                        // 1. Set the loading state and clean the URL\n                        this.dispatch({ type: \"start\", firstLoad: true });\n                        this.status = \"initializing\";\n                        // 2. Exit shell\n                        return [4 /*yield*/, this.emulatorShellProcess.kill()];\n                    case 1:\n                        // 2. Exit shell\n                        _b.sent();\n                        (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.removeAttribute(\"attr\");\n                        this.emulator.fs.rm(\"/node_modules/.vite\", {\n                            recursive: true,\n                            force: true,\n                        });\n                        // 3 Run command again\n                        return [4 /*yield*/, this.compile(Object.fromEntries(this._modulesCache))];\n                    case 2:\n                        // 3 Run command again\n                        _b.sent();\n                        _b.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SandpackNode.prototype.updateSandbox = function (setup) {\n        var _this = this;\n        var _a;\n        var modules = (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.f)(setup.files);\n        /**\n         * Update file changes\n         */\n        if (((_a = this.emulatorShellProcess) === null || _a === void 0 ? void 0 : _a.state) === \"running\") {\n            Object.entries(modules).forEach(function (_a) {\n                var key = _a[0], value = _a[1];\n                if (!_this._modulesCache.get(key) ||\n                    (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.r)(value) !== (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.r)(_this._modulesCache.get(key))) {\n                    _this.emulator.fs.writeFile(key, value, { recursive: true });\n                }\n            });\n            return;\n        }\n        /**\n         * Pass init files to the bundler\n         */\n        this.dispatch({\n            codesandbox: true,\n            modules: modules,\n            template: setup.template,\n            type: \"compile\",\n        });\n        /**\n         * Add modules to cache, this will ensure uniqueness changes\n         *\n         * Keep it after the compile action, in order to update the cache at the right moment\n         */\n        Object.entries(modules).forEach(function (_a) {\n            var key = _a[0], value = _a[1];\n            _this._modulesCache.set(key, (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.w)(value));\n        });\n    };\n    SandpackNode.prototype.dispatch = function (message) {\n        var _a, _b;\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var _c;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _c = message.type;\n                        switch (_c) {\n                            case \"compile\": return [3 /*break*/, 1];\n                            case \"refresh\": return [3 /*break*/, 2];\n                            case \"urlback\": return [3 /*break*/, 4];\n                            case \"urlforward\": return [3 /*break*/, 4];\n                            case \"shell/restart\": return [3 /*break*/, 5];\n                            case \"shell/openPreview\": return [3 /*break*/, 6];\n                        }\n                        return [3 /*break*/, 7];\n                    case 1:\n                        this.compile(message.modules);\n                        return [3 /*break*/, 8];\n                    case 2: return [4 /*yield*/, this.setLocationURLIntoIFrame()];\n                    case 3:\n                        _d.sent();\n                        return [3 /*break*/, 8];\n                    case 4:\n                        (_b = (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage(message, \"*\");\n                        return [3 /*break*/, 8];\n                    case 5:\n                        this.restartShellProcess();\n                        return [3 /*break*/, 8];\n                    case 6:\n                        window.open(this.iframePreviewUrl, \"_blank\");\n                        return [3 /*break*/, 8];\n                    case 7:\n                        this.emitter.dispatch(message);\n                        _d.label = 8;\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SandpackNode.prototype.listen = function (listener) {\n        return this.emitter.listener(listener);\n    };\n    SandpackNode.prototype.destroy = function () {\n        this.emulatorIframe.remove();\n        this.emitter.cleanup();\n    };\n    return SandpackNode;\n}(_base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__.S));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/runtime/index.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/clients/runtime/index.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandpackRuntime: () => (/* binding */ SandpackRuntime)\n/* harmony export */ });\n/* harmony import */ var _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils-52664384.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n/* harmony import */ var _base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../base-80a1f760.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs\");\n/* harmony import */ var mime_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mime-db */ \"(ssr)/./node_modules/mime-db/index.js\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n\n\n\n\n\n\n/**\n * This file is a copy of the resolver from the `codesandbox-api` package.\n * We wanted to avoid to reference codesandbox-api because of the code that runs on load in the package.\n * The plan is to take some time and refactor codesandbox-api into what it was supposed to be in the first place,\n * an abstraction over the actions that can be dispatched between the bundler and the iframe.\n */\nvar Protocol = /** @class */ (function () {\n    function Protocol(type, handleMessage, protocol) {\n        var _this = this;\n        this.type = type;\n        this.handleMessage = handleMessage;\n        this.protocol = protocol;\n        this._disposeMessageListener = this.protocol.channelListen(function (msg) { return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(_this, void 0, void 0, function () {\n            var message, result, response, err_1, response;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(msg.type === this.getTypeId() && msg.method)) return [3 /*break*/, 4];\n                        message = msg;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.handleMessage(message)];\n                    case 2:\n                        result = _a.sent();\n                        response = {\n                            type: this.getTypeId(),\n                            msgId: message.msgId,\n                            result: result,\n                        };\n                        this.protocol.dispatch(response);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _a.sent();\n                        response = {\n                            type: this.getTypeId(),\n                            msgId: message.msgId,\n                            error: {\n                                message: err_1.message,\n                            },\n                        };\n                        this.protocol.dispatch(response);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); });\n    }\n    Protocol.prototype.getTypeId = function () {\n        return \"protocol-\".concat(this.type);\n    };\n    Protocol.prototype.dispose = function () {\n        this._disposeMessageListener();\n    };\n    return Protocol;\n}());\n\nvar IFrameProtocol = /** @class */ (function () {\n    function IFrameProtocol(iframe, origin) {\n        // React to messages from any iframe\n        this.globalListeners = {};\n        this.globalListenersCount = 0;\n        // React to messages from the iframe owned by this instance\n        this.channelListeners = {};\n        this.channelListenersCount = 0;\n        // Random number to identify this instance of the client when messages are coming from multiple iframes\n        this.channelId = Math.floor(Math.random() * 1000000);\n        this.frameWindow = iframe.contentWindow;\n        this.origin = origin;\n        this.globalListeners = [];\n        this.channelListeners = [];\n        this.eventListener = this.eventListener.bind(this);\n        if (typeof window !== \"undefined\") {\n            window.addEventListener(\"message\", this.eventListener);\n        }\n    }\n    IFrameProtocol.prototype.cleanup = function () {\n        window.removeEventListener(\"message\", this.eventListener);\n        this.globalListeners = {};\n        this.channelListeners = {};\n        this.globalListenersCount = 0;\n        this.channelListenersCount = 0;\n    };\n    // Sends the channelId and triggers an iframeHandshake promise to resolve,\n    // so the iframe can start listening for messages (based on the id)\n    IFrameProtocol.prototype.register = function () {\n        if (!this.frameWindow) {\n            return;\n        }\n        this.frameWindow.postMessage({\n            type: \"register-frame\",\n            origin: document.location.origin,\n            id: this.channelId,\n        }, this.origin);\n    };\n    // Messages are dispatched from the client directly to the instance iframe\n    IFrameProtocol.prototype.dispatch = function (message) {\n        if (!this.frameWindow) {\n            return;\n        }\n        this.frameWindow.postMessage((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({ $id: this.channelId, codesandbox: true }, message), this.origin);\n    };\n    // Add a listener that is called on any message coming from an iframe in the page\n    // This is needed for the `initialize` message which comes without a channelId\n    IFrameProtocol.prototype.globalListen = function (listener) {\n        var _this = this;\n        if (typeof listener !== \"function\") {\n            return function () {\n                return;\n            };\n        }\n        var listenerId = this.globalListenersCount;\n        this.globalListeners[listenerId] = listener;\n        this.globalListenersCount++;\n        return function () {\n            delete _this.globalListeners[listenerId];\n        };\n    };\n    // Add a listener that is called on any message coming from an iframe with the instance channelId\n    // All other messages (eg: from other iframes) are ignored\n    IFrameProtocol.prototype.channelListen = function (listener) {\n        var _this = this;\n        if (typeof listener !== \"function\") {\n            return function () {\n                return;\n            };\n        }\n        var listenerId = this.channelListenersCount;\n        this.channelListeners[listenerId] = listener;\n        this.channelListenersCount++;\n        return function () {\n            delete _this.channelListeners[listenerId];\n        };\n    };\n    // Handles message windows coming from iframes\n    IFrameProtocol.prototype.eventListener = function (evt) {\n        // skip events originating from different iframes\n        if (evt.source !== this.frameWindow) {\n            return;\n        }\n        var message = evt.data;\n        if (!message.codesandbox) {\n            return;\n        }\n        Object.values(this.globalListeners).forEach(function (listener) {\n            return listener(message);\n        });\n        if (message.$id !== this.channelId) {\n            return;\n        }\n        Object.values(this.channelListeners).forEach(function (listener) {\n            return listener(message);\n        });\n    };\n    return IFrameProtocol;\n}());\n\nvar extensionMap = new Map();\nvar entries = Object.entries(mime_db__WEBPACK_IMPORTED_MODULE_1__);\nfor (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n    var _a$1 = entries_1[_i], mimetype = _a$1[0], entry = _a$1[1];\n    // eslint-disable-next-line\n    // @ts-ignore\n    if (!entry.extensions) {\n        continue;\n    }\n    // eslint-disable-next-line\n    // @ts-ignore\n    var extensions = entry.extensions;\n    if (extensions.length) {\n        for (var _b = 0, extensions_1 = extensions; _b < extensions_1.length; _b++) {\n            var ext = extensions_1[_b];\n            extensionMap.set(ext, mimetype);\n        }\n    }\n}\nvar EXTENSIONS_MAP = extensionMap;\n\nvar CHANNEL_NAME = \"$CSB_RELAY\";\n\nvar MAX_CLIENT_DEPENDENCY_COUNT = 50;\nfunction getTemplate(pkg, \n/* eslint-disable @typescript-eslint/no-explicit-any */\nmodules) {\n    if (!pkg) {\n        return \"static\";\n    }\n    var _a = pkg.dependencies, dependencies = _a === void 0 ? {} : _a, _b = pkg.devDependencies, devDependencies = _b === void 0 ? {} : _b;\n    var totalDependencies = (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.i)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.i)([], Object.keys(dependencies), true), Object.keys(devDependencies), true);\n    var moduleNames = Object.keys(modules);\n    var adonis = [\"@adonisjs/framework\", \"@adonisjs/core\"];\n    if (totalDependencies.some(function (dep) { return adonis.indexOf(dep) > -1; })) {\n        return \"adonis\";\n    }\n    var nuxt = [\"nuxt\", \"nuxt-edge\", \"nuxt-ts\", \"nuxt-ts-edge\", \"nuxt3\"];\n    if (totalDependencies.some(function (dep) { return nuxt.indexOf(dep) > -1; })) {\n        return \"nuxt\";\n    }\n    if (totalDependencies.indexOf(\"next\") > -1) {\n        return \"next\";\n    }\n    var apollo = [\n        \"apollo-server\",\n        \"apollo-server-express\",\n        \"apollo-server-hapi\",\n        \"apollo-server-koa\",\n        \"apollo-server-lambda\",\n        \"apollo-server-micro\",\n    ];\n    if (totalDependencies.some(function (dep) { return apollo.indexOf(dep) > -1; })) {\n        return \"apollo\";\n    }\n    if (totalDependencies.indexOf(\"mdx-deck\") > -1) {\n        return \"mdx-deck\";\n    }\n    if (totalDependencies.indexOf(\"gridsome\") > -1) {\n        return \"gridsome\";\n    }\n    if (totalDependencies.indexOf(\"vuepress\") > -1) {\n        return \"vuepress\";\n    }\n    if (totalDependencies.indexOf(\"ember-cli\") > -1) {\n        return \"ember\";\n    }\n    if (totalDependencies.indexOf(\"sapper\") > -1) {\n        return \"sapper\";\n    }\n    if (totalDependencies.indexOf(\"gatsby\") > -1) {\n        return \"gatsby\";\n    }\n    if (totalDependencies.indexOf(\"quasar\") > -1) {\n        return \"quasar\";\n    }\n    if (totalDependencies.indexOf(\"@docusaurus/core\") > -1) {\n        return \"docusaurus\";\n    }\n    if (totalDependencies.indexOf(\"remix\") > -1) {\n        return \"remix\";\n    }\n    if (totalDependencies.indexOf(\"astro\") > -1) {\n        return \"node\";\n    }\n    // CLIENT\n    if (moduleNames.some(function (m) { return m.endsWith(\".re\"); })) {\n        return \"reason\";\n    }\n    var parcel = [\"parcel-bundler\", \"parcel\"];\n    if (totalDependencies.some(function (dep) { return parcel.indexOf(dep) > -1; })) {\n        return \"parcel\";\n    }\n    var dojo = [\"@dojo/core\", \"@dojo/framework\"];\n    if (totalDependencies.some(function (dep) { return dojo.indexOf(dep) > -1; })) {\n        return \"@dojo/cli-create-app\";\n    }\n    if (totalDependencies.indexOf(\"@nestjs/core\") > -1 ||\n        totalDependencies.indexOf(\"@nestjs/common\") > -1) {\n        return \"nest\";\n    }\n    if (totalDependencies.indexOf(\"react-styleguidist\") > -1) {\n        return \"styleguidist\";\n    }\n    if (totalDependencies.indexOf(\"react-scripts\") > -1) {\n        return \"create-react-app\";\n    }\n    if (totalDependencies.indexOf(\"react-scripts-ts\") > -1) {\n        return \"create-react-app-typescript\";\n    }\n    if (totalDependencies.indexOf(\"@angular/core\") > -1) {\n        return \"angular-cli\";\n    }\n    if (totalDependencies.indexOf(\"preact-cli\") > -1) {\n        return \"preact-cli\";\n    }\n    if (totalDependencies.indexOf(\"@sveltech/routify\") > -1 ||\n        totalDependencies.indexOf(\"@roxi/routify\") > -1) {\n        return \"node\";\n    }\n    if (totalDependencies.indexOf(\"vite\") > -1) {\n        return \"node\";\n    }\n    if (totalDependencies.indexOf(\"@frontity/core\") > -1) {\n        return \"node\";\n    }\n    if (totalDependencies.indexOf(\"svelte\") > -1) {\n        return \"svelte\";\n    }\n    if (totalDependencies.indexOf(\"vue\") > -1) {\n        return \"vue-cli\";\n    }\n    if (totalDependencies.indexOf(\"cx\") > -1) {\n        return \"cxjs\";\n    }\n    var nodeDeps = [\n        \"express\",\n        \"koa\",\n        \"nodemon\",\n        \"ts-node\",\n        \"@tensorflow/tfjs-node\",\n        \"webpack-dev-server\",\n        \"snowpack\",\n    ];\n    if (totalDependencies.some(function (dep) { return nodeDeps.indexOf(dep) > -1; })) {\n        return \"node\";\n    }\n    if (Object.keys(dependencies).length >= MAX_CLIENT_DEPENDENCY_COUNT) {\n        // The dependencies are too much for client sandboxes to handle\n        return \"node\";\n    }\n    return undefined;\n}\nfunction getExtension(filepath) {\n    var parts = filepath.split(\".\");\n    if (parts.length <= 1) {\n        return \"\";\n    }\n    else {\n        var ext = parts[parts.length - 1];\n        return ext;\n    }\n}\n\nvar _a;\nvar SUFFIX_PLACEHOLDER = \"-{{suffix}}\";\nvar BUNDLER_URL = \"https://\".concat((_a = \"2.19.8\") === null || _a === void 0 ? void 0 : _a.replace(/\\./g, \"-\")).concat(SUFFIX_PLACEHOLDER, \"-sandpack.codesandbox.io/\");\nvar SandpackRuntime = /** @class */ (function (_super) {\n    (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(SandpackRuntime, _super);\n    function SandpackRuntime(selector, sandboxSetup, options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, selector, sandboxSetup, options) || this;\n        _this.getTranspilerContext = function () {\n            return new Promise(function (resolve) {\n                var unsubscribe = _this.listen(function (message) {\n                    if (message.type === \"transpiler-context\") {\n                        resolve(message.data);\n                        unsubscribe();\n                    }\n                });\n                _this.dispatch({ type: \"get-transpiler-context\" });\n            });\n        };\n        _this.getTranspiledFiles = function () {\n            return new Promise(function (resolve) {\n                var unsubscribe = _this.listen(function (message) {\n                    if (message.type === \"all-modules\") {\n                        resolve(message.data);\n                        unsubscribe();\n                    }\n                });\n                _this.dispatch({ type: \"get-modules\" });\n            });\n        };\n        _this.bundlerURL = _this.createBundlerURL();\n        _this.bundlerState = undefined;\n        _this.errors = [];\n        _this.status = \"initializing\";\n        if (typeof selector === \"string\") {\n            _this.selector = selector;\n            var element = document.querySelector(selector);\n            (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(element, \"The element '\".concat(selector, \"' was not found\"));\n            _this.element = element;\n            _this.iframe = document.createElement(\"iframe\");\n            _this.initializeElement();\n        }\n        else {\n            _this.element = selector;\n            _this.iframe = selector;\n        }\n        if (!_this.iframe.getAttribute(\"sandbox\")) {\n            _this.iframe.setAttribute(\"sandbox\", \"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts allow-downloads allow-pointer-lock\");\n            _this.iframe.setAttribute(\"allow\", \"accelerometer; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; clipboard-read; clipboard-write; xr-spatial-tracking;\");\n        }\n        _this.setLocationURLIntoIFrame();\n        _this.iframeProtocol = new IFrameProtocol(_this.iframe, _this.bundlerURL);\n        _this.unsubscribeGlobalListener = _this.iframeProtocol.globalListen(function (mes) {\n            if (mes.type !== \"initialized\" || !_this.iframe.contentWindow) {\n                return;\n            }\n            _this.iframeProtocol.register();\n            if (_this.options.fileResolver) {\n                _this.fileResolverProtocol = new Protocol(\"fs\", function (data) { return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(_this, void 0, void 0, function () {\n                    return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                        if (data.method === \"isFile\") {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            return [2 /*return*/, this.options.fileResolver.isFile(data.params[0])];\n                        }\n                        else if (data.method === \"readFile\") {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            return [2 /*return*/, this.options.fileResolver.readFile(data.params[0])];\n                        }\n                        else {\n                            throw new Error(\"Method not supported\");\n                        }\n                    });\n                }); }, _this.iframeProtocol);\n            }\n            _this.updateSandbox(_this.sandboxSetup, true);\n        });\n        _this.unsubscribeChannelListener = _this.iframeProtocol.channelListen(function (mes) {\n            switch (mes.type) {\n                case \"start\": {\n                    _this.errors = [];\n                    break;\n                }\n                case \"status\": {\n                    _this.status = mes.status;\n                    break;\n                }\n                case \"action\": {\n                    if (mes.action === \"show-error\") {\n                        _this.errors = (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.i)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.i)([], _this.errors, true), [(0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(mes)], false);\n                    }\n                    break;\n                }\n                case \"done\": {\n                    _this.status = \"done\";\n                    break;\n                }\n                case \"state\": {\n                    _this.bundlerState = mes.state;\n                    break;\n                }\n            }\n        });\n        if (options.experimental_enableServiceWorker) {\n            _this.serviceWorkerHandshake();\n        }\n        return _this;\n    }\n    SandpackRuntime.prototype.createBundlerURL = function () {\n        var _a;\n        var bundlerURL = this.options.bundlerURL || BUNDLER_URL;\n        // if it's a custom, skip the rest\n        if (this.options.bundlerURL) {\n            return bundlerURL;\n        }\n        if (this.options.teamId) {\n            bundlerURL =\n                bundlerURL.replace(\"https://\", \"https://\" + this.options.teamId + \"-\") +\n                    \"?cache=\".concat(Date.now());\n        }\n        if (this.options.experimental_enableServiceWorker) {\n            var suffixes = [];\n            suffixes.push(Math.random().toString(36).slice(4));\n            bundlerURL = bundlerURL.replace(SUFFIX_PLACEHOLDER, \"-\".concat((_a = this.options.experimental_stableServiceWorkerId) !== null && _a !== void 0 ? _a : suffixes.join(\"-\")));\n        }\n        else {\n            bundlerURL = bundlerURL.replace(SUFFIX_PLACEHOLDER, \"\");\n        }\n        return bundlerURL;\n    };\n    SandpackRuntime.prototype.serviceWorkerHandshake = function () {\n        var _this = this;\n        var channel = new MessageChannel();\n        var iframeContentWindow = this.iframe.contentWindow;\n        if (!iframeContentWindow) {\n            throw new Error(\"Could not get iframe contentWindow\");\n        }\n        var port = channel.port1;\n        port.onmessage = function (evt) {\n            if (typeof evt.data === \"object\" && evt.data.$channel === CHANNEL_NAME) {\n                switch (evt.data.$type) {\n                    case \"preview/ready\":\n                        // no op for now\n                        break;\n                    case \"preview/request\":\n                        _this.handleWorkerRequest(evt.data, port);\n                        break;\n                }\n            }\n        };\n        var sendMessage = function () {\n            var initMsg = {\n                $channel: CHANNEL_NAME,\n                $type: \"preview/init\",\n            };\n            iframeContentWindow.postMessage(initMsg, \"*\", [channel.port2]);\n            _this.iframe.removeEventListener(\"load\", sendMessage);\n        };\n        this.iframe.addEventListener(\"load\", sendMessage);\n    };\n    SandpackRuntime.prototype.handleWorkerRequest = function (request, port) {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var notFound, filepath_1, headers, files, file, modulesFromManager, body, extension, foundMimetype, responseMessage, err_1;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        notFound = function () {\n                            var responseMessage = {\n                                $channel: CHANNEL_NAME,\n                                $type: \"preview/response\",\n                                id: request.id,\n                                headers: {\n                                    \"Content-Type\": \"text/html; charset=utf-8\",\n                                },\n                                status: 404,\n                                body: \"File not found\",\n                            };\n                            port.postMessage(responseMessage);\n                        };\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 5]);\n                        filepath_1 = new URL(request.url, this.bundlerURL).pathname;\n                        headers = {};\n                        files = this.getFiles();\n                        file = files[filepath_1];\n                        if (!!file) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.getTranspiledFiles()];\n                    case 2:\n                        modulesFromManager = _a.sent();\n                        file = modulesFromManager.find(function (item) {\n                            return item.path.endsWith(filepath_1);\n                        });\n                        if (!file) {\n                            notFound();\n                            return [2 /*return*/];\n                        }\n                        _a.label = 3;\n                    case 3:\n                        body = file.code;\n                        if (!headers[\"Content-Type\"]) {\n                            extension = getExtension(filepath_1);\n                            foundMimetype = EXTENSIONS_MAP.get(extension);\n                            if (foundMimetype) {\n                                headers[\"Content-Type\"] = foundMimetype;\n                            }\n                        }\n                        responseMessage = {\n                            $channel: CHANNEL_NAME,\n                            $type: \"preview/response\",\n                            id: request.id,\n                            headers: headers,\n                            status: 200,\n                            body: body,\n                        };\n                        port.postMessage(responseMessage);\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        console.error(err_1);\n                        notFound();\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SandpackRuntime.prototype.setLocationURLIntoIFrame = function () {\n        var _a;\n        var urlSource = this.options.startRoute\n            ? new URL(this.options.startRoute, this.bundlerURL).toString()\n            : this.bundlerURL;\n        (_a = this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.location.replace(urlSource);\n        this.iframe.src = urlSource;\n    };\n    SandpackRuntime.prototype.destroy = function () {\n        this.unsubscribeChannelListener();\n        this.unsubscribeGlobalListener();\n        this.iframeProtocol.cleanup();\n    };\n    SandpackRuntime.prototype.updateOptions = function (options) {\n        if (!(0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(this.options, options)) {\n            this.options = options;\n            this.updateSandbox();\n        }\n    };\n    SandpackRuntime.prototype.updateSandbox = function (sandboxSetup, isInitializationCompile) {\n        var _a, _b, _c, _d;\n        if (sandboxSetup === void 0) { sandboxSetup = this.sandboxSetup; }\n        this.sandboxSetup = (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, this.sandboxSetup), sandboxSetup);\n        var files = this.getFiles();\n        var modules = Object.keys(files).reduce(function (prev, next) {\n            var _a;\n            return ((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, prev), (_a = {}, _a[next] = {\n                code: files[next].code,\n                path: next,\n            }, _a)));\n        }, {});\n        var packageJSON = JSON.parse((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.b)(this.sandboxSetup.dependencies, this.sandboxSetup.devDependencies, this.sandboxSetup.entry));\n        try {\n            packageJSON = JSON.parse(files[\"/package.json\"].code);\n        }\n        catch (e) {\n            console.error((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(\"could not parse package.json file: \" + e.message));\n        }\n        // TODO move this to a common format\n        var normalizedModules = Object.keys(files).reduce(function (prev, next) {\n            var _a;\n            return ((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, prev), (_a = {}, _a[next] = {\n                content: files[next].code,\n                path: next,\n            }, _a)));\n        }, {});\n        this.dispatch((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, this.options), { type: \"compile\", codesandbox: true, version: 3, isInitializationCompile: isInitializationCompile, modules: modules, reactDevTools: this.options.reactDevTools, externalResources: this.options.externalResources || [], hasFileResolver: Boolean(this.options.fileResolver), disableDependencyPreprocessing: this.sandboxSetup.disableDependencyPreprocessing, experimental_enableServiceWorker: this.options.experimental_enableServiceWorker, template: this.sandboxSetup.template ||\n                getTemplate(packageJSON, normalizedModules), showOpenInCodeSandbox: (_a = this.options.showOpenInCodeSandbox) !== null && _a !== void 0 ? _a : true, showErrorScreen: (_b = this.options.showErrorScreen) !== null && _b !== void 0 ? _b : true, showLoadingScreen: (_c = this.options.showLoadingScreen) !== null && _c !== void 0 ? _c : false, skipEval: this.options.skipEval || false, clearConsoleDisabled: !this.options.clearConsoleOnFirstCompile, logLevel: (_d = this.options.logLevel) !== null && _d !== void 0 ? _d : _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.S.Info, customNpmRegistries: this.options.customNpmRegistries, teamId: this.options.teamId, sandboxId: this.options.sandboxId }));\n    };\n    SandpackRuntime.prototype.dispatch = function (message) {\n        /**\n         * Intercept \"refresh\" dispatch: this will make sure\n         * that the iframe is still in the location it's supposed to be.\n         * External links inside the iframe will change the location and\n         * prevent the user from navigating back.\n         */\n        if (message.type === \"refresh\") {\n            this.setLocationURLIntoIFrame();\n            if (this.options.experimental_enableServiceWorker) {\n                this.serviceWorkerHandshake();\n            }\n        }\n        this.iframeProtocol.dispatch(message);\n    };\n    SandpackRuntime.prototype.listen = function (listener) {\n        return this.iframeProtocol.channelListen(listener);\n    };\n    /**\n     * Get the URL of the contents of the current sandbox\n     */\n    SandpackRuntime.prototype.getCodeSandboxURL = function () {\n        var files = this.getFiles();\n        var paramFiles = Object.keys(files).reduce(function (prev, next) {\n            var _a;\n            return ((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)((0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.h)({}, prev), (_a = {}, _a[next.replace(\"/\", \"\")] = {\n                content: files[next].code,\n                isBinary: false,\n            }, _a)));\n        }, {});\n        return fetch(\"https://codesandbox.io/api/v1/sandboxes/define?json=1\", {\n            method: \"POST\",\n            body: JSON.stringify({ files: paramFiles }),\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then(function (x) { return x.json(); })\n            .then(function (res) { return ({\n            sandboxId: res.sandbox_id,\n            editorUrl: \"https://codesandbox.io/s/\".concat(res.sandbox_id),\n            embedUrl: \"https://codesandbox.io/embed/\".concat(res.sandbox_id),\n        }); });\n    };\n    SandpackRuntime.prototype.getFiles = function () {\n        var sandboxSetup = this.sandboxSetup;\n        if (sandboxSetup.files[\"/package.json\"] === undefined) {\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.d)(sandboxSetup.files, sandboxSetup.dependencies, sandboxSetup.devDependencies, sandboxSetup.entry);\n        }\n        return this.sandboxSetup.files;\n    };\n    SandpackRuntime.prototype.initializeElement = function () {\n        this.iframe.style.border = \"0\";\n        this.iframe.style.width = this.options.width || \"100%\";\n        this.iframe.style.height = this.options.height || \"100%\";\n        this.iframe.style.overflow = \"hidden\";\n        (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(this.element.parentNode, \"The given iframe does not have a parent.\");\n        this.element.parentNode.replaceChild(this.iframe, this.element);\n    };\n    return SandpackRuntime;\n}(_base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_4__.S));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/runtime/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E: () => (/* binding */ EventEmitter),\n/* harmony export */   a: () => (/* binding */ getMessageFromError),\n/* harmony export */   b: () => (/* binding */ findStartScriptPackageJson),\n/* harmony export */   c: () => (/* binding */ consoleHook),\n/* harmony export */   f: () => (/* binding */ fromBundlerFilesToFS),\n/* harmony export */   g: () => (/* binding */ generateRandomId),\n/* harmony export */   r: () => (/* binding */ readBuffer),\n/* harmony export */   w: () => (/* binding */ writeBuffer)\n/* harmony export */ });\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-52664384.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n\n\n\nvar EventEmitter = /** @class */ (function () {\n    function EventEmitter() {\n        this.listeners = {};\n        this.listenersCount = 0;\n        this.channelId = Math.floor(Math.random() * 1000000);\n        this.listeners = [];\n    }\n    EventEmitter.prototype.cleanup = function () {\n        this.listeners = {};\n        this.listenersCount = 0;\n    };\n    EventEmitter.prototype.dispatch = function (message) {\n        Object.values(this.listeners).forEach(function (listener) { return listener(message); });\n    };\n    EventEmitter.prototype.listener = function (listener) {\n        var _this = this;\n        if (typeof listener !== \"function\") {\n            return function () {\n                return;\n            };\n        }\n        var listenerId = this.listenersCount;\n        this.listeners[listenerId] = listener;\n        this.listenersCount++;\n        return function () {\n            delete _this.listeners[listenerId];\n        };\n    };\n    return EventEmitter;\n}());\n\nfunction isCommand(char) {\n    return /[a-zA-Z.]/.test(char);\n}\nfunction isAlpha(char) {\n    return /[a-zA-Z]/.test(char);\n}\nfunction isWhitespace(char) {\n    return /\\s/.test(char);\n}\nfunction isOperator(char) {\n    return /[&|]/.test(char);\n}\nfunction isArgument(char) {\n    return /-/.test(char);\n}\nfunction isString(char) {\n    return /[\"']/.test(char);\n}\nfunction isEnvVar(char) {\n    return isAlpha(char) && char === char.toUpperCase();\n}\nvar TokenType;\n(function (TokenType) {\n    TokenType[\"OR\"] = \"OR\";\n    TokenType[\"AND\"] = \"AND\";\n    TokenType[\"PIPE\"] = \"PIPE\";\n    TokenType[\"Command\"] = \"Command\";\n    TokenType[\"Argument\"] = \"Argument\";\n    TokenType[\"String\"] = \"String\";\n    TokenType[\"EnvVar\"] = \"EnvVar\";\n})(TokenType || (TokenType = {}));\nvar operators = new Map([\n    [\"&&\", { type: TokenType.AND }],\n    [\"||\", { type: TokenType.OR }],\n    [\"|\", { type: TokenType.PIPE }],\n    [\"-\", { type: TokenType.Argument }],\n]);\nfunction tokenize(input) {\n    var current = 0;\n    var tokens = [];\n    function parseCommand() {\n        var value = \"\";\n        while (isCommand(input[current]) && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return { type: TokenType.Command, value: value };\n    }\n    function parseOperator() {\n        var value = \"\";\n        while (isOperator(input[current]) && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return operators.get(value);\n    }\n    function parseArgument() {\n        var value = \"\";\n        while ((isArgument(input[current]) || isAlpha(input[current])) &&\n            current < input.length) {\n            value += input[current];\n            current++;\n        }\n        return { type: TokenType.Argument, value: value };\n    }\n    function parseString() {\n        var openCloseQuote = input[current];\n        var value = input[current];\n        current++;\n        while (input[current] !== openCloseQuote && current < input.length) {\n            value += input[current];\n            current++;\n        }\n        value += input[current];\n        current++;\n        return { type: TokenType.String, value: value };\n    }\n    function parseEnvVars() {\n        var value = {};\n        var parseSingleEnv = function () {\n            var key = \"\";\n            var pair = \"\";\n            while (input[current] !== \"=\" && current < input.length) {\n                key += input[current];\n                current++;\n            }\n            // Skip equal\n            if (input[current] === \"=\") {\n                current++;\n            }\n            while (input[current] !== \" \" && current < input.length) {\n                pair += input[current];\n                current++;\n            }\n            value[key] = pair;\n        };\n        while (isEnvVar(input[current]) && current < input.length) {\n            parseSingleEnv();\n            current++;\n        }\n        return { type: TokenType.EnvVar, value: value };\n    }\n    while (current < input.length) {\n        var currentChar = input[current];\n        if (isWhitespace(currentChar)) {\n            current++;\n            continue;\n        }\n        switch (true) {\n            case isEnvVar(currentChar):\n                tokens.push(parseEnvVars());\n                break;\n            case isCommand(currentChar):\n                tokens.push(parseCommand());\n                break;\n            case isOperator(currentChar):\n                tokens.push(parseOperator());\n                break;\n            case isArgument(currentChar):\n                tokens.push(parseArgument());\n                break;\n            case isString(currentChar):\n                tokens.push(parseString());\n                break;\n            default:\n                throw new Error(\"Unknown character: \".concat(currentChar));\n        }\n    }\n    return tokens;\n}\n\nvar counter = 0;\nfunction generateRandomId() {\n    var now = Date.now();\n    var randomNumber = Math.round(Math.random() * 10000);\n    var count = (counter += 1);\n    return (+\"\".concat(now).concat(randomNumber).concat(count)).toString(16);\n}\nvar writeBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return new TextEncoder().encode(content);\n    }\n    else {\n        return content;\n    }\n};\nvar readBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    else {\n        return new TextDecoder().decode(content);\n    }\n};\nvar fromBundlerFilesToFS = function (files) {\n    return Object.entries(files).reduce(function (acc, _a) {\n        var key = _a[0], value = _a[1];\n        acc[key] = writeBuffer(value.code);\n        return acc;\n    }, {});\n};\n/**\n * Figure out which script it must run to start a server\n */\nvar findStartScriptPackageJson = function (packageJson) {\n    var scripts = {};\n    // TODO: support postinstall\n    var possibleKeys = [\"dev\", \"start\"];\n    try {\n        scripts = JSON.parse(packageJson).scripts;\n    }\n    catch (e) {\n        throw (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"Could not parse package.json file: \" + e.message);\n    }\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(scripts, \"Failed to start. Please provide a `start` or `dev` script on the package.json\");\n    var _loop_1 = function (index) {\n        if (possibleKeys[index] in scripts) {\n            var script = possibleKeys[index];\n            var candidate = scripts[script];\n            var env_1 = {};\n            var command_1 = \"\";\n            var args_1 = [];\n            tokenize(candidate).forEach(function (item) {\n                var commandNotFoundYet = command_1 === \"\";\n                if (item.type === TokenType.EnvVar) {\n                    env_1 = item.value;\n                }\n                if (item.type === TokenType.Command && commandNotFoundYet) {\n                    command_1 = item.value;\n                }\n                if (item.type === TokenType.Argument ||\n                    (!commandNotFoundYet && item.type === TokenType.Command)) {\n                    args_1.push(item.value);\n                }\n                // TODO: support TokenType.AND, TokenType.OR, TokenType.PIPE\n            });\n            return { value: [command_1, args_1, { env: env_1 }] };\n        }\n    };\n    for (var index = 0; index < possibleKeys.length; index++) {\n        var state_1 = _loop_1(index);\n        if (typeof state_1 === \"object\")\n            return state_1.value;\n    }\n    throw (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"Failed to start. Please provide a `start` or `dev` script on the package.json\");\n};\nvar getMessageFromError = function (error) {\n    if (typeof error === \"string\")\n        return error;\n    if (typeof error === \"object\" && \"message\" in error) {\n        return error.message;\n    }\n    return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"The server could not be reached. Make sure that the node script is running and that a port has been started.\");\n};\n\nvar consoleHook = \"var t=\\\"undefined\\\"!=typeof globalThis?globalThis:\\\"undefined\\\"!=typeof window?window:\\\"undefined\\\"!=typeof globalThis?globalThis:\\\"undefined\\\"!=typeof self?self:{};function r(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,\\\"default\\\")?t.default:t}var e={},n={};!function(t){t.__esModule=!0,t.default=[\\\"log\\\",\\\"debug\\\",\\\"info\\\",\\\"warn\\\",\\\"error\\\",\\\"table\\\",\\\"clear\\\",\\\"time\\\",\\\"timeEnd\\\",\\\"count\\\",\\\"assert\\\",\\\"command\\\",\\\"result\\\"]}(n);var a,o={},i={};(a=i).__esModule=!0,a.default=function(){var t=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)};return t()+t()+\\\"-\\\"+t()+\\\"-\\\"+t()+\\\"-\\\"+t()+\\\"-\\\"+t()+\\\"-\\\"+Date.now()};var u={},s={__esModule:!0};s.update=s.state=void 0,s.update=function(t){s.state=t};var f={},c={};!function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)};r.__esModule=!0,r.initialState=void 0,r.initialState={timings:{},count:{}};var n=function(){return\\\"undefined\\\"!=typeof performance&&performance.now?performance.now():Date.now()};r.default=function(t,a){var o,i,u;switch(void 0===t&&(t=r.initialState),a.type){case\\\"COUNT\\\":var s=t.count[a.name]||0;return e(e({},t),{count:e(e({},t.count),(o={},o[a.name]=s+1,o))});case\\\"TIME_START\\\":return e(e({},t),{timings:e(e({},t.timings),(i={},i[a.name]={start:n()},i))});case\\\"TIME_END\\\":var f=t.timings[a.name],c=n(),l=c-f.start;return e(e({},t),{timings:e(e({},t.timings),(u={},u[a.name]=e(e({},f),{end:c,time:l}),u))});default:return t}}}(c),function(r){var e=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var n=e(c),a=s;r.default=function(t){a.update(n.default(a.state,t))}}(f);var l={__esModule:!0};l.timeEnd=l.timeStart=l.count=void 0,l.count=function(t){return{type:\\\"COUNT\\\",name:t}},l.timeStart=function(t){return{type:\\\"TIME_START\\\",name:t}},l.timeEnd=function(t){return{type:\\\"TIME_END\\\",name:t}};var d=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};u.__esModule=!0,u.stop=u.start=void 0;var p=s,h=d(f),m=l;u.start=function(t){h.default(m.timeStart(t))},u.stop=function(t){var r=null===p.state||void 0===p.state?void 0:p.state.timings[t];return r&&!r.end?(h.default(m.timeEnd(t)),{method:\\\"log\\\",data:[t+\\\": \\\"+p.state.timings[t].time+\\\"ms\\\"]}):{method:\\\"warn\\\",data:[\\\"Timer '\\\"+t+\\\"' does not exist\\\"]}};var y={},v=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};y.__esModule=!0,y.increment=void 0;var _=s,b=v(f),g=l;y.increment=function(t){return b.default(g.count(t)),{method:\\\"log\\\",data:[t+\\\": \\\"+_.state.count[t]]}};var M={},T=t&&t.__spreadArrays||function(){for(var t=0,r=0,e=arguments.length;r<e;r++)t+=arguments[r].length;var n=Array(t),a=0;for(r=0;r<e;r++)for(var o=arguments[r],i=0,u=o.length;i<u;i++,a++)n[a]=o[i];return n};M.__esModule=!0,M.test=void 0,M.test=function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];return!t&&(0===r.length&&r.push(\\\"console.assert\\\"),{method:\\\"error\\\",data:T([\\\"Assertion failed:\\\"],r)})},function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)},n=t&&t.__createBinding||(Object.create?function(t,r,e,n){void 0===n&&(n=e),Object.defineProperty(t,n,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,n){void 0===n&&(n=e),t[n]=r[e]}),a=t&&t.__setModuleDefault||(Object.create?function(t,r){Object.defineProperty(t,\\\"default\\\",{enumerable:!0,value:r})}:function(t,r){t.default=r}),o=t&&t.__importStar||function(t){if(t&&t.__esModule)return t;var r={};if(null!=t)for(var e in t)\\\"default\\\"!==e&&Object.prototype.hasOwnProperty.call(t,e)&&n(r,t,e);return a(r,t),r},s=t&&t.__spreadArrays||function(){for(var t=0,r=0,e=arguments.length;r<e;r++)t+=arguments[r].length;var n=Array(t),a=0;for(r=0;r<e;r++)for(var o=arguments[r],i=0,u=o.length;i<u;i++,a++)n[a]=o[i];return n},f=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var c=f(i),l=o(u),d=o(y),p=o(M);r.default=function(t,r,n){var a=n||c.default();switch(t){case\\\"clear\\\":return{method:t,id:a};case\\\"count\\\":return!!(o=\\\"string\\\"==typeof r[0]?r[0]:\\\"default\\\")&&e(e({},d.increment(o)),{id:a});case\\\"time\\\":case\\\"timeEnd\\\":var o;return!!(o=\\\"string\\\"==typeof r[0]?r[0]:\\\"default\\\")&&(\\\"time\\\"===t?(l.start(o),!1):e(e({},l.stop(o)),{id:a}));case\\\"assert\\\":if(0!==r.length){var i=p.test.apply(p,s([r[0]],r.slice(1)));if(i)return e(e({},i),{id:a})}return!1;case\\\"error\\\":return{method:t,id:a,data:r.map((function(t){try{return t.stack||t}catch(r){return t}}))};default:return{method:t,id:a,data:r}}}}(o);var S={},O={};!function(t){var r;t.__esModule=!0,function(t){t[t.infinity=0]=\\\"infinity\\\",t[t.minusInfinity=1]=\\\"minusInfinity\\\",t[t.minusZero=2]=\\\"minusZero\\\"}(r||(r={})),t.default={type:\\\"Arithmetic\\\",lookup:Number,shouldTransform:function(t,r){return\\\"number\\\"===t&&(r===1/0||r===-1/0||function(t){return 1/t==-1/0}(r))},toSerializable:function(t){return t===1/0?r.infinity:t===-1/0?r.minusInfinity:r.minusZero},fromSerializable:function(t){return t===r.infinity?1/0:t===r.minusInfinity?-1/0:t===r.minusZero?-0:t}}}(O);var w={};!function(t){t.__esModule=!0,t.default={type:\\\"Function\\\",lookup:Function,shouldTransform:function(t,r){return\\\"function\\\"==typeof r},toSerializable:function(t){var r=\\\"\\\";try{r=t.toString().substring(r.indexOf(\\\"{\\\")+1,r.lastIndexOf(\\\"}\\\"))}catch(t){}return{name:t.name,body:r,proto:Object.getPrototypeOf(t).constructor.name}},fromSerializable:function(t){try{var r=function(){};return\\\"string\\\"==typeof t.name&&Object.defineProperty(r,\\\"name\\\",{value:t.name,writable:!1}),\\\"string\\\"==typeof t.body&&Object.defineProperty(r,\\\"body\\\",{value:t.body,writable:!1}),\\\"string\\\"==typeof t.proto&&(r.constructor={name:t.proto}),r}catch(r){return t}}}}(w);var A={};!function(t){var r;function e(t){for(var r={},e=0,n=t.attributes;e<n.length;e++){var a=n[e];r[a.name]=a.value}return r}t.__esModule=!0,t.default={type:\\\"HTMLElement\\\",shouldTransform:function(t,r){return r&&r.children&&\\\"string\\\"==typeof r.innerHTML&&\\\"string\\\"==typeof r.tagName},toSerializable:function(t){return{tagName:t.tagName.toLowerCase(),attributes:e(t),innerHTML:t.innerHTML}},fromSerializable:function(t){try{var e=(r||(r=document.implementation.createHTMLDocument(\\\"sandbox\\\"))).createElement(t.tagName);e.innerHTML=t.innerHTML;for(var n=0,a=Object.keys(t.attributes);n<a.length;n++){var o=a[n];try{e.setAttribute(o,t.attributes[o])}catch(t){}}return e}catch(r){return t}}}}(A);var j={};!function(r){var e=t&&t.__assign||function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var a in r=arguments[e])Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a]);return t},e.apply(this,arguments)};r.__esModule=!0,r.default={type:\\\"Map\\\",shouldTransform:function(t,r){return r&&r.constructor&&\\\"Map\\\"===r.constructor.name},toSerializable:function(t){var r={};return t.forEach((function(t,e){var n=\\\"object\\\"==typeof e?JSON.stringify(e):e;r[n]=t})),{name:\\\"Map\\\",body:r,proto:Object.getPrototypeOf(t).constructor.name}},fromSerializable:function(t){var r=t.body,n=e({},r);return\\\"string\\\"==typeof t.proto&&(n.constructor={name:t.proto}),n}}}(j);var z={};!function(t){t.__esModule=!0;var r=\\\"@t\\\",e=/^#*@(t|r)$/,n=(0,eval)(\\\"this\\\"),a=\\\"function\\\"==typeof ArrayBuffer,o=\\\"function\\\"==typeof Map,i=\\\"function\\\"==typeof Set,u=[\\\"Int8Array\\\",\\\"Uint8Array\\\",\\\"Uint8ClampedArray\\\",\\\"Int16Array\\\",\\\"Uint16Array\\\",\\\"Int32Array\\\",\\\"Uint32Array\\\",\\\"Float32Array\\\",\\\"Float64Array\\\"],s=Array.prototype.slice,f={serialize:function(t){return JSON.stringify(t)},deserialize:function(t){return JSON.parse(t)}},c=function(){function t(t,r){this.references=t,this.transforms=r,this.transformsMap=this._makeTransformsMap(),this.circularCandidates=[],this.circularCandidatesDescrs=[],this.circularRefCount=0}return t._createRefMark=function(t){var r=Object.create(null);return r[\\\"@r\\\"]=t,r},t.prototype._createCircularCandidate=function(t,r,e){this.circularCandidates.push(t),this.circularCandidatesDescrs.push({parent:r,key:e,refIdx:-1})},t.prototype._applyTransform=function(t,e,n,a){var o=Object.create(null),i=a.toSerializable(t);return\\\"object\\\"==typeof i&&this._createCircularCandidate(t,e,n),o[r]=a.type,o.data=this._handleValue((function(){return i}),e,n),o},t.prototype._handleArray=function(t){for(var r=[],e=function(e){r[e]=n._handleValue((function(){return t[e]}),r,e)},n=this,a=0;a<t.length;a++)e(a);return r},t.prototype._handlePlainObject=function(t){var r,n,a=Object.create(null),o=function(r){if(Reflect.has(t,r)){var n=e.test(r)?\\\"#\\\"+r:r;a[n]=i._handleValue((function(){return t[r]}),a,n)}},i=this;for(var u in t)o(u);var s=null===(n=null===(r=null==t?void 0:t.__proto__)||void 0===r?void 0:r.constructor)||void 0===n?void 0:n.name;return s&&\\\"Object\\\"!==s&&(a.constructor={name:s}),a},t.prototype._handleObject=function(t,r,e){return this._createCircularCandidate(t,r,e),Array.isArray(t)?this._handleArray(t):this._handlePlainObject(t)},t.prototype._ensureCircularReference=function(r){var e=this.circularCandidates.indexOf(r);if(e>-1){var n=this.circularCandidatesDescrs[e];return-1===n.refIdx&&(n.refIdx=n.parent?++this.circularRefCount:0),t._createRefMark(n.refIdx)}return null},t.prototype._handleValue=function(t,r,e){try{var n=t(),a=typeof n,o=\\\"object\\\"===a&&null!==n;if(o){var i=this._ensureCircularReference(n);if(i)return i}var u=this._findTransform(a,n);return u?this._applyTransform(n,r,e,u):o?this._handleObject(n,r,e):n}catch(t){try{return this._handleValue((function(){return t instanceof Error?t:new Error(t)}),r,e)}catch(t){return null}}},t.prototype._makeTransformsMap=function(){if(o){var t=new Map;return this.transforms.forEach((function(r){r.lookup&&t.set(r.lookup,r)})),t}},t.prototype._findTransform=function(t,r){if(o&&r&&r.constructor&&(null==(a=this.transformsMap.get(r.constructor))?void 0:a.shouldTransform(t,r)))return a;for(var e=0,n=this.transforms;e<n.length;e++){var a;if((a=n[e]).shouldTransform(t,r))return a}},t.prototype.transform=function(){for(var r=this,e=[this._handleValue((function(){return r.references}),null,null)],n=0,a=this.circularCandidatesDescrs;n<a.length;n++){var o=a[n];o.refIdx>0&&(e[o.refIdx]=o.parent[o.key],o.parent[o.key]=t._createRefMark(o.refIdx))}return e},t}(),l=function(){function t(t,r){this.activeTransformsStack=[],this.visitedRefs=Object.create(null),this.references=t,this.transformMap=r}return t.prototype._handlePlainObject=function(t){var r=Object.create(null);for(var n in\\\"constructor\\\"in t&&(t.constructor&&\\\"string\\\"==typeof t.constructor.name||(t.constructor={name:\\\"Object\\\"})),t)t.hasOwnProperty(n)&&(this._handleValue(t[n],t,n),e.test(n)&&(r[n.substring(1)]=t[n],delete t[n]));for(var a in r)t[a]=r[a]},t.prototype._handleTransformedObject=function(t,e,n){var a=t[r],o=this.transformMap[a];if(!o)throw new Error(\\\"Can't find transform for \\\\\\\"\\\"+a+'\\\" type.');this.activeTransformsStack.push(t),this._handleValue(t.data,t,\\\"data\\\"),this.activeTransformsStack.pop(),e[n]=o.fromSerializable(t.data)},t.prototype._handleCircularSelfRefDuringTransform=function(t,r,e){var n=this.references;Object.defineProperty(r,e,{val:void 0,configurable:!0,enumerable:!0,get:function(){return void 0===this.val&&(this.val=n[t]),this.val},set:function(t){this.val=t}})},t.prototype._handleCircularRef=function(t,r,e){this.activeTransformsStack.includes(this.references[t])?this._handleCircularSelfRefDuringTransform(t,r,e):(this.visitedRefs[t]||(this.visitedRefs[t]=!0,this._handleValue(this.references[t],this.references,t)),r[e]=this.references[t])},t.prototype._handleValue=function(t,e,n){if(\\\"object\\\"==typeof t&&null!==t){var a=t[\\\"@r\\\"];if(void 0!==a)this._handleCircularRef(a,e,n);else if(t[r])this._handleTransformedObject(t,e,n);else if(Array.isArray(t))for(var o=0;o<t.length;o++)this._handleValue(t[o],t,o);else this._handlePlainObject(t)}},t.prototype.transform=function(){return this.visitedRefs[0]=!0,this._handleValue(this.references[0],this.references,0),this.references[0]},t}(),d=[{type:\\\"[[NaN]]\\\",shouldTransform:function(t,r){return\\\"number\\\"===t&&isNaN(r)},toSerializable:function(){return\\\"\\\"},fromSerializable:function(){return NaN}},{type:\\\"[[undefined]]\\\",shouldTransform:function(t){return\\\"undefined\\\"===t},toSerializable:function(){return\\\"\\\"},fromSerializable:function(){}},{type:\\\"[[Date]]\\\",lookup:Date,shouldTransform:function(t,r){return r instanceof Date},toSerializable:function(t){return t.getTime()},fromSerializable:function(t){var r=new Date;return r.setTime(t),r}},{type:\\\"[[RegExp]]\\\",lookup:RegExp,shouldTransform:function(t,r){return r instanceof RegExp},toSerializable:function(t){var r={src:t.source,flags:\\\"\\\"};return t.globalThis&&(r.flags+=\\\"g\\\"),t.ignoreCase&&(r.flags+=\\\"i\\\"),t.multiline&&(r.flags+=\\\"m\\\"),r},fromSerializable:function(t){return new RegExp(t.src,t.flags)}},{type:\\\"[[Error]]\\\",lookup:Error,shouldTransform:function(t,r){return r instanceof Error},toSerializable:function(t){var r,e;return t.stack||null===(e=(r=Error).captureStackTrace)||void 0===e||e.call(r,t),{name:t.name,message:t.message,stack:t.stack}},fromSerializable:function(t){var r=new(n[t.name]||Error)(t.message);return r.stack=t.stack,r}},{type:\\\"[[ArrayBuffer]]\\\",lookup:a&&ArrayBuffer,shouldTransform:function(t,r){return a&&r instanceof ArrayBuffer},toSerializable:function(t){var r=new Int8Array(t);return s.call(r)},fromSerializable:function(t){if(a){var r=new ArrayBuffer(t.length);return new Int8Array(r).set(t),r}return t}},{type:\\\"[[TypedArray]]\\\",shouldTransform:function(t,r){if(a)return ArrayBuffer.isView(r)&&!(r instanceof DataView);for(var e=0,o=u;e<o.length;e++){var i=o[e];if(\\\"function\\\"==typeof n[i]&&r instanceof n[i])return!0}return!1},toSerializable:function(t){return{ctorName:t.constructor.name,arr:s.call(t)}},fromSerializable:function(t){return\\\"function\\\"==typeof n[t.ctorName]?new n[t.ctorName](t.arr):t.arr}},{type:\\\"[[Map]]\\\",lookup:o&&Map,shouldTransform:function(t,r){return o&&r instanceof Map},toSerializable:function(t){var r=[];return t.forEach((function(t,e){r.push(e),r.push(t)})),r},fromSerializable:function(t){if(o){for(var r=new Map,e=0;e<t.length;e+=2)r.set(t[e],t[e+1]);return r}for(var n=[],a=0;a<t.length;a+=2)n.push([t[e],t[e+1]]);return n}},{type:\\\"[[Set]]\\\",lookup:i&&Set,shouldTransform:function(t,r){return i&&r instanceof Set},toSerializable:function(t){var r=[];return t.forEach((function(t){r.push(t)})),r},fromSerializable:function(t){if(i){for(var r=new Set,e=0;e<t.length;e++)r.add(t[e]);return r}return t}}],p=function(){function t(t){this.transforms=[],this.transformsMap=Object.create(null),this.serializer=t||f,this.addTransforms(d)}return t.prototype.addTransforms=function(t){for(var r=0,e=t=Array.isArray(t)?t:[t];r<e.length;r++){var n=e[r];if(this.transformsMap[n.type])throw new Error('Transform with type \\\"'+n.type+'\\\" was already added.');this.transforms.push(n),this.transformsMap[n.type]=n}return this},t.prototype.removeTransforms=function(t){for(var r=0,e=t=Array.isArray(t)?t:[t];r<e.length;r++){var n=e[r],a=this.transforms.indexOf(n);a>-1&&this.transforms.splice(a,1),delete this.transformsMap[n.type]}return this},t.prototype.encode=function(t){var r=new c(t,this.transforms).transform();return this.serializer.serialize(r)},t.prototype.decode=function(t){var r=this.serializer.deserialize(t);return new l(r,this.transformsMap).transform()},t}();t.default=p}(z);var E=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};S.__esModule=!0,S.Decode=P=S.Encode=void 0;var k=E(O),C=E(w),D=E(A),I=E(j),N=E(z),R=[D.default,C.default,k.default,I.default],x=new N.default;x.addTransforms(R);var P=S.Encode=function(t){return JSON.parse(x.encode(t))};S.Decode=function(t){return x.decode(JSON.stringify(t))},function(r){var e=t&&t.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};r.__esModule=!0;var a=e(n),i=e(o),u=S;r.default=function(t,r,e){void 0===e&&(e=!0);for(var n=t,o={pointers:{},src:{npm:\\\"https://npmjs.com/package/console-feed\\\",github:\\\"https://github.com/samdenty99/console-feed\\\"}},s=function(t){var a=n[t];n[t]=function(){a.apply(this,arguments);var n=[].slice.call(arguments);setTimeout((function(){var a=i.default(t,n);if(a){var o=a;e&&(o=u.Encode(a)),r(o,a)}}))},o.pointers[t]=a},f=0,c=a.default;f<c.length;f++)s(c[f]);return n.feed=o,n}}(e),r(e)(window.console,(function(t){var r=P(t);parent.postMessage({type:\\\"console\\\",codesandbox:!0,log:Array.isArray(r)?r[0]:r,channelId:scope.channelId},\\\"*\\\")}));\\n\";\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index-599aeaf7.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/index-599aeaf7.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandpackStatic: () => (/* binding */ SandpackStatic)\n/* harmony export */ });\n/* harmony import */ var _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-52664384.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var static_browser_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! static-browser-server */ \"(ssr)/./node_modules/static-browser-server/out/lib/main.js\");\n/* harmony import */ var _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./consoleHook-59e792cb.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/consoleHook-59e792cb.mjs\");\n/* harmony import */ var _base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./base-80a1f760.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/base-80a1f760.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n\n\n\n\n\n\n\nvar insertHtmlAfterRegex = function (regex, content, insertable) {\n    var match = regex.exec(content);\n    if (match && match.length >= 1) {\n        var offset = match.index + match[0].length;\n        var prefix = content.substring(0, offset);\n        var suffix = content.substring(offset);\n        return prefix + insertable + suffix;\n    }\n};\nvar readBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    else {\n        return new TextDecoder().decode(content);\n    }\n};\nvar validateHtml = function (content) {\n    // Make it a string\n    var contentString = readBuffer(content);\n    var domParser = new DOMParser();\n    var doc = domParser.parseFromString(contentString, \"text/html\");\n    if (!doc.documentElement.getAttribute(\"lang\")) {\n        doc.documentElement.setAttribute(\"lang\", \"en\");\n    }\n    var html = doc.documentElement.outerHTML;\n    return \"<!DOCTYPE html>\\n\".concat(html);\n};\n\nvar SandpackStatic = /** @class */ (function (_super) {\n    (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(SandpackStatic, _super);\n    function SandpackStatic(selector, sandboxSetup, options) {\n        if (options === void 0) { options = {}; }\n        var _a;\n        var _this = _super.call(this, selector, sandboxSetup, options) || this;\n        _this.files = new Map();\n        _this.status = \"initializing\";\n        _this.emitter = new _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.E();\n        _this.previewController = new static_browser_server__WEBPACK_IMPORTED_MODULE_0__.PreviewController({\n            baseUrl: (_a = options.bundlerURL) !== null && _a !== void 0 ? _a : \"https://preview.sandpack-static-server.codesandbox.io\",\n            // filepath is always normalized to start with / and not end with a slash\n            getFileContent: function (filepath) {\n                var content = _this.files.get(filepath);\n                if (!content) {\n                    throw new Error(\"File not found\");\n                }\n                if (filepath.endsWith(\".html\") || filepath.endsWith(\".htm\")) {\n                    try {\n                        content = validateHtml(content);\n                        content = _this.injectProtocolScript(content);\n                        content = _this.injectExternalResources(content, options.externalResources);\n                        content = _this.injectScriptIntoHead(content, {\n                            script: _consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.c,\n                            scope: { channelId: (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.g)() },\n                        });\n                    }\n                    catch (err) {\n                        console.error(\"Runtime injection failed\", err);\n                    }\n                }\n                return content;\n            },\n        });\n        if (typeof selector === \"string\") {\n            _this.selector = selector;\n            var element = document.querySelector(selector);\n            _this.element = element;\n            _this.iframe = document.createElement(\"iframe\");\n        }\n        else {\n            _this.element = selector;\n            _this.iframe = selector;\n        }\n        if (!_this.iframe.getAttribute(\"sandbox\")) {\n            _this.iframe.setAttribute(\"sandbox\", \"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts allow-downloads allow-pointer-lock\");\n            _this.iframe.setAttribute(\"allow\", \"accelerometer; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; clipboard-read; clipboard-write; xr-spatial-tracking;\");\n        }\n        _this.eventListener = _this.eventListener.bind(_this);\n        if (typeof window !== \"undefined\") {\n            window.addEventListener(\"message\", _this.eventListener);\n        }\n        // Dispatch very first compile action\n        _this.updateSandbox();\n        return _this;\n    }\n    SandpackStatic.prototype.injectContentIntoHead = function (content, contentToInsert) {\n        var _a;\n        // Make it a string\n        content = readBuffer(content);\n        // Inject script\n        content =\n            (_a = insertHtmlAfterRegex(/<head[^<>]*>/g, content, \"\\n\" + contentToInsert)) !== null && _a !== void 0 ? _a : contentToInsert + \"\\n\" + content;\n        return content;\n    };\n    SandpackStatic.prototype.injectProtocolScript = function (content) {\n        var scriptToInsert = \"<script>\\n  window.addEventListener(\\\"message\\\", (message) => {\\n    if(message.data.type === \\\"refresh\\\") {\\n      window.location.reload();\\n    }\\n  })\\n</script>\";\n        return this.injectContentIntoHead(content, scriptToInsert);\n    };\n    SandpackStatic.prototype.injectExternalResources = function (content, externalResources) {\n        if (externalResources === void 0) { externalResources = []; }\n        var tagsToInsert = externalResources\n            .map(function (resource) {\n            var match = resource.match(/\\.([^.]*)$/);\n            var fileType = match === null || match === void 0 ? void 0 : match[1];\n            if (fileType === \"css\" || resource.includes(\"fonts.googleapis\")) {\n                return \"<link rel=\\\"stylesheet\\\" href=\\\"\".concat(resource, \"\\\">\");\n            }\n            if (fileType === \"js\") {\n                return \"<script src=\\\"\".concat(resource, \"\\\"></script>\");\n            }\n            throw new Error(\"Unable to determine file type for external resource: \".concat(resource));\n        })\n            .join(\"\\n\");\n        return this.injectContentIntoHead(content, tagsToInsert);\n    };\n    SandpackStatic.prototype.injectScriptIntoHead = function (content, opts) {\n        var script = opts.script, _a = opts.scope, scope = _a === void 0 ? {} : _a;\n        var scriptToInsert = \"\\n    <script>\\n      const scope = \".concat(JSON.stringify(scope), \";\\n      \").concat(script, \"\\n    </script>\\n    \").trim();\n        return this.injectContentIntoHead(content, scriptToInsert);\n    };\n    SandpackStatic.prototype.updateSandbox = function (setup, _isInitializationCompile) {\n        if (setup === void 0) { setup = this.sandboxSetup; }\n        var modules = (0,_consoleHook_59e792cb_mjs__WEBPACK_IMPORTED_MODULE_4__.f)(setup.files);\n        /**\n         * Pass init files to the bundler\n         */\n        this.dispatch({\n            codesandbox: true,\n            modules: modules,\n            template: setup.template,\n            type: \"compile\",\n        });\n    };\n    SandpackStatic.prototype.compile = function (files) {\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__._)(this, void 0, void 0, function () {\n            var previewUrl;\n            return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.files = new Map(Object.entries(files));\n                        return [4 /*yield*/, this.previewController.initPreview()];\n                    case 1:\n                        previewUrl = _a.sent();\n                        this.iframe.setAttribute(\"src\", previewUrl);\n                        this.status = \"done\";\n                        this.dispatch({ type: \"done\", compilatonError: false });\n                        this.dispatch({\n                            type: \"urlchange\",\n                            url: previewUrl,\n                            back: false,\n                            forward: false,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Handles message windows coming from iframes\n    SandpackStatic.prototype.eventListener = function (evt) {\n        // skip events originating from different iframes\n        if (evt.source !== this.iframe.contentWindow) {\n            return;\n        }\n        var message = evt.data;\n        if (!message.codesandbox) {\n            return;\n        }\n        this.dispatch(message);\n    };\n    /**\n     * Bundler communication\n     */\n    SandpackStatic.prototype.dispatch = function (message) {\n        var _a;\n        switch (message.type) {\n            case \"compile\":\n                this.compile(message.modules);\n                break;\n            default:\n                (_a = this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, \"*\");\n                this.emitter.dispatch(message);\n        }\n    };\n    SandpackStatic.prototype.listen = function (listener) {\n        return this.emitter.listener(listener);\n    };\n    SandpackStatic.prototype.destroy = function () {\n        this.emitter.cleanup();\n        if (typeof window !== \"undefined\") {\n            window.removeEventListener(\"message\", this.eventListener);\n        }\n    };\n    return SandpackStatic;\n}(_base_80a1f760_mjs__WEBPACK_IMPORTED_MODULE_5__.S));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index-599aeaf7.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SandpackLogLevel: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   addPackageJSONIfNeeded: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   createError: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createPackageJSON: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   extractErrorDetails: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   loadSandpackClient: () => (/* binding */ loadSandpackClient),\n/* harmony export */   normalizePath: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   nullthrows: () => (/* reexport safe */ _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.n)\n/* harmony export */ });\n/* harmony import */ var _utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-52664384.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n\n\n\n\nfunction loadSandpackClient(iframeSelector, sandboxSetup, options) {\n    var _a;\n    if (options === void 0) { options = {}; }\n    return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__._)(this, void 0, void 0, function () {\n        var template, Client, _b;\n        return (0,_utils_52664384_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    template = (_a = sandboxSetup.template) !== null && _a !== void 0 ? _a : \"parcel\";\n                    _b = template;\n                    switch (_b) {\n                        case \"node\": return [3 /*break*/, 1];\n                        case \"static\": return [3 /*break*/, 3];\n                    }\n                    return [3 /*break*/, 5];\n                case 1: return [4 /*yield*/, __webpack_require__.e(/*! import() */ \"vendor-chunks/@codesandbox\").then(__webpack_require__.bind(__webpack_require__, /*! ./clients/node/index.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/node/index.mjs\")).then(function (m) { return m.SandpackNode; })];\n                case 2:\n                    Client = _c.sent();\n                    return [3 /*break*/, 7];\n                case 3: return [4 /*yield*/, Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@codesandbox\"), __webpack_require__.e(\"vendor-chunks/static-browser-server\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./index-599aeaf7.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index-599aeaf7.mjs\")).then(function (m) { return m.SandpackStatic; })];\n                case 4:\n                    Client = _c.sent();\n                    return [3 /*break*/, 7];\n                case 5: return [4 /*yield*/, __webpack_require__.e(/*! import() */ \"vendor-chunks/@codesandbox\").then(__webpack_require__.bind(__webpack_require__, /*! ./clients/runtime/index.mjs */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/clients/runtime/index.mjs\")).then(function (m) { return m.SandpackRuntime; })];\n                case 6:\n                    Client = _c.sent();\n                    _c.label = 7;\n                case 7: return [2 /*return*/, new Client(iframeSelector, sandboxSetup, options)];\n            }\n        });\n    });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXdFO0FBQzJIO0FBQy9LOztBQUVwQjtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLFdBQVcsc0RBQVM7QUFDcEI7QUFDQSxlQUFlLHNEQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qyx3T0FBa0MscUJBQXFCLHdCQUF3QjtBQUM1SDtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsNFNBQThCLHFCQUFxQiwwQkFBMEI7QUFDMUg7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDhPQUFxQyxxQkFBcUIsMkJBQTJCO0FBQ2xJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMOztBQUU4QiIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9ub2RlX21vZHVsZXMvQGNvZGVzYW5kYm94L3NhbmRwYWNrLWNsaWVudC9kaXN0L2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfIGFzIF9fYXdhaXRlciwgYSBhcyBfX2dlbmVyYXRvciB9IGZyb20gJy4vdXRpbHMtNTI2NjQzODQubWpzJztcbmV4cG9ydCB7IFMgYXMgU2FuZHBhY2tMb2dMZXZlbCwgZCBhcyBhZGRQYWNrYWdlSlNPTklmTmVlZGVkLCBjIGFzIGNyZWF0ZUVycm9yLCBiIGFzIGNyZWF0ZVBhY2thZ2VKU09OLCBlIGFzIGV4dHJhY3RFcnJvckRldGFpbHMsIGYgYXMgbm9ybWFsaXplUGF0aCwgbiBhcyBudWxsdGhyb3dzIH0gZnJvbSAnLi91dGlscy01MjY2NDM4NC5tanMnO1xuaW1wb3J0ICdvdXR2YXJpYW50JztcblxuZnVuY3Rpb24gbG9hZFNhbmRwYWNrQ2xpZW50KGlmcmFtZVNlbGVjdG9yLCBzYW5kYm94U2V0dXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSwgQ2xpZW50LCBfYjtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPSAoX2EgPSBzYW5kYm94U2V0dXAudGVtcGxhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwicGFyY2VsXCI7XG4gICAgICAgICAgICAgICAgICAgIF9iID0gdGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub2RlXCI6IHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0YXRpY1wiOiByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIGltcG9ydCgnLi9jbGllbnRzL25vZGUvaW5kZXgubWpzJykudGhlbihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5TYW5kcGFja05vZGU7IH0pXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIENsaWVudCA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCBpbXBvcnQoJy4vaW5kZXgtNTk5YWVhZjcubWpzJykudGhlbihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5TYW5kcGFja1N0YXRpYzsgfSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgQ2xpZW50ID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCAvKnlpZWxkKi8sIGltcG9ydCgnLi9jbGllbnRzL3J1bnRpbWUvaW5kZXgubWpzJykudGhlbihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5TYW5kcGFja1J1bnRpbWU7IH0pXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIENsaWVudCA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSA3O1xuICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBDbGllbnQoaWZyYW1lU2VsZWN0b3IsIHNhbmRib3hTZXR1cCwgb3B0aW9ucyldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgbG9hZFNhbmRwYWNrQ2xpZW50IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ SandpackLogLevel),\n/* harmony export */   _: () => (/* binding */ __awaiter),\n/* harmony export */   a: () => (/* binding */ __generator),\n/* harmony export */   b: () => (/* binding */ createPackageJSON),\n/* harmony export */   c: () => (/* binding */ createError),\n/* harmony export */   d: () => (/* binding */ addPackageJSONIfNeeded),\n/* harmony export */   e: () => (/* binding */ extractErrorDetails),\n/* harmony export */   f: () => (/* binding */ normalizePath),\n/* harmony export */   g: () => (/* binding */ __extends),\n/* harmony export */   h: () => (/* binding */ __assign),\n/* harmony export */   i: () => (/* binding */ __spreadArray),\n/* harmony export */   n: () => (/* binding */ nullthrows)\n/* harmony export */ });\n/* harmony import */ var outvariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! outvariant */ \"(ssr)/./node_modules/outvariant/lib/index.mjs\");\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* globalThis Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nvar SandpackLogLevel;\n(function (SandpackLogLevel) {\n    SandpackLogLevel[SandpackLogLevel[\"None\"] = 0] = \"None\";\n    SandpackLogLevel[SandpackLogLevel[\"Error\"] = 10] = \"Error\";\n    SandpackLogLevel[SandpackLogLevel[\"Warning\"] = 20] = \"Warning\";\n    SandpackLogLevel[SandpackLogLevel[\"Info\"] = 30] = \"Info\";\n    SandpackLogLevel[SandpackLogLevel[\"Debug\"] = 40] = \"Debug\";\n})(SandpackLogLevel || (SandpackLogLevel = {}));\n\nvar createError = function (message) {\n    return \"[sandpack-client]: \".concat(message);\n};\nfunction nullthrows(value, err) {\n    if (err === void 0) { err = \"Value is nullish\"; }\n    (0,outvariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(value != null, createError(err));\n    return value;\n}\nvar DEPENDENCY_ERROR_MESSAGE = \"\\\"dependencies\\\" was not specified - provide either a package.json or a \\\"dependencies\\\" value\";\nvar ENTRY_ERROR_MESSAGE = \"\\\"entry\\\" was not specified - provide either a package.json with the \\\"main\\\" field or an \\\"entry\\\" value\";\nfunction createPackageJSON(dependencies, devDependencies, entry) {\n    if (dependencies === void 0) { dependencies = {}; }\n    if (devDependencies === void 0) { devDependencies = {}; }\n    if (entry === void 0) { entry = \"/index.js\"; }\n    return JSON.stringify({\n        name: \"sandpack-project\",\n        main: entry,\n        dependencies: dependencies,\n        devDependencies: devDependencies,\n    }, null, 2);\n}\nfunction addPackageJSONIfNeeded(files, dependencies, devDependencies, entry) {\n    var _a, _b;\n    var normalizedFilesPath = normalizePath(files);\n    var packageJsonFile = normalizedFilesPath[\"/package.json\"];\n    /**\n     * Create a new package json\n     */\n    if (!packageJsonFile) {\n        nullthrows(dependencies, DEPENDENCY_ERROR_MESSAGE);\n        nullthrows(entry, ENTRY_ERROR_MESSAGE);\n        normalizedFilesPath[\"/package.json\"] = {\n            code: createPackageJSON(dependencies, devDependencies, entry),\n        };\n        return normalizedFilesPath;\n    }\n    /**\n     * Merge package json with custom setup\n     */\n    if (packageJsonFile) {\n        var packageJsonContent = JSON.parse(packageJsonFile.code);\n        nullthrows(!(!dependencies && !packageJsonContent.dependencies), ENTRY_ERROR_MESSAGE);\n        if (dependencies) {\n            packageJsonContent.dependencies = __assign(__assign({}, ((_a = packageJsonContent.dependencies) !== null && _a !== void 0 ? _a : {})), (dependencies !== null && dependencies !== void 0 ? dependencies : {}));\n        }\n        if (devDependencies) {\n            packageJsonContent.devDependencies = __assign(__assign({}, ((_b = packageJsonContent.devDependencies) !== null && _b !== void 0 ? _b : {})), (devDependencies !== null && devDependencies !== void 0 ? devDependencies : {}));\n        }\n        if (entry) {\n            packageJsonContent.main = entry;\n        }\n        normalizedFilesPath[\"/package.json\"] = {\n            code: JSON.stringify(packageJsonContent, null, 2),\n        };\n    }\n    return normalizedFilesPath;\n}\nfunction extractErrorDetails(msg) {\n    var _a;\n    if (msg.title === \"SyntaxError\") {\n        var title = msg.title, path = msg.path, message = msg.message, line = msg.line, column = msg.column;\n        return { title: title, path: path, message: message, line: line, column: column };\n    }\n    var relevantStackFrame = getRelevantStackFrame((_a = msg.payload) === null || _a === void 0 ? void 0 : _a.frames);\n    if (!relevantStackFrame) {\n        return { message: msg.message };\n    }\n    var errorInCode = getErrorInOriginalCode(relevantStackFrame);\n    var errorLocation = getErrorLocation(relevantStackFrame);\n    var errorMessage = formatErrorMessage(relevantStackFrame._originalFileName, msg.message, errorLocation, errorInCode);\n    return {\n        message: errorMessage,\n        title: msg.title,\n        path: relevantStackFrame._originalFileName,\n        line: relevantStackFrame._originalLineNumber,\n        column: relevantStackFrame._originalColumnNumber,\n    };\n}\nfunction getRelevantStackFrame(frames) {\n    if (!frames) {\n        return;\n    }\n    return frames.find(function (frame) { return !!frame._originalFileName; });\n}\nfunction getErrorLocation(errorFrame) {\n    return errorFrame\n        ? \" (\".concat(errorFrame._originalLineNumber, \":\").concat(errorFrame._originalColumnNumber, \")\")\n        : \"\";\n}\nfunction getErrorInOriginalCode(errorFrame) {\n    var lastScriptLine = errorFrame._originalScriptCode[errorFrame._originalScriptCode.length - 1];\n    var numberOfLineNumberCharacters = lastScriptLine.lineNumber.toString().length;\n    var leadingCharacterOffset = 2;\n    var barSeparatorCharacterOffset = 3;\n    var extraLineLeadingSpaces = leadingCharacterOffset +\n        numberOfLineNumberCharacters +\n        barSeparatorCharacterOffset +\n        errorFrame._originalColumnNumber;\n    return errorFrame._originalScriptCode.reduce(function (result, scriptLine) {\n        var leadingChar = scriptLine.highlight ? \">\" : \" \";\n        var lineNumber = scriptLine.lineNumber.toString().length === numberOfLineNumberCharacters\n            ? \"\".concat(scriptLine.lineNumber)\n            : \" \".concat(scriptLine.lineNumber);\n        var extraLine = scriptLine.highlight\n            ? \"\\n\" + \" \".repeat(extraLineLeadingSpaces) + \"^\"\n            : \"\";\n        return (result + // accumulator\n            \"\\n\" +\n            leadingChar + // > or \" \"\n            \" \" +\n            lineNumber + // line number on equal number of characters\n            \" | \" +\n            scriptLine.content + // code\n            extraLine // line under the highlighed line to show the column index\n        );\n    }, \"\");\n}\nfunction formatErrorMessage(filePath, message, location, errorInCode) {\n    return \"\".concat(filePath, \": \").concat(message).concat(location, \"\\n\").concat(errorInCode);\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar normalizePath = function (path) {\n    if (typeof path === \"string\") {\n        return (path.startsWith(\"/\") ? path : \"/\".concat(path));\n    }\n    if (Array.isArray(path)) {\n        return path.map(function (p) { return (p.startsWith(\"/\") ? p : \"/\".concat(p)); });\n    }\n    if (typeof path === \"object\" && path !== null) {\n        return Object.entries(path).reduce(function (acc, _a) {\n            var key = _a[0], content = _a[1];\n            var fileName = key.startsWith(\"/\") ? key : \"/\".concat(key);\n            acc[fileName] = content;\n            return acc;\n        }, {});\n    }\n    return null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@codesandbox/sandpack-react/dist/index.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@codesandbox/sandpack-react/dist/index.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ANGULAR_TEMPLATE: () => (/* binding */ ANGULAR_TEMPLATE),\n/* harmony export */   ASTRO_TEMPLATE: () => (/* binding */ ASTRO_TEMPLATE),\n/* harmony export */   BackwardIcon: () => (/* binding */ BackwardIcon),\n/* harmony export */   CleanIcon: () => (/* binding */ CleanIcon),\n/* harmony export */   CloseIcon: () => (/* binding */ CloseIcon),\n/* harmony export */   CodeEditor: () => (/* binding */ CodeMirror),\n/* harmony export */   ConsoleIcon: () => (/* binding */ ConsoleIcon),\n/* harmony export */   DependenciesProgress: () => (/* binding */ DependenciesProgress),\n/* harmony export */   DirectoryIconClosed: () => (/* binding */ DirectoryIconClosed),\n/* harmony export */   DirectoryIconOpen: () => (/* binding */ DirectoryIconOpen),\n/* harmony export */   ErrorOverlay: () => (/* binding */ ErrorOverlay),\n/* harmony export */   ExportIcon: () => (/* binding */ ExportIcon),\n/* harmony export */   FADE_ANIMATION_DURATION: () => (/* binding */ FADE_ANIMATION_DURATION),\n/* harmony export */   FileIcon: () => (/* binding */ FileIcon),\n/* harmony export */   FileTabs: () => (/* binding */ FileTabs),\n/* harmony export */   ForwardIcon: () => (/* binding */ ForwardIcon),\n/* harmony export */   LoadingOverlay: () => (/* binding */ LoadingOverlay),\n/* harmony export */   Navigator: () => (/* binding */ Navigator),\n/* harmony export */   OpenInCodeSandboxButton: () => (/* binding */ OpenInCodeSandboxButton),\n/* harmony export */   REACT_TEMPLATE: () => (/* binding */ REACT_TEMPLATE),\n/* harmony export */   REACT_TYPESCRIPT_TEMPLATE: () => (/* binding */ REACT_TYPESCRIPT_TEMPLATE),\n/* harmony export */   RefreshIcon: () => (/* binding */ RefreshIcon),\n/* harmony export */   RestartIcon: () => (/* binding */ RestartIcon),\n/* harmony export */   RoundedButton: () => (/* binding */ RoundedButton),\n/* harmony export */   RunButton: () => (/* binding */ RunButton$1),\n/* harmony export */   RunIcon: () => (/* binding */ RunIcon),\n/* harmony export */   SANDBOX_TEMPLATES: () => (/* binding */ SANDBOX_TEMPLATES),\n/* harmony export */   SANDPACK_THEMES: () => (/* binding */ SANDPACK_THEMES),\n/* harmony export */   SOLID_TEMPLATE: () => (/* binding */ SOLID_TEMPLATE),\n/* harmony export */   SVELTE_TEMPLATE: () => (/* binding */ SVELTE_TEMPLATE),\n/* harmony export */   Sandpack: () => (/* binding */ Sandpack),\n/* harmony export */   SandpackCodeEditor: () => (/* binding */ SandpackCodeEditor),\n/* harmony export */   SandpackCodeViewer: () => (/* binding */ SandpackCodeViewer),\n/* harmony export */   SandpackConsole: () => (/* binding */ SandpackConsole),\n/* harmony export */   SandpackConsumer: () => (/* binding */ SandpackConsumer),\n/* harmony export */   SandpackFileExplorer: () => (/* binding */ SandpackFileExplorer),\n/* harmony export */   SandpackLayout: () => (/* binding */ SandpackLayout),\n/* harmony export */   SandpackPreview: () => (/* binding */ SandpackPreview),\n/* harmony export */   SandpackProvider: () => (/* binding */ SandpackProvider),\n/* harmony export */   SandpackReactContext: () => (/* binding */ Sandpack$1),\n/* harmony export */   SandpackStack: () => (/* binding */ SandpackStack),\n/* harmony export */   SandpackTests: () => (/* binding */ SandpackTests),\n/* harmony export */   SandpackThemeConsumer: () => (/* binding */ SandpackThemeConsumer),\n/* harmony export */   SandpackThemeContext: () => (/* binding */ SandpackThemeContext),\n/* harmony export */   SandpackThemeProvider: () => (/* binding */ SandpackThemeProvider),\n/* harmony export */   SandpackTranspiledCode: () => (/* binding */ SandpackTranspiledCode),\n/* harmony export */   SignInIcon: () => (/* binding */ SignInIcon),\n/* harmony export */   SignOutIcon: () => (/* binding */ SignOutIcon),\n/* harmony export */   TEST_TYPESCRIPT_TEMPLATE: () => (/* binding */ TEST_TYPESCRIPT_TEMPLATE),\n/* harmony export */   UnstyledOpenInCodeSandboxButton: () => (/* binding */ UnstyledOpenInCodeSandboxButton),\n/* harmony export */   VANILLA_TEMPLATE: () => (/* binding */ VANILLA_TEMPLATE),\n/* harmony export */   VANILLA_TYPESCRIPT_TEMPLATE: () => (/* binding */ VANILLA_TYPESCRIPT_TEMPLATE),\n/* harmony export */   VUE_TEMPLATE: () => (/* binding */ VUE_TEMPLATE),\n/* harmony export */   defaultDark: () => (/* binding */ defaultDark),\n/* harmony export */   defaultLight: () => (/* binding */ defaultLight),\n/* harmony export */   getSandpackCssText: () => (/* binding */ getCssText),\n/* harmony export */   layoutClassName: () => (/* binding */ layoutClassName),\n/* harmony export */   stackClassName: () => (/* binding */ stackClassName),\n/* harmony export */   tabButton: () => (/* binding */ tabButton),\n/* harmony export */   useActiveCode: () => (/* binding */ useActiveCode),\n/* harmony export */   useClassNames: () => (/* binding */ useClassNames),\n/* harmony export */   useErrorMessage: () => (/* binding */ useErrorMessage),\n/* harmony export */   useLoadingOverlayState: () => (/* binding */ useLoadingOverlayState),\n/* harmony export */   useSandpack: () => (/* binding */ useSandpack),\n/* harmony export */   useSandpackClient: () => (/* binding */ useSandpackClient),\n/* harmony export */   useSandpackConsole: () => (/* binding */ useSandpackConsole),\n/* harmony export */   useSandpackNavigation: () => (/* binding */ useSandpackNavigation),\n/* harmony export */   useSandpackPreviewProgress: () => (/* binding */ useSandpackPreviewProgress),\n/* harmony export */   useSandpackShell: () => (/* binding */ useSandpackShell),\n/* harmony export */   useSandpackShellStdout: () => (/* binding */ useSandpackShellStdout),\n/* harmony export */   useSandpackTheme: () => (/* binding */ useSandpackTheme),\n/* harmony export */   useTranspiledCode: () => (/* binding */ useTranspiledCode)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _stitches_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @stitches/core */ \"(ssr)/./node_modules/@stitches/core/dist/index.mjs\");\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dequal */ \"(ssr)/./node_modules/dequal/dist/index.mjs\");\n/* harmony import */ var _codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @codesandbox/sandpack-client */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/utils-52664384.mjs\");\n/* harmony import */ var _codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @codesandbox/sandpack-client */ \"(ssr)/./node_modules/@codesandbox/sandpack-client/dist/index.mjs\");\n/* harmony import */ var _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @codemirror/autocomplete */ \"(ssr)/./node_modules/@codemirror/autocomplete/dist/index.js\");\n/* harmony import */ var _codemirror_commands__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @codemirror/commands */ \"(ssr)/./node_modules/@codemirror/commands/dist/index.js\");\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @codemirror/language */ \"(ssr)/./node_modules/@codemirror/language/dist/index.js\");\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @codemirror/state */ \"(ssr)/./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @codemirror/view */ \"(ssr)/./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _react_hook_intersection_observer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @react-hook/intersection-observer */ \"(ssr)/./node_modules/@react-hook/intersection-observer/dist/esm/index.mjs\");\n/* harmony import */ var _codemirror_lang_css__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @codemirror/lang-css */ \"(ssr)/./node_modules/@codemirror/lang-css/dist/index.js\");\n/* harmony import */ var _codemirror_lang_html__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @codemirror/lang-html */ \"(ssr)/./node_modules/@codemirror/lang-html/dist/index.js\");\n/* harmony import */ var _codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @codemirror/lang-javascript */ \"(ssr)/./node_modules/@codemirror/lang-javascript/dist/index.js\");\n/* harmony import */ var _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lezer/highlight */ \"(ssr)/./node_modules/@lezer/highlight/dist/index.js\");\n/* harmony import */ var anser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! anser */ \"(ssr)/./node_modules/anser/lib/index.js\");\n/* harmony import */ var escape_carriage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! escape-carriage */ \"(ssr)/./node_modules/escape-carriage/index.js\");\n/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lz-string */ \"(ssr)/./node_modules/lz-string/libs/lz-string.js\");\n/* harmony import */ var clean_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! clean-set */ \"(ssr)/./node_modules/clean-set/dist/clean-set.es.js\");\n/* __next_internal_client_entry_do_not_use__ ANGULAR_TEMPLATE,ASTRO_TEMPLATE,BackwardIcon,CleanIcon,CloseIcon,CodeEditor,ConsoleIcon,DependenciesProgress,DirectoryIconClosed,DirectoryIconOpen,ErrorOverlay,ExportIcon,FADE_ANIMATION_DURATION,FileIcon,FileTabs,ForwardIcon,LoadingOverlay,Navigator,OpenInCodeSandboxButton,REACT_TEMPLATE,REACT_TYPESCRIPT_TEMPLATE,RefreshIcon,RestartIcon,RoundedButton,RunButton,RunIcon,SANDBOX_TEMPLATES,SANDPACK_THEMES,SOLID_TEMPLATE,SVELTE_TEMPLATE,Sandpack,SandpackCodeEditor,SandpackCodeViewer,SandpackConsole,SandpackConsumer,SandpackFileExplorer,SandpackLayout,SandpackPreview,SandpackProvider,SandpackReactContext,SandpackStack,SandpackTests,SandpackThemeConsumer,SandpackThemeContext,SandpackThemeProvider,SandpackTranspiledCode,SignInIcon,SignOutIcon,TEST_TYPESCRIPT_TEMPLATE,UnstyledOpenInCodeSandboxButton,VANILLA_TEMPLATE,VANILLA_TYPESCRIPT_TEMPLATE,VUE_TEMPLATE,defaultDark,defaultLight,getSandpackCssText,layoutClassName,stackClassName,tabButton,useActiveCode,useClassNames,useErrorMessage,useLoadingOverlayState,useSandpack,useSandpackClient,useSandpackConsole,useSandpackNavigation,useSandpackPreviewProgress,useSandpackShell,useSandpackShellStdout,useSandpackTheme,useTranspiledCode auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nvar SVG = function(props) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", __assign({\n        fill: \"currentColor\",\n        height: \"16\",\n        viewBox: \"0 0 16 16\",\n        width: \"16\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, props));\n};\nvar SignInIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        viewBox: \"0 0 48 48\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Sign in\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M9 42q-1.2 0-2.1-.9Q6 40.2 6 39V9q0-1.2.9-2.1Q7.8 6 9 6h14.55v3H9v30h14.55v3Zm24.3-9.25-2.15-2.15 5.1-5.1h-17.5v-3h17.4l-5.1-5.1 2.15-2.15 8.8 8.8Z\"\n            })\n        ]\n    });\n};\nvar SignOutIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        viewBox: \"0 0 48 48\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Sign out\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M9 42q-1.2 0-2.1-.9Q6 40.2 6 39V9q0-1.2.9-2.1Q7.8 6 9 6h14.55v3H9v30h14.55v3Zm24.3-9.25-2.15-2.15 5.1-5.1h-17.5v-3h17.4l-5.1-5.1 2.15-2.15 8.8 8.8Z\"\n            })\n        ]\n    });\n};\nvar RestartIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        fill: \"none\",\n        stroke: \"currentColor\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Restart script\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M8 2C4.68629 2 2 4.68629 2 8C2 10.0946 3.07333 11.9385 4.7 13.0118\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M14.0005 7.9998C14.0005 5.82095 12.8391 3.91335 11.1016 2.8623\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M14.0003 2.3335H11.167C10.8908 2.3335 10.667 2.55735 10.667 2.8335V5.66683\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M1.99967 13.6665L4.83301 13.6665C5.10915 13.6665 5.33301 13.4426 5.33301 13.1665L5.33301 10.3332\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M10 10L12 12L10 14\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M14.667 14L12.667 14\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\"\n            })\n        ]\n    });\n};\nvar RunIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Run sandbox\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M11.0792 8.1078C11.2793 8.25007 11.27 8.55012 11.0616 8.67981L6.02535 11.8135C5.79638 11.956 5.5 11.7913 5.5 11.5216L5.5 8.40703L5.5 4.80661C5.5 4.52735 5.81537 4.36463 6.04296 4.52647L11.0792 8.1078Z\"\n            })\n        ]\n    });\n};\nvar BackwardIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Click to go back\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M9.64645 12.3536C9.84171 12.5488 10.1583 12.5488 10.3536 12.3536C10.5488 12.1583 10.5488 11.8417 10.3536 11.6464L9.64645 12.3536ZM10.3536 4.35355C10.5488 4.15829 10.5488 3.84171 10.3536 3.64644C10.1583 3.45118 9.84171 3.45118 9.64645 3.64644L10.3536 4.35355ZM6.07072 7.92929L5.71716 7.57573L6.07072 7.92929ZM10.3536 11.6464L6.42427 7.71716L5.71716 8.42426L9.64645 12.3536L10.3536 11.6464ZM6.42427 8.28284L10.3536 4.35355L9.64645 3.64644L5.71716 7.57573L6.42427 8.28284ZM6.42427 7.71716C6.58048 7.87337 6.58048 8.12663 6.42427 8.28284L5.71716 7.57573C5.48285 7.81005 5.48285 8.18995 5.71716 8.42426L6.42427 7.71716Z\"\n            })\n        ]\n    });\n};\nvar ForwardIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Click to go forward\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M6.35355 3.64645C6.15829 3.45118 5.84171 3.45118 5.64645 3.64645C5.45118 3.84171 5.45118 4.15829 5.64645 4.35355L6.35355 3.64645ZM5.64645 11.6464C5.45118 11.8417 5.45118 12.1583 5.64645 12.3536C5.84171 12.5488 6.15829 12.5488 6.35355 12.3536L5.64645 11.6464ZM9.92929 8.07071L10.2828 8.42426L9.92929 8.07071ZM5.64645 4.35355L9.57574 8.28284L10.2828 7.57574L6.35355 3.64645L5.64645 4.35355ZM9.57574 7.71716L5.64645 11.6464L6.35355 12.3536L10.2828 8.42426L9.57574 7.71716ZM9.57574 8.28284C9.41952 8.12663 9.41953 7.87337 9.57574 7.71716L10.2828 8.42426C10.5172 8.18995 10.5172 7.81005 10.2828 7.57574L9.57574 8.28284Z\"\n            })\n        ]\n    });\n};\nvar RefreshIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Refresh preview\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                clipRule: \"evenodd\",\n                d: \"M3.83325 7.99992C3.83325 5.69867 5.69853 3.83325 7.99934 3.83325C9.81246 3.83325 11.3563 4.99195 11.9285 6.61097C11.9396 6.6425 11.9536 6.67221 11.97 6.69992H8.80005C8.52391 6.69992 8.30005 6.92378 8.30005 7.19992C8.30005 7.47606 8.52391 7.69992 8.80005 7.69992H12.5667C12.8981 7.69992 13.1667 7.43129 13.1667 7.09992V3.33325C13.1667 3.05711 12.9429 2.83325 12.6667 2.83325C12.3906 2.83325 12.1667 3.05711 12.1667 3.33325V4.94608C11.2268 3.66522 9.7106 2.83325 7.99934 2.83325C5.14613 2.83325 2.83325 5.14651 2.83325 7.99992C2.83325 10.8533 5.14613 13.1666 7.99934 13.1666C9.91218 13.1666 11.5815 12.1266 12.474 10.5836C12.6123 10.3446 12.5306 10.0387 12.2915 9.90044C12.0525 9.76218 11.7466 9.84387 11.6084 10.0829C10.8873 11.3296 9.54072 12.1666 7.99934 12.1666C5.69853 12.1666 3.83325 10.3012 3.83325 7.99992Z\",\n                fillRule: \"evenodd\"\n            })\n        ]\n    });\n};\nvar CleanIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        fill: \"none\",\n        stroke: \"currentColor\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Clean\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"circle\", {\n                cx: \"7.99998\",\n                cy: \"8.00004\",\n                r: \"4.66667\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M4.66669 4.66663L11.3334 11.3333\"\n            })\n        ]\n    });\n};\nvar ExportIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        fill: \"none\",\n        stroke: \"currentColor\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Open on CodeSandbox\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M6.66665 3.33337H4.33331C3.78103 3.33337 3.33331 3.78109 3.33331 4.33337V11.6667C3.33331 12.219 3.78103 12.6667 4.33331 12.6667H11.6666C12.2189 12.6667 12.6666 12.219 12.6666 11.6667V9.33337\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M10 3.33337H12.5667C12.6219 3.33337 12.6667 3.37815 12.6667 3.43337V6.00004\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M7.33331 8.66668L12.5333 3.46667\",\n                strokeLinecap: \"round\"\n            })\n        ]\n    });\n};\nvar DirectoryIconOpen = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Directory\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M12.5526 12.6667H3.66675C3.2922 12.6667 2.96575 12.4608 2.79442 12.156L3.81072 8.0908C3.92201 7.64563 4.32199 7.33333 4.78086 7.33333H13.386C14.0365 7.33333 14.5139 7.94472 14.3561 8.57587L13.5228 11.9092C13.4115 12.3544 13.0115 12.6667 12.5526 12.6667Z\",\n                fill: \"currentColor\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M13.3334 6.63333V6.33333C13.3334 5.78105 12.8857 5.33333 12.3334 5.33333H8.30286C8.10543 5.33333 7.91242 5.2749 7.74816 5.16538L6.25201 4.16795C6.08774 4.05844 5.89473 4 5.69731 4H3.66675C3.11446 4 2.66675 4.44772 2.66675 5L2.66675 11.6667C2.66675 12.219 3.11446 12.6667 3.66675 12.6667H12.5526C13.0115 12.6667 13.4115 12.3544 13.5228 11.9092L14.3561 8.57587C14.5139 7.94472 14.0365 7.33333 13.386 7.33333H4.78086C4.32199 7.33333 3.92201 7.64563 3.81072 8.0908L2.75008 12.3333\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                strokeLinecap: \"round\"\n            })\n        ]\n    });\n};\nvar DirectoryIconClosed = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Directory\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M12.3334 12.6667H3.66675C3.11446 12.6667 2.66675 12.219 2.66675 11.6667V5C2.66675 4.44772 3.11446 4 3.66675 4H5.69731C5.89473 4 6.08774 4.05844 6.25201 4.16795L7.74816 5.16538C7.91242 5.2749 8.10543 5.33333 8.30286 5.33333H12.3334C12.8857 5.33333 13.3334 5.78105 13.3334 6.33333V11.6667C13.3334 12.219 12.8857 12.6667 12.3334 12.6667Z\",\n                fill: \"currentColor\",\n                stroke: \"currentColor\",\n                strokeLinecap: \"round\"\n            })\n        ]\n    });\n};\nvar FileIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        fill: \"currentColor\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"File\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                clipRule: \"evenodd\",\n                d: \"M4.5 4.33325C4.5 4.05711 4.72386 3.83325 5 3.83325H8.16675V6.56659C8.16675 6.89795 8.43538 7.16658 8.76675 7.16658H11.5V12.3333C11.5 12.6094 11.2761 12.8333 11 12.8333H5C4.72386 12.8333 4.5 12.6094 4.5 12.3333V4.33325ZM12.5 6.67568C12.5001 6.67265 12.5001 6.66962 12.5001 6.66658C12.5001 6.66355 12.5001 6.66052 12.5 6.65749V6.41413C12.5 6.01631 12.342 5.63478 12.0607 5.35347L9.97978 3.27259C9.69848 2.99129 9.31694 2.83325 8.91912 2.83325H8.66675H5C4.17157 2.83325 3.5 3.50483 3.5 4.33325V12.3333C3.5 13.1617 4.17157 13.8333 5 13.8333H11C11.8284 13.8333 12.5 13.1617 12.5 12.3333V6.67568ZM9.16675 3.89888C9.20518 3.92078 9.24085 3.94787 9.27267 3.9797L11.3536 6.06058C11.3854 6.09243 11.4125 6.12813 11.4344 6.16658H9.16675V3.89888Z\",\n                fillRule: \"evenodd\"\n            })\n        ]\n    });\n};\nvar CloseIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        stroke: \"currentColor\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Close file\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M12 4L4 12\",\n                strokeLinecap: \"round\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M4 4L12 12\",\n                strokeLinecap: \"round\"\n            })\n        ]\n    });\n};\nvar ConsoleIcon = function() {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SVG, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"title\", {\n                children: \"Open browser console\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M5.65871 3.62037C5.44905 3.44066 5.1334 3.46494 4.95368 3.6746C4.77397 3.88427 4.79825 4.19992 5.00792 4.37963L5.65871 3.62037ZM5.00792 11.6204C4.79825 11.8001 4.77397 12.1157 4.95368 12.3254C5.1334 12.5351 5.44905 12.5593 5.65871 12.3796L5.00792 11.6204ZM9.9114 7.92407L10.2368 7.54445L9.9114 7.92407ZM5.00792 4.37963L9.586 8.3037L10.2368 7.54445L5.65871 3.62037L5.00792 4.37963ZM9.586 7.6963L5.00792 11.6204L5.65871 12.3796L10.2368 8.45555L9.586 7.6963ZM9.586 8.3037C9.39976 8.14407 9.39976 7.85594 9.586 7.6963L10.2368 8.45555C10.5162 8.2161 10.5162 7.7839 10.2368 7.54445L9.586 8.3037Z\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n                d: \"M10 11.5C9.72386 11.5 9.5 11.7239 9.5 12C9.5 12.2761 9.72386 12.5 10 12.5V11.5ZM14.6667 12.5C14.9428 12.5 15.1667 12.2761 15.1667 12C15.1667 11.7239 14.9428 11.5 14.6667 11.5V12.5ZM10 12.5H14.6667V11.5H10V12.5Z\"\n            })\n        ]\n    });\n};\nvar _a$a;\n/**\n * @category Theme\n */ var defaultLight = {\n    colors: {\n        surface1: \"#ffffff\",\n        surface2: \"#EFEFEF\",\n        surface3: \"#F3F3F3\",\n        disabled: \"#C5C5C5\",\n        base: \"#323232\",\n        clickable: \"#808080\",\n        hover: \"#4D4D4D\",\n        accent: \"#3973E0\",\n        error: \"#EA3323\",\n        errorSurface: \"#FCF1F0\",\n        warning: \"#6A4516\",\n        warningSurface: \"#FEF2C0\"\n    },\n    syntax: {\n        plain: \"#151515\",\n        comment: {\n            color: \"#999\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#7C5AE3\",\n        tag: \"#0971F1\",\n        punctuation: \"#3B3B3B\",\n        definition: \"#85A600\",\n        property: \"#3B3B3B\",\n        static: \"#3B3B3B\",\n        string: \"#2E6BD0\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n/**\n * @category Theme\n */ var defaultDark = {\n    colors: {\n        surface1: \"#151515\",\n        surface2: \"#252525\",\n        surface3: \"#2F2F2F\",\n        disabled: \"#4D4D4D\",\n        base: \"#808080\",\n        clickable: \"#999999\",\n        hover: \"#C5C5C5\",\n        accent: \"#E5E5E5\",\n        error: \"#FFB4A6\",\n        errorSurface: \"#690000\",\n        warning: \"#E7C400\",\n        warningSurface: \"#3A3000\"\n    },\n    syntax: {\n        plain: \"#FFFFFF\",\n        comment: {\n            color: \"#757575\",\n            fontStyle: \"italic\"\n        },\n        keyword: \"#77B7D7\",\n        tag: \"#DFAB5C\",\n        punctuation: \"#ffffff\",\n        definition: \"#86D9CA\",\n        property: \"#77B7D7\",\n        static: \"#C64640\",\n        string: \"#977CDC\"\n    },\n    font: {\n        body: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n        mono: '\"Fira Mono\", \"DejaVu Sans Mono\", Menlo, Consolas, \"Liberation Mono\", Monaco, \"Lucida Console\", monospace',\n        size: \"13px\",\n        lineHeight: \"20px\"\n    }\n};\n/**\n * @category Theme\n */ var SANDPACK_THEMES = {\n    light: defaultLight,\n    dark: defaultDark,\n    auto:  false ? 0 : defaultLight\n};\nvar getFileName = function(filePath) {\n    var lastIndexOfSlash = filePath.lastIndexOf(\"/\");\n    return filePath.slice(lastIndexOfSlash + 1);\n};\nvar calculateNearestUniquePath = function(currentPath, otherPaths) {\n    var currentPathParts = (currentPath[0] === \"/\" ? currentPath.slice(1) : currentPath).split(\"/\");\n    var resultPathParts = [];\n    // If path is on root, there are no parts to loop through\n    if (currentPathParts.length === 1) {\n        resultPathParts.unshift(currentPathParts[0]);\n    } else {\n        // Loop over all other paths to find a unique path\n        for(var fileIndex = 0; fileIndex < otherPaths.length; fileIndex++){\n            // We go over each part of the path from end to start to find the closest unique directory\n            var otherPathParts = otherPaths[fileIndex].split(\"/\");\n            for(var partsFromEnd = 1; partsFromEnd <= currentPathParts.length; partsFromEnd++){\n                var currentPathPart = currentPathParts[currentPathParts.length - partsFromEnd];\n                var otherPathPart = otherPathParts[otherPathParts.length - partsFromEnd];\n                // If this part hasn't been added to the result path, we add it here\n                if (resultPathParts.length < partsFromEnd) {\n                    resultPathParts.unshift(currentPathPart);\n                }\n                // If this part is different between the current path and other path we break\n                // as from this moment the current path is unique compared to this other path\n                if (currentPathPart !== otherPathPart) {\n                    break;\n                }\n            }\n        }\n    }\n    // Add `..` if this is a relative path\n    if (resultPathParts.length < currentPathParts.length) {\n        resultPathParts.unshift(\"..\");\n    }\n    // Join the result path parts into a path string\n    return resultPathParts.join(\"/\");\n};\n// Checks both rgb and hex colors for contrast and returns true if the color is in the dark spectrum\nvar isDarkColor = function(color) {\n    var r = 0;\n    var g = 0;\n    var b = 0;\n    if (color.startsWith(\"#\")) {\n        if (color.length < 7) {\n            return true;\n        }\n        r = parseInt(color.substr(1, 2), 16);\n        g = parseInt(color.substr(3, 2), 16);\n        b = parseInt(color.substr(5, 2), 16);\n    } else {\n        var rgbValues = color.replace(\"rgb(\", \"\").replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\");\n        if (rgbValues.length < 3) {\n            return true;\n        }\n        r = parseInt(rgbValues[0], 10);\n        g = parseInt(rgbValues[1], 10);\n        b = parseInt(rgbValues[2], 10);\n    }\n    var yiq = (r * 299 + g * 587 + b * 114) / 1000;\n    return yiq < 128;\n};\n// Minimal cuid-like id\nvar lastCount = 0;\nvar generateRandomId = function() {\n    var random = +(Date.now().toString(10).substr(0, 4) + lastCount++);\n    return random.toString(16);\n};\nvar _a$9;\n/**\n * @category Theme\n */ var THEME_PREFIX = \"sp\";\n/**\n * @category Theme\n */ // prettier-ignore\nvar createTheme = (_a$9 = (0,_stitches_core__WEBPACK_IMPORTED_MODULE_8__.createStitches)({\n    prefix: THEME_PREFIX\n}), _a$9.createTheme), css = _a$9.css, getCssText = _a$9.getCssText, keyframes = _a$9.keyframes;\nvar defaultVariables = {\n    space: new Array(11).fill(\" \").reduce(function(acc, _, index) {\n        var _a;\n        return __assign(__assign({}, acc), (_a = {}, _a[index + 1] = \"\".concat((index + 1) * 4, \"px\"), _a));\n    }, {}),\n    border: {\n        radius: \"4px\"\n    },\n    layout: {\n        height: \"300px\",\n        headerHeight: \"40px\"\n    },\n    transitions: {\n        default: \"150ms ease\"\n    },\n    zIndices: {\n        base: \"1\",\n        overlay: \"2\",\n        top: \"3\"\n    }\n};\n/**\n * @category Theme\n */ var standardizeStitchesTheme = function(theme) {\n    // Flat values\n    var syntaxEntries = Object.entries(theme.syntax);\n    var syntax = syntaxEntries.reduce(function(tokenAcc, _a) {\n        var _b;\n        var tokenName = _a[0], tokenValue = _a[1];\n        // Single property\n        var newValues = (_b = {}, _b[\"color-\".concat(tokenName)] = tokenValue, _b);\n        // Multiples properties\n        if (typeof tokenValue === \"object\") {\n            newValues = Object.entries(tokenValue).reduce(function(valueAcc, _a) {\n                var _b;\n                var styleProp = _a[0], styleValue = _a[1];\n                return __assign(__assign({}, valueAcc), (_b = {}, _b[\"\".concat(styleProp, \"-\").concat(tokenName)] = styleValue, _b));\n            }, {});\n        }\n        return __assign(__assign({}, tokenAcc), newValues);\n    }, {});\n    return __assign(__assign({}, defaultVariables), {\n        colors: theme.colors,\n        font: theme.font,\n        syntax: syntax\n    });\n};\n/**\n * @category Theme\n */ var standardizeTheme = function(inputTheme) {\n    var _a, _b, _c, _d, _e;\n    if (inputTheme === void 0) {\n        inputTheme = \"light\";\n    }\n    var defaultLightThemeKey = \"default\";\n    /**\n     * Set a local theme: dark or light\n     */ if (typeof inputTheme === \"string\") {\n        var predefinedTheme = SANDPACK_THEMES[inputTheme];\n        if (!predefinedTheme) {\n            throw new Error(\"[sandpack-react]: invalid theme '\".concat(inputTheme, \"' provided.\"));\n        }\n        return {\n            theme: predefinedTheme,\n            id: inputTheme,\n            mode: isDarkColor(predefinedTheme.colors.surface1) ? \"dark\" : \"light\"\n        };\n    }\n    /**\n     * Fullfill the colors key, in case it's missing any key\n     */ var mode = isDarkColor((_b = (_a = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.colors) === null || _a === void 0 ? void 0 : _a.surface1) !== null && _b !== void 0 ? _b : defaultLight.colors.surface1) ? \"dark\" : \"light\";\n    /**\n     * Figure out what's the properly default colors it should be\n     * error, warning and success colors have different values between dark and light\n     */ var baseTheme = mode === \"dark\" ? defaultDark : defaultLight;\n    var colorsByMode = __assign(__assign({}, baseTheme.colors), (_c = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.colors) !== null && _c !== void 0 ? _c : {});\n    var syntaxByMode = __assign(__assign({}, baseTheme.syntax), (_d = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.syntax) !== null && _d !== void 0 ? _d : {});\n    var fontByMode = __assign(__assign({}, baseTheme.font), (_e = inputTheme === null || inputTheme === void 0 ? void 0 : inputTheme.font) !== null && _e !== void 0 ? _e : {});\n    var theme = {\n        colors: colorsByMode,\n        syntax: syntaxByMode,\n        font: fontByMode\n    };\n    var id = inputTheme ? simpleHashFunction(JSON.stringify(theme)) : defaultLightThemeKey;\n    return {\n        theme: theme,\n        id: \"sp-\".concat(id),\n        mode: mode\n    };\n};\nvar simpleHashFunction = function(str) {\n    var hash = 0;\n    for(var i = 0; i < str.length; hash &= hash){\n        hash = 31 * hash + str.charCodeAt(i++);\n    }\n    return Math.abs(hash);\n};\n/**\n * The fake `css` function used to match the real `css` function usage\n * We use this for the unstyled bundle which do not need real class names\n * `css` is a factory which return a className generator, but also it be used in scenarios which `toString` will be invoked\n * so we also need to add the `toString` method to it.\n */ var fakeCss = function() {\n    return \"\";\n};\nfakeCss.toString = fakeCss;\n/**\n * <ClassNamesContext classes={{\n *     \"sp-wrapper\": \"custom-wrapper\",\n *     \"sp-layout\": \"custom-layout\",\n *     \"sp-tab-button\": \"custom-tab\",\n *  }}>\n *  ...\n * </ClassNamesContext>\n */ var ClassNamesContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\nvar ClassNamesProvider = function(_a) {\n    var children = _a.children, classes = _a.classes;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ClassNamesContext.Provider, {\n        value: classes || {},\n        children: children\n    });\n};\nvar useClassNames = function() {\n    var contextClassNames = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ClassNamesContext);\n    return function sandpackClassNames(customClassName, /* eslint-disable @typescript-eslint/no-explicit-any */ allClassNames) {\n        if (allClassNames === void 0) {\n            allClassNames = [];\n        }\n        var custom = \"\".concat(THEME_PREFIX, \"-\").concat(customClassName);\n        return joinClassNames.apply(void 0, __spreadArray(__spreadArray([], allClassNames, false), [\n            custom,\n            contextClassNames[custom]\n        ], false));\n    };\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar joinClassNames = function() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        args[_i] = arguments[_i];\n    }\n    return args.filter(Boolean).join(\" \");\n};\nvar wrapperClassName$3 = css({\n    all: \"initial\",\n    fontSize: \"$font$size\",\n    fontFamily: \"$font$body\",\n    display: \"block\",\n    boxSizing: \"border-box\",\n    textRendering: \"optimizeLegibility\",\n    WebkitTapHighlightColor: \"transparent\",\n    WebkitFontSmoothing: \"subpixel-antialiased\",\n    variants: {\n        variant: {\n            dark: {\n                colorScheme: \"dark\"\n            },\n            light: {\n                colorScheme: \"light\"\n            }\n        }\n    },\n    \"@media screen and (min-resolution: 2dppx)\": {\n        WebkitFontSmoothing: \"antialiased\",\n        MozOsxFontSmoothing: \"grayscale\"\n    },\n    \"*\": {\n        boxSizing: \"border-box\"\n    },\n    \".sp-wrapper:focus\": {\n        outline: \"0\"\n    }\n});\nvar SandpackThemeContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext({\n    theme: defaultLight,\n    id: \"light\",\n    mode: \"light\"\n});\n/**\n * @category Theme\n */ var SandpackThemeProvider = function(_a) {\n    var themeFromProps = _a.theme, children = _a.children, className = _a.className, props = __rest(_a, [\n        \"theme\",\n        \"children\",\n        \"className\"\n    ]);\n    var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(themeFromProps), prefferedTheme = _b[0], setPreferredTheme = _b[1];\n    var _c = standardizeTheme(prefferedTheme), theme = _c.theme, id = _c.id, mode = _c.mode;\n    var classNames = useClassNames();\n    var themeClassName = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"SandpackThemeProvider.useMemo[themeClassName]\": function() {\n            return createTheme(id, standardizeStitchesTheme(theme));\n        }\n    }[\"SandpackThemeProvider.useMemo[themeClassName]\"], [\n        theme,\n        id\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SandpackThemeProvider.useEffect\": function() {\n            if (themeFromProps !== \"auto\") {\n                setPreferredTheme(themeFromProps);\n                return;\n            }\n            var colorSchemeChange = {\n                \"SandpackThemeProvider.useEffect.colorSchemeChange\": function(_a) {\n                    var matches = _a.matches;\n                    setPreferredTheme(matches ? \"dark\" : \"light\");\n                }\n            }[\"SandpackThemeProvider.useEffect.colorSchemeChange\"];\n            window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", colorSchemeChange);\n            return ({\n                \"SandpackThemeProvider.useEffect\": function() {\n                    window.matchMedia(\"(prefers-color-scheme: dark)\").removeEventListener(\"change\", colorSchemeChange);\n                }\n            })[\"SandpackThemeProvider.useEffect\"];\n        }\n    }[\"SandpackThemeProvider.useEffect\"], [\n        themeFromProps\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackThemeContext.Provider, {\n        value: {\n            theme: theme,\n            id: id,\n            mode: mode\n        },\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n            className: classNames(\"wrapper\", [\n                themeClassName,\n                wrapperClassName$3({\n                    variant: mode\n                }),\n                className\n            ])\n        }, props, {\n            children: children\n        }))\n    });\n};\nvar SandpackThemeConsumer = SandpackThemeContext.Consumer;\nvar commonFiles = {\n    \"/styles.css\": {\n        code: \"body {\\n  font-family: sans-serif;\\n  -webkit-font-smoothing: auto;\\n  -moz-font-smoothing: auto;\\n  -moz-osx-font-smoothing: grayscale;\\n  font-smoothing: auto;\\n  text-rendering: optimizeLegibility;\\n  font-smooth: always;\\n  -webkit-tap-highlight-color: transparent;\\n  -webkit-touch-callout: none;\\n}\\n\\nh1 {\\n  font-size: 1.5rem;\\n}\"\n    }\n};\n/**\n * @hidden\n */ var ASTRO_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/pages/index.astro\": {\n            code: \"---\\nimport \\\"../styles.css\\\";\\nconst data = \\\"world\\\";\\n---\\n\\n<h1>Hello {data}</h1>\\n\\n<style>\\n  h1 {\\n    font-size: 1.5rem;\\n  }\\n</style>\"\n        },\n        \".env\": {\n            code: \"ASTRO_TELEMETRY_DISABLED=\\\"1\\\"\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    astro: \"^1.6.12\",\n                    \"esbuild-wasm\": \"^0.15.16\"\n                },\n                scripts: {\n                    dev: \"astro dev\",\n                    start: \"astro dev\",\n                    build: \"astro build\",\n                    preview: \"astro preview\",\n                    astro: \"astro\"\n                }\n            })\n        }\n    },\n    main: \"/src/pages/index.astro\",\n    environment: \"node\"\n};\nvar NEXTJS_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/pages/_app.js\": {\n            code: \"import '../styles.css'\\n\\nexport default function MyApp({ Component, pageProps }) {\\n  return <Component {...pageProps} />\\n}\"\n        },\n        \"/pages/index.js\": {\n            code: \"export default function Home({ data }) {\\n  return (\\n    <div>\\n      <h1>Hello {data}</h1>\\n    </div>\\n  );\\n}\\n  \\nexport function getServerSideProps() {\\n  return {\\n    props: { data: \\\"world\\\" },\\n  }\\n}\\n\"\n        },\n        \"/next.config.js\": {\n            code: \"/** @type {import('next').NextConfig} */\\nconst nextConfig = {\\n  reactStrictMode: true,\\n  swcMinify: true,\\n}\\n\\nmodule.exports = nextConfig\\n\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                name: \"my-app\",\n                version: \"0.1.0\",\n                private: true,\n                scripts: {\n                    dev: \"NEXT_TELEMETRY_DISABLED=1 next dev\",\n                    build: \"next build\",\n                    start: \"next start\",\n                    lint: \"next lint\"\n                },\n                dependencies: {\n                    next: \"12.1.6\",\n                    react: \"18.2.0\",\n                    \"react-dom\": \"18.2.0\",\n                    \"@next/swc-wasm-nodejs\": \"12.1.6\"\n                }\n            })\n        }\n    }),\n    main: \"/pages/index.js\",\n    environment: \"node\"\n};\nvar NODE_TEMPLATE = {\n    files: {\n        \"/index.js\": {\n            code: \"const http = require('http');\\n\\nconst hostname = '127.0.0.1';\\nconst port = 3000;\\n\\nconst server = http.createServer((req, res) => {\\n  res.statusCode = 200;\\n  res.setHeader('Content-Type', 'text/html');\\n  res.end('Hello world');\\n});\\n\\nserver.listen(port, hostname, () => {\\n  console.log(`Server running at http://${hostname}:${port}/`);\\n});\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {},\n                scripts: {\n                    start: \"node index.js\"\n                },\n                main: \"index.js\"\n            })\n        }\n    },\n    main: \"/index.js\",\n    environment: \"node\"\n};\nvar VITE_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/index.js\": {\n            code: \"import \\\"./styles.css\\\";\\n\\ndocument.getElementById(\\\"app\\\").innerHTML = `\\n<h1>Hello world</h1>\\n`;\\n\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"app\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/index.js\\\"></script>\\n  </body>\\n</html>\\n\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"vite build\",\n                    preview: \"vite preview\"\n                },\n                devDependencies: {\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"0.17.12\"\n                }\n            })\n        }\n    }),\n    main: \"/index.js\",\n    environment: \"node\"\n};\nvar VITE_PREACT_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.jsx\": {\n            code: \"export default function App() {\\n  const data = \\\"world\\\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n\"\n        },\n        \"/index.jsx\": {\n            code: \"import { render } from \\\"preact\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\n\\nconst root = document.getElementById(\\\"root\\\");\\nrender(<App />, root);\\n\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/index.jsx\\\"></script>\\n  </body>\\n</html>\\n\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    preact: \"^10.16.0\"\n                },\n                devDependencies: {\n                    \"@preact/preset-vite\": \"^2.5.0\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"0.17.12\"\n                }\n            })\n        },\n        \"/vite.config.js\": {\n            code: \"import { defineConfig } from \\\"vite\\\";\\nimport preact from '@preact/preset-vite'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [preact()],\\n});\\n\"\n        }\n    }),\n    main: \"/App.jsx\",\n    environment: \"node\"\n};\nvar VITE_PREACT_TS_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.tsx\": {\n            code: \"export default function App() {\\n  const data: string = \\\"world\\\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n\"\n        },\n        \"/index.tsx\": {\n            code: \"import { render } from \\\"preact\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\n\\nconst root = document.getElementById(\\\"root\\\") as HTMLElement;\\nrender(<App />, root);\\n\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/index.tsx\\\"></script>\\n  </body>\\n</html>\\n\"\n        },\n        \"/tsconfig.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    target: \"ESNext\",\n                    useDefineForClassFields: true,\n                    lib: [\n                        \"DOM\",\n                        \"DOM.Iterable\",\n                        \"ESNext\"\n                    ],\n                    allowJs: false,\n                    skipLibCheck: true,\n                    esModuleInterop: false,\n                    allowSyntheticDefaultImports: true,\n                    strict: true,\n                    forceConsistentCasingInFileNames: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    resolveJsonModule: true,\n                    isolatedModules: true,\n                    noEmit: true,\n                    jsx: \"react-jsx\",\n                    jsxImportSource: \"preact\"\n                },\n                include: [\n                    \"src\"\n                ],\n                references: [\n                    {\n                        path: \"./tsconfig.node.json\"\n                    }\n                ]\n            }, null, 2)\n        },\n        \"/tsconfig.node.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    composite: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    allowSyntheticDefaultImports: true\n                },\n                include: [\n                    \"vite.config.ts\"\n                ]\n            }, null, 2)\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"tsc && vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    preact: \"^10.16.0\"\n                },\n                devDependencies: {\n                    \"@preact/preset-vite\": \"^2.5.0\",\n                    typescript: \"^4.9.5\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"^0.17.12\"\n                }\n            }, null, 2)\n        },\n        \"/vite-env.d.ts\": {\n            code: '/// <reference types=\"vite/client\" />'\n        },\n        \"/vite.config.ts\": {\n            code: \"import { defineConfig } from 'vite'\\nimport preact from '@preact/preset-vite'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [preact()],\\n})\\n\"\n        }\n    }),\n    main: \"/App.tsx\",\n    environment: \"node\"\n};\nvar VITE_REACT_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.jsx\": {\n            code: \"export default function App() {\\n  const data = \\\"world\\\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n\"\n        },\n        \"/index.jsx\": {\n            code: \"import { StrictMode } from \\\"react\\\";\\nimport { createRoot } from \\\"react-dom/client\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/index.jsx\\\"></script>\\n  </body>\\n</html>\\n\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    react: \"^18.2.0\",\n                    \"react-dom\": \"^18.2.0\"\n                },\n                devDependencies: {\n                    \"@vitejs/plugin-react\": \"3.1.0\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"0.17.12\"\n                }\n            })\n        },\n        \"/vite.config.js\": {\n            code: \"import { defineConfig } from \\\"vite\\\";\\nimport react from \\\"@vitejs/plugin-react\\\";\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n});\\n\"\n        }\n    }),\n    main: \"/App.jsx\",\n    environment: \"node\"\n};\nvar VITE_REACT_TS_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.tsx\": {\n            code: \"export default function App() {\\n  const data: string = \\\"world\\\"\\n\\n  return <h1>Hello {data}</h1>\\n}\\n\"\n        },\n        \"/index.tsx\": {\n            code: \"import { StrictMode } from \\\"react\\\";\\nimport { createRoot } from \\\"react-dom/client\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\nimport React from \\\"react\\\";\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\") as HTMLElement);\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/index.tsx\\\"></script>\\n  </body>\\n</html>\\n\"\n        },\n        \"/tsconfig.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    target: \"ESNext\",\n                    useDefineForClassFields: true,\n                    lib: [\n                        \"DOM\",\n                        \"DOM.Iterable\",\n                        \"ESNext\"\n                    ],\n                    allowJs: false,\n                    skipLibCheck: true,\n                    esModuleInterop: false,\n                    allowSyntheticDefaultImports: true,\n                    strict: true,\n                    forceConsistentCasingInFileNames: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    resolveJsonModule: true,\n                    isolatedModules: true,\n                    noEmit: true,\n                    jsx: \"react-jsx\"\n                },\n                include: [\n                    \"src\"\n                ],\n                references: [\n                    {\n                        path: \"./tsconfig.node.json\"\n                    }\n                ]\n            }, null, 2)\n        },\n        \"/tsconfig.node.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    composite: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    allowSyntheticDefaultImports: true\n                },\n                include: [\n                    \"vite.config.ts\"\n                ]\n            }, null, 2)\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"tsc && vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    react: \"^19.0.0\",\n                    \"react-dom\": \"^19.0.0\"\n                },\n                devDependencies: {\n                    \"@types/react\": \"^19.0.8\",\n                    \"@types/react-dom\": \"^19.0.3\",\n                    \"@vitejs/plugin-react\": \"^4.3.4\",\n                    typescript: \"^4.9.5\",\n                    vite: \"4.2.0\",\n                    \"esbuild-wasm\": \"^0.17.12\"\n                }\n            }, null, 2)\n        },\n        \"/vite-env.d.ts\": {\n            code: '/// <reference types=\"vite/client\" />'\n        },\n        \"/vite.config.ts\": {\n            code: \"import { defineConfig } from 'vite'\\nimport react from '@vitejs/plugin-react'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n})\\n\"\n        }\n    }),\n    main: \"/App.tsx\",\n    environment: \"node\"\n};\nvar VITE_SVELTE_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.svelte\": {\n            code: \"<script>\\nconst data = \\\"world\\\";\\n</script>\\n\\n<h1>Hello {data}</h1>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>\"\n        },\n        \"/src/main.js\": {\n            code: \"import App from './App.svelte'\\nimport \\\"./styles.css\\\"\\n\\nconst app = new App({\\n  target: document.getElementById('app'),\\n})\\n\\nexport default app\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"app\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/main.js\\\"></script>\\n  </body>\\n</html>\\n\"\n        },\n        \"/vite.config.js\": {\n            code: \"import { defineConfig } from 'vite'\\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [svelte()],\\n})\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                type: \"module\",\n                scripts: {\n                    dev: \"vite\"\n                },\n                devDependencies: {\n                    \"@sveltejs/vite-plugin-svelte\": \"^2.0.2\",\n                    svelte: \"^3.55.1\",\n                    vite: \"4.0.4\",\n                    \"esbuild-wasm\": \"^0.17.12\"\n                }\n            })\n        }\n    },\n    main: \"/src/App.svelte\",\n    environment: \"node\"\n};\nvar VITE_SVELTE_TS_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.svelte\": {\n            code: \"<script lang=\\\"ts\\\">\\nconst data: string = \\\"world\\\";\\n</script>\\n\\n<h1>Hello {data}</h1>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>\"\n        },\n        \"/src/main.ts\": {\n            code: \"import App from './App.svelte'\\nimport \\\"./styles.css\\\"\\n\\nconst app = new App({\\n  target: document.getElementById('app'),\\n})\\n\\nexport default app\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"app\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/main.ts\\\"></script>\\n  </body>\\n</html>\\n\"\n        },\n        \"/vite-env.d.ts\": {\n            code: \"/// <reference types=\\\"svelte\\\" />\\n/// <reference types=\\\"vite/client\\\" />\"\n        },\n        \"svelte.config.js\": {\n            code: \"import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'\\n\\nexport default {\\n  // Consult https://svelte.dev/docs#compile-time-svelte-preprocess\\n  // for more information about preprocessors\\n  preprocess: vitePreprocess(),\\n}\\n\"\n        },\n        \"/vite.config.ts\": {\n            code: \"import { defineConfig } from 'vite'\\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [svelte()],\\n})\"\n        },\n        \"tsconfig.json\": {\n            code: JSON.stringify({\n                extends: \"@tsconfig/svelte/tsconfig.json\",\n                compilerOptions: {\n                    target: \"ESNext\",\n                    useDefineForClassFields: true,\n                    module: \"ESNext\",\n                    resolveJsonModule: true,\n                    allowJs: true,\n                    checkJs: true,\n                    isolatedModules: true\n                },\n                include: [\n                    \"src/**/*.d.ts\",\n                    \"src/**/*.ts\",\n                    \"src/**/*.js\",\n                    \"src/**/*.svelte\"\n                ],\n                references: [\n                    {\n                        path: \"./tsconfig.node.json\"\n                    }\n                ]\n            }, null, 2)\n        },\n        \"tsconfig.node.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    composite: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\"\n                },\n                include: [\n                    \"vite.config.ts\"\n                ]\n            }, null, 2)\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                type: \"module\",\n                scripts: {\n                    dev: \"vite\"\n                },\n                devDependencies: {\n                    \"@sveltejs/vite-plugin-svelte\": \"^2.0.2\",\n                    \"@tsconfig/svelte\": \"^3.0.0\",\n                    svelte: \"^3.55.1\",\n                    \"svelte-check\": \"^2.10.3\",\n                    tslib: \"^2.5.0\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"^0.17.12\"\n                }\n            }, null, 2)\n        }\n    },\n    main: \"/src/App.svelte\",\n    environment: \"node\"\n};\nvar VITE_VUE_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.vue\": {\n            code: \"<script setup>\\nimport { ref } from \\\"vue\\\";\\n\\nconst data = ref(\\\"world\\\");\\n</script>\\n\\n<template>\\n  <h1>Hello {{ data }}</h1>\\n</template>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>\"\n        },\n        \"/src/main.js\": {\n            code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\"\\n            \\ncreateApp(App).mount('#app')            \\n\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"app\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/main.js\\\"></script>\\n  </body>\\n</html>\\n\"\n        },\n        \"/vite.config.js\": {\n            code: \"import { defineConfig } from 'vite'\\nimport vue from '@vitejs/plugin-vue'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [vue()]\\n})\\n\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    vue: \"^3.2.45\"\n                },\n                devDependencies: {\n                    \"@vitejs/plugin-vue\": \"3.2.0\",\n                    vite: \"4.1.4\",\n                    \"esbuild-wasm\": \"0.17.12\"\n                }\n            })\n        }\n    },\n    main: \"/src/App.vue\",\n    environment: \"node\"\n};\nvar VITE_VUE_TS_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.vue\": {\n            code: \"<script setup lang=\\\"ts\\\">\\nimport { ref } from \\\"vue\\\";\\n\\nconst data = ref<string>(\\\"world\\\");\\n</script>\\n\\n<template>\\n  <h1>Hello {{ data }}</h1>\\n</template>\\n\\n<style>\\nh1 {\\n  font-size: 1.5rem;\\n}\\n</style>\"\n        },\n        \"/src/main.ts\": {\n            code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\"\\n\\ncreateApp(App).mount('#app')\\n\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>Vite App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"app\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/main.ts\\\"></script>\\n  </body>\\n</html>\\n\"\n        },\n        \"/vite-env.d.ts\": {\n            code: '/// <reference types=\"vite/client\" />'\n        },\n        \"/vite.config.ts\": {\n            code: \"import { defineConfig } from 'vite'\\nimport vue from '@vitejs/plugin-vue'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [vue()]\\n})\\n\"\n        },\n        \"tsconfig.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    target: \"ESNext\",\n                    useDefineForClassFields: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    strict: true,\n                    jsx: \"preserve\",\n                    resolveJsonModule: true,\n                    isolatedModules: true,\n                    esModuleInterop: true,\n                    lib: [\n                        \"ESNext\",\n                        \"DOM\"\n                    ],\n                    skipLibCheck: true,\n                    noEmit: true\n                },\n                include: [\n                    \"src/**/*.ts\",\n                    \"src/**/*.d.ts\",\n                    \"src/**/*.tsx\",\n                    \"src/**/*.vue\"\n                ],\n                references: [\n                    {\n                        path: \"./tsconfig.node.json\"\n                    }\n                ]\n            }, null, 2)\n        },\n        \"tsconfig.node.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    composite: true,\n                    module: \"ESNext\",\n                    moduleResolution: \"Node\",\n                    allowSyntheticDefaultImports: true\n                },\n                include: [\n                    \"vite.config.ts\"\n                ]\n            }, null, 2)\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                scripts: {\n                    dev: \"vite\",\n                    build: \"tsc && vite build\",\n                    preview: \"vite preview\"\n                },\n                dependencies: {\n                    vue: \"^3.2.47\"\n                },\n                devDependencies: {\n                    \"@vitejs/plugin-vue\": \"^4.0.0\",\n                    vite: \"4.1.4\",\n                    \"vue-tsc\": \"^1.2.0\",\n                    typescript: \"^4.9.5\",\n                    \"esbuild-wasm\": \"^0.17.12\"\n                }\n            }, null, 2)\n        }\n    },\n    main: \"/src/App.vue\",\n    environment: \"node\"\n};\nvar ANGULAR_TEMPLATE = {\n    files: {\n        \"/src/app/app.component.css\": commonFiles[\"/styles.css\"],\n        \"/src/app/app.component.html\": {\n            code: \"<div>\\n<h1>{{ helloWorld }}</h1>\\n</div>     \\n\"\n        },\n        \"/src/app/app.component.ts\": {\n            code: \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n  selector: \\\"app-root\\\",\\n  templateUrl: \\\"./app.component.html\\\",\\n  styleUrls: [\\\"./app.component.css\\\"]\\n})\\nexport class AppComponent {\\n  helloWorld = \\\"Hello world\\\";\\n}           \\n\"\n        },\n        \"/src/app/app.module.ts\": {\n            code: \"import { BrowserModule } from \\\"@angular/platform-browser\\\";\\nimport { NgModule } from \\\"@angular/core\\\";\\n      \\nimport { AppComponent } from \\\"./app.component\\\";\\n      \\n@NgModule({\\n  declarations: [AppComponent],\\n  imports: [BrowserModule],\\n  providers: [],\\n  bootstrap: [AppComponent]\\n})\\nexport class AppModule {}       \\n\"\n        },\n        \"/src/index.html\": {\n            code: \"<!doctype html>\\n<html lang=\\\"en\\\">\\n      \\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <title>Angular</title>\\n  <base href=\\\"/\\\">\\n      \\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n  <link rel=\\\"icon\\\" type=\\\"image/x-icon\\\" href=\\\"favicon.ico\\\">\\n</head>\\n      \\n<body>\\n   <app-root></app-root>\\n</body>\\n      \\n</html>\\n\"\n        },\n        \"/src/main.ts\": {\n            code: \"import { enableProdMode } from \\\"@angular/core\\\";\\nimport { platformBrowserDynamic } from \\\"@angular/platform-browser-dynamic\\\";\\n      \\nimport { AppModule } from \\\"./app/app.module\\\";      \\n\\nplatformBrowserDynamic()\\n  .bootstrapModule(AppModule)\\n  .catch(err => console.log(err));\\n      \\n\"\n        },\n        \"/src/polyfills.ts\": {\n            code: \"import \\\"core-js/proposals/reflect-metadata\\\";   \\n      import \\\"zone.js/dist/zone\\\";\\n\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    \"@angular/core\": \"^11.2.0\",\n                    \"@angular/platform-browser\": \"^11.2.0\",\n                    \"@angular/platform-browser-dynamic\": \"^11.2.0\",\n                    \"@angular/common\": \"^11.2.0\",\n                    \"@angular/compiler\": \"^11.2.0\",\n                    \"zone.js\": \"0.11.3\",\n                    \"core-js\": \"3.8.3\",\n                    rxjs: \"6.6.3\"\n                },\n                main: \"/src/main.ts\"\n            })\n        }\n    },\n    main: \"/src/app/app.component.ts\",\n    environment: \"angular-cli\"\n};\nvar REACT_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.js\": {\n            code: \"export default function App() {\\n  return <h1>Hello world</h1>\\n}\\n\"\n        },\n        \"/index.js\": {\n            code: \"import React, { StrictMode } from \\\"react\\\";\\nimport { createRoot } from \\\"react-dom/client\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\"\n        },\n        \"/public/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Document</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n  </body>\\n</html>\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    react: \"^19.0.0\",\n                    \"react-dom\": \"^19.0.0\",\n                    \"react-scripts\": \"^5.0.0\"\n                },\n                main: \"/index.js\"\n            })\n        }\n    }),\n    main: \"/App.js\",\n    environment: \"create-react-app\"\n};\nvar REACT_TYPESCRIPT_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"tsconfig.json\": {\n            code: \"{\\n  \\\"include\\\": [\\n    \\\"./**/*\\\"\\n  ],\\n  \\\"compilerOptions\\\": {\\n    \\\"strict\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"lib\\\": [ \\\"dom\\\", \\\"es2015\\\" ],\\n    \\\"jsx\\\": \\\"react-jsx\\\"\\n  }\\n}\"\n        },\n        \"/App.tsx\": {\n            code: \"export default function App(): JSX.Element {\\n  return <h1>Hello world</h1>\\n}\\n\"\n        },\n        \"/index.tsx\": {\n            code: \"import React, { StrictMode } from \\\"react\\\";\\nimport { createRoot } from \\\"react-dom/client\\\";\\nimport \\\"./styles.css\\\";\\n\\nimport App from \\\"./App\\\";\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\"\n        },\n        \"/public/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Document</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n  </body>\\n</html>\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    react: \"^19.0.0\",\n                    \"react-dom\": \"^19.0.0\",\n                    \"react-scripts\": \"^4.0.0\"\n                },\n                devDependencies: {\n                    \"@types/react\": \"^19.0.0\",\n                    \"@types/react-dom\": \"^19.0.0\",\n                    typescript: \"^4.0.0\"\n                },\n                main: \"/index.tsx\"\n            })\n        }\n    }),\n    main: \"/App.tsx\",\n    environment: \"create-react-app\"\n};\nvar SOLID_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.tsx\": {\n            code: \"import { Component } from \\\"solid-js\\\";\\n\\nconst App: Component = () => {\\n  return <h1>Hello world</h1>\\n};\\n\\nexport default App;\"\n        },\n        \"/index.tsx\": {\n            code: \"import { render } from \\\"solid-js/web\\\";\\nimport App from \\\"./App\\\";\\n\\nimport \\\"./styles.css\\\";\\n\\nrender(() => <App />, document.getElementById(\\\"app\\\"));\"\n        },\n        \"/index.html\": {\n            code: \"<html>\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\\\"UTF-8\\\" />\\n</head>\\n<body>\\n  <div id=\\\"app\\\"></div>\\n  <script src=\\\"src/index.tsx\\\"></script>\\n</body>\\n</html>\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    \"solid-js\": \"1.3.15\"\n                },\n                main: \"/index.tsx\"\n            })\n        }\n    }),\n    main: \"/App.tsx\",\n    environment: \"solid\"\n};\nvar SVELTE_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/App.svelte\": {\n            code: \"<style>\\n  h1 {\\n    font-size: 1.5rem;\\n  }\\n</style>\\n\\n<script>\\n  let name = 'world';\\n</script>\\n\\n<main>\\n  <h1>Hello {name}</h1>\\n</main>\"\n        },\n        \"/index.js\": {\n            code: \"import App from \\\"./App.svelte\\\";\\nimport \\\"./styles.css\\\";\\n\\nconst app = new App({\\n  target: document.body\\n});\\n\\nexport default app;\\n      \"\n        },\n        \"/public/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta charset=\\\"utf8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\" />\\n\\n    <title>Svelte app</title>\\n\\n    <link rel=\\\"stylesheet\\\" href=\\\"public/bundle.css\\\" />\\n  </head>\\n\\n  <body>\\n    <script src=\\\"bundle.js\\\"></script>\\n  </body>\\n</html>\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {\n                    svelte: \"^3.0.0\"\n                },\n                main: \"/index.js\"\n            })\n        }\n    }),\n    main: \"/App.svelte\",\n    environment: \"svelte\"\n};\nvar TEST_TYPESCRIPT_TEMPLATE = {\n    files: {\n        \"tsconfig.json\": {\n            code: \"{\\n  \\\"include\\\": [\\n    \\\"./**/*\\\"\\n  ],\\n  \\\"compilerOptions\\\": {\\n    \\\"strict\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"lib\\\": [ \\\"dom\\\", \\\"es2015\\\" ],\\n    \\\"jsx\\\": \\\"react-jsx\\\"\\n  }\\n}\"\n        },\n        \"/add.ts\": {\n            code: \"export const add = (a: number, b: number): number => a + b;\"\n        },\n        \"/add.test.ts\": {\n            code: \"import { add } from './add';\\n\\ndescribe('add', () => {\\n  test('Commutative Law of Addition', () => {\\n    expect(add(1, 2)).toBe(add(2, 1));\\n  });\\n});\"\n        },\n        \"package.json\": {\n            code: JSON.stringify({\n                dependencies: {},\n                devDependencies: {\n                    typescript: \"^4.0.0\"\n                },\n                main: \"/add.ts\"\n            })\n        }\n    },\n    main: \"/add.test.ts\",\n    environment: \"parcel\",\n    mode: \"tests\"\n};\nvar VANILLA_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/index.js\": {\n            code: \"import \\\"./styles.css\\\";\\n\\ndocument.getElementById(\\\"app\\\").innerHTML = `\\n<h1>Hello world</h1>\\n`;\\n\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\\\"UTF-8\\\" />\\n</head>\\n\\n<body>\\n  <div id=\\\"app\\\"></div>\\n\\n  <script src=\\\"index.js\\\">\\n  </script>\\n</body>\\n\\n</html>\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {},\n                main: \"/index.js\"\n            })\n        }\n    }),\n    main: \"/index.js\",\n    environment: \"parcel\"\n};\nvar VANILLA_TYPESCRIPT_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"tsconfig.json\": {\n            code: \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"strict\\\": true,\\n    \\\"module\\\": \\\"commonjs\\\",\\n    \\\"jsx\\\": \\\"preserve\\\",\\n    \\\"esModuleInterop\\\": true,\\n    \\\"sourceMap\\\": true,\\n    \\\"allowJs\\\": true,\\n    \\\"lib\\\": [\\n      \\\"es6\\\",\\n      \\\"dom\\\"\\n    ],\\n    \\\"rootDir\\\": \\\"src\\\",\\n    \\\"moduleResolution\\\": \\\"node\\\"\\n  }\\n}\"\n        },\n        \"/index.ts\": {\n            code: \"import \\\"./styles.css\\\";\\n\\ndocument.getElementById(\\\"app\\\").innerHTML = `\\n<h1>Hello world</h1>\\n`;\\n\"\n        },\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\\\"UTF-8\\\" />\\n</head>\\n\\n<body>\\n  <div id=\\\"app\\\"></div>\\n\\n  <script src=\\\"index.ts\\\">\\n  </script>\\n</body>\\n\\n</html>\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {},\n                devDependencies: {\n                    typescript: \"^4.0.0\"\n                },\n                main: \"/index.ts\"\n            })\n        }\n    }),\n    main: \"/index.ts\",\n    environment: \"parcel\"\n};\nvar VUE_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.vue\": {\n            code: \"<template>\\n  <h1>Hello {{ msg }}</h1>\\n</template>\\n\\n<script setup>\\nimport { ref } from 'vue';\\nconst msg = ref('world');\\n</script>\"\n        },\n        \"/src/main.js\": {\n            code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\";\\n\\ncreateApp(App).mount('#app')\\n\"\n        },\n        \"/public/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1.0\\\" />\\n    <title>codesandbox</title>\\n  </head>\\n  <body>\\n    <noscript>\\n      <strong\\n        >We're sorry but codesandbox doesn't work properly without JavaScript\\n        enabled. Please enable it to continue.</strong\\n      >\\n    </noscript>\\n    <div id=\\\"app\\\"></div>\\n    <!-- built files will be auto injected -->\\n  </body>\\n</html>\\n\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                name: \"vue3\",\n                version: \"0.1.0\",\n                private: true,\n                main: \"/src/main.js\",\n                scripts: {\n                    serve: \"vue-cli-service serve\",\n                    build: \"vue-cli-service build\"\n                },\n                dependencies: {\n                    \"core-js\": \"^3.26.1\",\n                    vue: \"^3.2.45\"\n                },\n                devDependencies: {\n                    \"@vue/cli-plugin-babel\": \"^5.0.8\",\n                    \"@vue/cli-service\": \"^5.0.8\"\n                }\n            })\n        }\n    },\n    main: \"/src/App.vue\",\n    environment: \"vue-cli\"\n};\nvar VUE_TS_TEMPLATE = {\n    files: {\n        \"/src/styles.css\": commonFiles[\"/styles.css\"],\n        \"/src/App.vue\": {\n            code: \"<template>\\n  <h1>Hello {{ msg }}</h1>\\n</template>\\n\\n<script setup lang=\\\"ts\\\">\\nimport { ref } from 'vue';\\nconst msg = ref<string>('world');\\n</script>\"\n        },\n        \"/src/main.ts\": {\n            code: \"import { createApp } from 'vue'\\nimport App from './App.vue'\\nimport \\\"./styles.css\\\";\\n\\ncreateApp(App).mount('#app')\\n\"\n        },\n        \"/src/shims-vue.d.ts\": \"/* eslint-disable */\\ndeclare module \\\"*.vue\\\" {\\n  import type { DefineComponent } from \\\"vue\\\";\\n  const component: DefineComponent<{}, {}, any>;\\n  export default component;\\n}\",\n        \"/public/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1.0\\\" />\\n    <title>codesandbox</title>\\n  </head>\\n  <body>\\n    <noscript>\\n      <strong\\n        >We're sorry but codesandbox doesn't work properly without JavaScript\\n        enabled. Please enable it to continue.</strong\\n      >\\n    </noscript>\\n    <div id=\\\"app\\\"></div>\\n    <!-- built files will be auto injected -->\\n  </body>\\n</html>\\n\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                name: \"vue3-ts\",\n                version: \"0.1.0\",\n                private: true,\n                main: \"/src/main.ts\",\n                scripts: {\n                    serve: \"vue-cli-service serve\",\n                    build: \"vue-cli-service build\"\n                },\n                dependencies: {\n                    \"core-js\": \"^3.26.1\",\n                    vue: \"^3.2.45\"\n                },\n                devDependencies: {\n                    \"@vue/cli-plugin-babel\": \"^5.0.8\",\n                    \"@vue/cli-plugin-typescript\": \"^5.0.8\",\n                    \"@vue/cli-service\": \"^5.0.8\",\n                    typescript: \"^4.9.3\"\n                }\n            })\n        },\n        \"/tsconfig.json\": {\n            code: JSON.stringify({\n                compilerOptions: {\n                    target: \"esnext\",\n                    module: \"esnext\",\n                    strict: true,\n                    jsx: \"preserve\",\n                    moduleResolution: \"node\",\n                    experimentalDecorators: true,\n                    skipLibCheck: true,\n                    esModuleInterop: true,\n                    allowSyntheticDefaultImports: true,\n                    forceConsistentCasingInFileNames: true,\n                    useDefineForClassFields: true,\n                    sourceMap: false,\n                    baseUrl: \".\",\n                    types: [\n                        \"webpack-env\"\n                    ],\n                    paths: {\n                        \"@/*\": [\n                            \"src/*\"\n                        ]\n                    },\n                    lib: [\n                        \"esnext\",\n                        \"dom\",\n                        \"dom.iterable\",\n                        \"scripthost\"\n                    ]\n                },\n                include: [\n                    \"src/**/*.ts\",\n                    \"src/**/*.tsx\",\n                    \"src/**/*.vue\",\n                    \"tests/**/*.ts\",\n                    \"tests/**/*.tsx\"\n                ],\n                exclude: [\n                    \"node_modules\"\n                ]\n            })\n        }\n    },\n    main: \"/src/App.vue\",\n    environment: \"vue-cli\"\n};\nvar STATIC_TEMPLATE = {\n    files: __assign(__assign({}, commonFiles), {\n        \"/index.html\": {\n            code: \"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <title>Parcel Sandbox</title>\\n  <meta charset=\\\"UTF-8\\\" />\\n  <link rel=\\\"stylesheet\\\" href=\\\"/styles.css\\\" />\\n</head>\\n\\n<body>\\n  <h1>Hello world</h1>\\n</body>\\n\\n</html>\"\n        },\n        \"/package.json\": {\n            code: JSON.stringify({\n                dependencies: {},\n                main: \"/index.html\"\n            })\n        }\n    }),\n    main: \"/index.html\",\n    environment: \"static\"\n};\nvar SANDBOX_TEMPLATES = {\n    static: STATIC_TEMPLATE,\n    angular: ANGULAR_TEMPLATE,\n    react: REACT_TEMPLATE,\n    \"react-ts\": REACT_TYPESCRIPT_TEMPLATE,\n    solid: SOLID_TEMPLATE,\n    svelte: SVELTE_TEMPLATE,\n    \"test-ts\": TEST_TYPESCRIPT_TEMPLATE,\n    \"vanilla-ts\": VANILLA_TYPESCRIPT_TEMPLATE,\n    vanilla: VANILLA_TEMPLATE,\n    vue: VUE_TEMPLATE,\n    \"vue-ts\": VUE_TS_TEMPLATE,\n    node: NODE_TEMPLATE,\n    nextjs: NEXTJS_TEMPLATE,\n    vite: VITE_TEMPLATE,\n    \"vite-react\": VITE_REACT_TEMPLATE,\n    \"vite-react-ts\": VITE_REACT_TS_TEMPLATE,\n    \"vite-preact\": VITE_PREACT_TEMPLATE,\n    \"vite-preact-ts\": VITE_PREACT_TS_TEMPLATE,\n    \"vite-vue\": VITE_VUE_TEMPLATE,\n    \"vite-vue-ts\": VITE_VUE_TS_TEMPLATE,\n    \"vite-svelte\": VITE_SVELTE_TEMPLATE,\n    \"vite-svelte-ts\": VITE_SVELTE_TS_TEMPLATE,\n    astro: ASTRO_TEMPLATE\n};\n/**\n * Creates a standard sandpack state given the setup,\n * options, and files props. Using this function is\n * the reliable way to ensure a consistent and predictable\n * sandpack-content throughout application\n */ var getSandpackStateFromProps = function(props) {\n    var _a, _b, _c, _d, _e, _f;\n    var normalizedFilesPath = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)(props.files);\n    // Merge predefined template with custom setup\n    var projectSetup = combineTemplateFilesToSetup({\n        template: props.template,\n        customSetup: props.customSetup,\n        files: normalizedFilesPath\n    });\n    // visibleFiles and activeFile override the setup flags\n    var visibleFiles = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)((_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.visibleFiles) !== null && _b !== void 0 ? _b : []);\n    var activeFile = ((_c = props.options) === null || _c === void 0 ? void 0 : _c.activeFile) ? resolveFile((_d = props.options) === null || _d === void 0 ? void 0 : _d.activeFile, projectSetup.files) : undefined;\n    if (visibleFiles.length === 0 && normalizedFilesPath) {\n        // extract open and active files from the custom input files\n        Object.keys(normalizedFilesPath).forEach(function(filePath) {\n            var file = normalizedFilesPath[filePath];\n            if (typeof file === \"string\") {\n                visibleFiles.push(filePath);\n                return;\n            }\n            if (!activeFile && file.active) {\n                activeFile = filePath;\n                if (file.hidden === true) {\n                    // active file needs to be available even if someone sets it as hidden by accident\n                    visibleFiles.push(filePath);\n                }\n            }\n            if (!file.hidden) {\n                visibleFiles.push(filePath);\n            }\n        });\n    }\n    if (visibleFiles.length === 0) {\n        // If no files are received, use the project setup / template\n        visibleFiles = [\n            projectSetup.main\n        ];\n    }\n    // Make sure it resolves the entry file\n    if (projectSetup.entry && !projectSetup.files[projectSetup.entry]) {\n        /* eslint-disable */ // @ts-ignore\n        projectSetup.entry = resolveFile(projectSetup.entry, projectSetup.files);\n    /* eslint-enable */ }\n    if (!activeFile && projectSetup.main) {\n        activeFile = projectSetup.main;\n    }\n    // If no activeFile is specified, use the first open file\n    if (!activeFile || !projectSetup.files[activeFile]) {\n        activeFile = visibleFiles[0];\n    }\n    // If for whatever reason the active path was not set as open, set it\n    if (!visibleFiles.includes(activeFile)) {\n        visibleFiles.push(activeFile);\n    }\n    var files = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.d)(projectSetup.files, (_e = projectSetup.dependencies) !== null && _e !== void 0 ? _e : {}, (_f = projectSetup.devDependencies) !== null && _f !== void 0 ? _f : {}, projectSetup.entry);\n    var existOpenPath = visibleFiles.filter(function(path) {\n        return files[path];\n    });\n    return {\n        visibleFiles: existOpenPath,\n        /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */ activeFile: activeFile,\n        files: files,\n        environment: projectSetup.environment,\n        shouldUpdatePreview: true\n    };\n};\n/**\n * Given a file tree and a file, it uses a couple of rules\n * to tweak the filename to match with one of the inside of file tree\n *\n * - Adds the leading slash;\n * - Tries to find the same filename with different extensions (js only);\n * - Returns `null` if it doesn't satisfy any rule\n */ var resolveFile = function(path, files) {\n    var normalizedFilesPath = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)(files);\n    var normalizedPath = (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)(path);\n    if (normalizedPath in normalizedFilesPath) {\n        return normalizedPath;\n    }\n    if (!path) {\n        return null;\n    }\n    var resolvedPath = null;\n    var index = 0;\n    var strategies = [\n        \".js\",\n        \".jsx\",\n        \".ts\",\n        \".tsx\"\n    ];\n    while(!resolvedPath && index < strategies.length){\n        var removeExtension = normalizedPath.split(\".\")[0];\n        var attemptPath = \"\".concat(removeExtension).concat(strategies[index]);\n        if (normalizedFilesPath[attemptPath] !== undefined) {\n            resolvedPath = attemptPath;\n        }\n        index++;\n    }\n    return resolvedPath;\n};\n/**\n * The template is predefined (eg: react, vue, vanilla)\n * The setup can overwrite anything from the template\n * (eg: files, dependencies, environment, etc.)\n */ var combineTemplateFilesToSetup = function(_a) {\n    var files = _a.files, template = _a.template, customSetup = _a.customSetup;\n    if (!template) {\n        // If not input, default to vanilla\n        if (!customSetup) {\n            var defaultTemplate = SANDBOX_TEMPLATES.vanilla;\n            return __assign(__assign({}, defaultTemplate), {\n                files: __assign(__assign({}, defaultTemplate.files), convertedFilesToBundlerFiles(files))\n            });\n        }\n        if (!files || Object.keys(files).length === 0) {\n            throw new Error(\"[sandpack-react]: without a template, you must pass at least one file\");\n        }\n        // If not template specified, use the setup entirely\n        return __assign(__assign({}, customSetup), {\n            files: convertedFilesToBundlerFiles(files)\n        });\n    }\n    var baseTemplate = SANDBOX_TEMPLATES[template];\n    if (!baseTemplate) {\n        throw new Error(\"[sandpack-react]: invalid template \\\"\".concat(template, \"\\\" provided\"));\n    }\n    // If no setup and not files, the template is used entirely\n    if (!customSetup && !files) {\n        return baseTemplate;\n    }\n    // Merge the setup on top of the template\n    return {\n        /**\n         * The input setup might have files in the simple form Record<string, string>\n         * so we convert them to the sandbox template format\n         */ files: convertedFilesToBundlerFiles(__assign(__assign({}, baseTemplate.files), files)),\n        /**\n         * Merge template dependencies and user custom dependencies.\n         * As a rule, the custom dependencies must overwrite the template ones.\n         */ dependencies: __assign(__assign({}, baseTemplate.dependencies), customSetup === null || customSetup === void 0 ? void 0 : customSetup.dependencies),\n        devDependencies: __assign(__assign({}, baseTemplate.devDependencies), customSetup === null || customSetup === void 0 ? void 0 : customSetup.devDependencies),\n        entry: (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)(customSetup === null || customSetup === void 0 ? void 0 : customSetup.entry),\n        main: baseTemplate.main,\n        environment: (customSetup === null || customSetup === void 0 ? void 0 : customSetup.environment) || baseTemplate.environment\n    };\n};\n/**\n * Transform an regular object, which contain files to\n * an object that sandpack-client can understand\n *\n * From: Record<string, string>\n * To: Record<string, { code: string }>\n */ var convertedFilesToBundlerFiles = function(files) {\n    if (!files) return {};\n    return Object.keys(files).reduce(function(acc, key) {\n        if (typeof files[key] === \"string\") {\n            acc[key] = {\n                code: files[key]\n            };\n        } else {\n            acc[key] = files[key];\n        }\n        return acc;\n    }, {});\n};\nvar useAppState = function(props, files) {\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        editorState: \"pristine\"\n    }), state = _a[0], setState = _a[1];\n    var originalStateFromProps = getSandpackStateFromProps(props);\n    var editorState = (0,dequal__WEBPACK_IMPORTED_MODULE_2__.dequal)(originalStateFromProps.files, files) ? \"pristine\" : \"dirty\";\n    if (editorState !== state.editorState) {\n        setState(function(prev) {\n            return __assign(__assign({}, prev), {\n                editorState: editorState\n            });\n        });\n    }\n    return state;\n};\nvar useSandpackId = function() {\n    if (typeof react__WEBPACK_IMPORTED_MODULE_1__.useId === \"function\") {\n        /* eslint-disable-next-line */ return (0,react__WEBPACK_IMPORTED_MODULE_1__.useId)();\n    } else {\n        return generateRandomId();\n    }\n};\n/**\n * This is a hard constraint to make URLs shorter.\n * For example, this id will be used to mount SW in the iframe\n * so, to keep the URL valid, this must be an 9 character long string\n */ var MAX_ID_LENGTH = 9;\nvar sandpackClientVersion = \"2.19.8\";\nvar useAsyncSandpackId = function(files) {\n    if (typeof react__WEBPACK_IMPORTED_MODULE_1__.useId === \"function\") {\n        /* eslint-disable-next-line react-hooks/rules-of-hooks */ var reactDomId_1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useId)();\n        return function() {\n            return __awaiter(void 0, void 0, void 0, function() {\n                var allCode, sha;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            allCode = Object.entries(files).map(function(path, code) {\n                                return path + \"|\" + code;\n                            }).join(\"|||\");\n                            return [\n                                4 /*yield*/ ,\n                                generateShortId(allCode + reactDomId_1 + sandpackClientVersion)\n                            ];\n                        case 1:\n                            sha = _a.sent();\n                            return [\n                                2 /*return*/ ,\n                                ensureLength(sha.replace(/:/g, \"sp\").replace(/[^a-zA-Z]/g, \"\"), MAX_ID_LENGTH)\n                            ];\n                    }\n                });\n            });\n        };\n    } else {\n        return function() {\n            return ensureLength(generateRandomId(), MAX_ID_LENGTH);\n        };\n    }\n};\nfunction ensureLength(str, length) {\n    if (str.length > length) {\n        return str.slice(0, length);\n    } else {\n        return str.padEnd(length, \"s\");\n    }\n}\nfunction generateShortId(input) {\n    return __awaiter(this, void 0, void 0, function() {\n        var encoder, data, hashBuffer, hashArray;\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    encoder = new TextEncoder();\n                    data = encoder.encode(input);\n                    return [\n                        4 /*yield*/ ,\n                        crypto.subtle.digest(\"SHA-256\", data)\n                    ];\n                case 1:\n                    hashBuffer = _a.sent();\n                    hashArray = Array.from(new Uint8Array(hashBuffer));\n                    return [\n                        2 /*return*/ ,\n                        btoa(String.fromCharCode.apply(String, hashArray))\n                    ];\n            }\n        });\n    });\n}\nvar BUNDLER_TIMEOUT = 40000;\nvar useClient = function(_a, filesState) {\n    var _b, _c, _d;\n    var options = _a.options, customSetup = _a.customSetup, teamId = _a.teamId, sandboxId = _a.sandboxId;\n    options !== null && options !== void 0 ? options : options = {};\n    customSetup !== null && customSetup !== void 0 ? customSetup : customSetup = {};\n    var initModeFromProps = (options === null || options === void 0 ? void 0 : options.initMode) || \"lazy\";\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        startRoute: options === null || options === void 0 ? void 0 : options.startRoute,\n        bundlerState: undefined,\n        error: null,\n        initMode: initModeFromProps,\n        reactDevTools: undefined,\n        status: ((_b = options === null || options === void 0 ? void 0 : options.autorun) !== null && _b !== void 0 ? _b : true) ? \"initial\" : \"idle\"\n    }), state = _e[0], setState = _e[1];\n    var intersectionObserverCallback = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    var intersectionObserver = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var lazyAnchorRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var registeredIframes = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    var clients = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    var timeoutHook = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var unsubscribeClientListeners = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    var unsubscribe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    var queuedListeners = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        global: {}\n    });\n    var debounceHook = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    var prevEnvironment = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(filesState.environment);\n    var asyncSandpackId = useAsyncSandpackId(filesState.files);\n    /**\n     * Callbacks\n     */ var createClient = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"useClient.useCallback[createClient]\": function(iframe, clientId, clientPropsOverride) {\n            return __awaiter(void 0, void 0, void 0, {\n                \"useClient.useCallback[createClient]\": function() {\n                    var timeOut, shouldSetTimeout, getStableServiceWorkerId, client, _a, _b, globalListeners;\n                    var _c;\n                    var _d, _e, _f;\n                    return __generator(this, {\n                        \"useClient.useCallback[createClient]\": function(_g) {\n                            switch(_g.label){\n                                case 0:\n                                    // Clean up any existing clients that\n                                    // have been created with the given id\n                                    if (clients.current[clientId]) {\n                                        clients.current[clientId].destroy();\n                                    }\n                                    options !== null && options !== void 0 ? options : options = {};\n                                    customSetup !== null && customSetup !== void 0 ? customSetup : customSetup = {};\n                                    timeOut = (_d = options === null || options === void 0 ? void 0 : options.bundlerTimeOut) !== null && _d !== void 0 ? _d : BUNDLER_TIMEOUT;\n                                    if (timeoutHook.current) {\n                                        clearTimeout(timeoutHook.current);\n                                    }\n                                    shouldSetTimeout = typeof unsubscribe.current !== \"function\";\n                                    if (shouldSetTimeout) {\n                                        timeoutHook.current = setTimeout({\n                                            \"useClient.useCallback[createClient]\": function() {\n                                                unregisterAllClients();\n                                                setState({\n                                                    \"useClient.useCallback[createClient]\": function(prev) {\n                                                        return __assign(__assign({}, prev), {\n                                                            status: \"timeout\"\n                                                        });\n                                                    }\n                                                }[\"useClient.useCallback[createClient]\"]);\n                                            }\n                                        }[\"useClient.useCallback[createClient]\"], timeOut);\n                                    }\n                                    getStableServiceWorkerId = ({\n                                        \"useClient.useCallback[createClient]\": function() {\n                                            return __awaiter(void 0, void 0, void 0, {\n                                                \"useClient.useCallback[createClient]\": function() {\n                                                    var key, fixedId;\n                                                    return __generator(this, {\n                                                        \"useClient.useCallback[createClient]\": function(_a) {\n                                                            switch(_a.label){\n                                                                case 0:\n                                                                    if (!(options === null || options === void 0 ? void 0 : options.experimental_enableStableServiceWorkerId)) return [\n                                                                        3 /*break*/ ,\n                                                                        3\n                                                                    ];\n                                                                    key = \"SANDPACK_INTERNAL:URL-CONSISTENT-ID\";\n                                                                    fixedId = localStorage.getItem(key);\n                                                                    if (!!fixedId) return [\n                                                                        3 /*break*/ ,\n                                                                        2\n                                                                    ];\n                                                                    return [\n                                                                        4 /*yield*/ ,\n                                                                        asyncSandpackId()\n                                                                    ];\n                                                                case 1:\n                                                                    fixedId = _a.sent();\n                                                                    localStorage.setItem(key, fixedId);\n                                                                    _a.label = 2;\n                                                                case 2:\n                                                                    return [\n                                                                        2 /*return*/ ,\n                                                                        fixedId\n                                                                    ];\n                                                                case 3:\n                                                                    return [\n                                                                        4 /*yield*/ ,\n                                                                        asyncSandpackId()\n                                                                    ];\n                                                                case 4:\n                                                                    return [\n                                                                        2 /*return*/ ,\n                                                                        _a.sent()\n                                                                    ];\n                                                            }\n                                                        }\n                                                    }[\"useClient.useCallback[createClient]\"]);\n                                                }\n                                            }[\"useClient.useCallback[createClient]\"]);\n                                        }\n                                    })[\"useClient.useCallback[createClient]\"];\n                                    _a = _codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_10__.loadSandpackClient;\n                                    _b = [\n                                        iframe,\n                                        {\n                                            files: filesState.files,\n                                            template: filesState.environment\n                                        }\n                                    ];\n                                    _c = {\n                                        externalResources: options.externalResources,\n                                        bundlerURL: options.bundlerURL,\n                                        startRoute: (_e = clientPropsOverride === null || clientPropsOverride === void 0 ? void 0 : clientPropsOverride.startRoute) !== null && _e !== void 0 ? _e : options.startRoute,\n                                        fileResolver: options.fileResolver,\n                                        skipEval: (_f = options.skipEval) !== null && _f !== void 0 ? _f : false,\n                                        logLevel: options.logLevel,\n                                        showOpenInCodeSandbox: false,\n                                        showErrorScreen: true,\n                                        showLoadingScreen: false,\n                                        reactDevTools: state.reactDevTools,\n                                        customNpmRegistries: customSetup === null || customSetup === void 0 ? void 0 : customSetup.npmRegistries,\n                                        teamId: teamId,\n                                        experimental_enableServiceWorker: !!(options === null || options === void 0 ? void 0 : options.experimental_enableServiceWorker)\n                                    };\n                                    return [\n                                        4 /*yield*/ ,\n                                        getStableServiceWorkerId()\n                                    ];\n                                case 1:\n                                    return [\n                                        4 /*yield*/ ,\n                                        _a.apply(void 0, _b.concat([\n                                            (_c.experimental_stableServiceWorkerId = _g.sent(), _c.sandboxId = sandboxId, _c)\n                                        ]))\n                                    ];\n                                case 2:\n                                    client = _g.sent();\n                                    if (typeof unsubscribe.current !== \"function\") {\n                                        unsubscribe.current = client.listen(handleMessage);\n                                    }\n                                    unsubscribeClientListeners.current[clientId] = unsubscribeClientListeners.current[clientId] || {};\n                                    /**\n                     * Register any potential listeners that subscribed before sandpack ran\n                     */ if (queuedListeners.current[clientId]) {\n                                        Object.keys(queuedListeners.current[clientId]).forEach({\n                                            \"useClient.useCallback[createClient]\": function(listenerId) {\n                                                var listener = queuedListeners.current[clientId][listenerId];\n                                                var unsubscribe = client.listen(listener);\n                                                unsubscribeClientListeners.current[clientId][listenerId] = unsubscribe;\n                                            }\n                                        }[\"useClient.useCallback[createClient]\"]);\n                                        // Clear the queued listeners after they were registered\n                                        queuedListeners.current[clientId] = {};\n                                    }\n                                    globalListeners = Object.entries(queuedListeners.current.global);\n                                    globalListeners.forEach({\n                                        \"useClient.useCallback[createClient]\": function(_a) {\n                                            var listenerId = _a[0], listener = _a[1];\n                                            var unsubscribe = client.listen(listener);\n                                            unsubscribeClientListeners.current[clientId][listenerId] = unsubscribe;\n                                        /**\n                         * Important: Do not clean the global queue\n                         * Instead of cleaning the queue, keep it there for the\n                         * following clients that might be created\n                         */ }\n                                    }[\"useClient.useCallback[createClient]\"]);\n                                    clients.current[clientId] = client;\n                                    return [\n                                        2 /*return*/ \n                                    ];\n                            }\n                        }\n                    }[\"useClient.useCallback[createClient]\"]);\n                }\n            }[\"useClient.useCallback[createClient]\"]);\n        }\n    }[\"useClient.useCallback[createClient]\"], [\n        filesState.environment,\n        filesState.files,\n        state.reactDevTools\n    ]);\n    var unregisterAllClients = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"useClient.useCallback[unregisterAllClients]\": function() {\n            Object.keys(clients.current).map(unregisterBundler);\n            if (typeof unsubscribe.current === \"function\") {\n                unsubscribe.current();\n                unsubscribe.current = undefined;\n            }\n        }\n    }[\"useClient.useCallback[unregisterAllClients]\"], []);\n    var runSandpack = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"useClient.useCallback[runSandpack]\": function() {\n            return __awaiter(void 0, void 0, void 0, {\n                \"useClient.useCallback[runSandpack]\": function() {\n                    return __generator(this, {\n                        \"useClient.useCallback[runSandpack]\": function(_a) {\n                            switch(_a.label){\n                                case 0:\n                                    return [\n                                        4 /*yield*/ ,\n                                        Promise.all(Object.entries(registeredIframes.current).map({\n                                            \"useClient.useCallback[runSandpack]\": function(_a) {\n                                                var clientId = _a[0], _b = _a[1], iframe = _b.iframe, _c = _b.clientPropsOverride, clientPropsOverride = _c === void 0 ? {} : _c;\n                                                return __awaiter(void 0, void 0, void 0, {\n                                                    \"useClient.useCallback[runSandpack]\": function() {\n                                                        return __generator(this, {\n                                                            \"useClient.useCallback[runSandpack]\": function(_d) {\n                                                                switch(_d.label){\n                                                                    case 0:\n                                                                        return [\n                                                                            4 /*yield*/ ,\n                                                                            createClient(iframe, clientId, clientPropsOverride)\n                                                                        ];\n                                                                    case 1:\n                                                                        _d.sent();\n                                                                        return [\n                                                                            2 /*return*/ \n                                                                        ];\n                                                                }\n                                                            }\n                                                        }[\"useClient.useCallback[runSandpack]\"]);\n                                                    }\n                                                }[\"useClient.useCallback[runSandpack]\"]);\n                                            }\n                                        }[\"useClient.useCallback[runSandpack]\"]))\n                                    ];\n                                case 1:\n                                    _a.sent();\n                                    setState({\n                                        \"useClient.useCallback[runSandpack]\": function(prev) {\n                                            return __assign(__assign({}, prev), {\n                                                error: null,\n                                                status: \"running\"\n                                            });\n                                        }\n                                    }[\"useClient.useCallback[runSandpack]\"]);\n                                    return [\n                                        2 /*return*/ \n                                    ];\n                            }\n                        }\n                    }[\"useClient.useCallback[runSandpack]\"]);\n                }\n            }[\"useClient.useCallback[runSandpack]\"]);\n        }\n    }[\"useClient.useCallback[runSandpack]\"], [\n        createClient\n    ]);\n    intersectionObserverCallback.current = function(entries) {\n        if (entries.some(function(entry) {\n            return entry.isIntersecting;\n        })) {\n            runSandpack();\n        } else {\n            unregisterAllClients();\n        }\n    };\n    var initializeSandpackIframe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"useClient.useCallback[initializeSandpackIframe]\": function() {\n            var _a, _b, _c;\n            var autorun = (_a = options === null || options === void 0 ? void 0 : options.autorun) !== null && _a !== void 0 ? _a : true;\n            if (!autorun) {\n                return;\n            }\n            var observerOptions = (_b = options === null || options === void 0 ? void 0 : options.initModeObserverOptions) !== null && _b !== void 0 ? _b : {\n                rootMargin: \"1000px 0px\"\n            };\n            if (intersectionObserver.current && lazyAnchorRef.current) {\n                (_c = intersectionObserver.current) === null || _c === void 0 ? void 0 : _c.unobserve(lazyAnchorRef.current);\n            }\n            if (lazyAnchorRef.current && state.initMode === \"lazy\") {\n                // If any component registered a lazy anchor ref component, use that for the intersection observer\n                intersectionObserver.current = new IntersectionObserver({\n                    \"useClient.useCallback[initializeSandpackIframe]\": function(entries) {\n                        var _a, _b;\n                        if (entries.some({\n                            \"useClient.useCallback[initializeSandpackIframe]\": function(entry) {\n                                return entry.isIntersecting;\n                            }\n                        }[\"useClient.useCallback[initializeSandpackIframe]\"])) {\n                            // Trigger it once\n                            if (entries.some({\n                                \"useClient.useCallback[initializeSandpackIframe]\": function(entry) {\n                                    return entry.isIntersecting;\n                                }\n                            }[\"useClient.useCallback[initializeSandpackIframe]\"]) && lazyAnchorRef.current) {\n                                (_a = intersectionObserverCallback.current) === null || _a === void 0 ? void 0 : _a.call(intersectionObserverCallback, entries);\n                                (_b = intersectionObserver.current) === null || _b === void 0 ? void 0 : _b.unobserve(lazyAnchorRef.current);\n                            }\n                        }\n                    }\n                }[\"useClient.useCallback[initializeSandpackIframe]\"], observerOptions);\n                intersectionObserver.current.observe(lazyAnchorRef.current);\n            } else if (lazyAnchorRef.current && state.initMode === \"user-visible\") {\n                intersectionObserver.current = new IntersectionObserver({\n                    \"useClient.useCallback[initializeSandpackIframe]\": function(entries) {\n                        var _a;\n                        (_a = intersectionObserverCallback.current) === null || _a === void 0 ? void 0 : _a.call(intersectionObserverCallback, entries);\n                    }\n                }[\"useClient.useCallback[initializeSandpackIframe]\"], observerOptions);\n                intersectionObserver.current.observe(lazyAnchorRef.current);\n            } else {\n                runSandpack();\n            }\n        }\n    }[\"useClient.useCallback[initializeSandpackIframe]\"], [\n        options === null || options === void 0 ? void 0 : options.autorun,\n        options === null || options === void 0 ? void 0 : options.initModeObserverOptions,\n        runSandpack,\n        state.initMode,\n        unregisterAllClients\n    ]);\n    var registerBundler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"useClient.useCallback[registerBundler]\": function(iframe, clientId, clientPropsOverride) {\n            return __awaiter(void 0, void 0, void 0, {\n                \"useClient.useCallback[registerBundler]\": function() {\n                    return __generator(this, {\n                        \"useClient.useCallback[registerBundler]\": function(_a) {\n                            switch(_a.label){\n                                case 0:\n                                    // Store the iframe info so it can be\n                                    // used later to manually run sandpack\n                                    registeredIframes.current[clientId] = {\n                                        iframe: iframe,\n                                        clientPropsOverride: clientPropsOverride\n                                    };\n                                    if (!(state.status === \"running\")) return [\n                                        3 /*break*/ ,\n                                        2\n                                    ];\n                                    return [\n                                        4 /*yield*/ ,\n                                        createClient(iframe, clientId, clientPropsOverride)\n                                    ];\n                                case 1:\n                                    _a.sent();\n                                    _a.label = 2;\n                                case 2:\n                                    return [\n                                        2 /*return*/ \n                                    ];\n                            }\n                        }\n                    }[\"useClient.useCallback[registerBundler]\"]);\n                }\n            }[\"useClient.useCallback[registerBundler]\"]);\n        }\n    }[\"useClient.useCallback[registerBundler]\"], [\n        createClient,\n        state.status\n    ]);\n    var unregisterBundler = function(clientId) {\n        var _a, _b;\n        var client = clients.current[clientId];\n        if (client) {\n            client.destroy();\n            (_a = client.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.location.replace(\"about:blank\");\n            client.iframe.removeAttribute(\"src\");\n            delete clients.current[clientId];\n        } else {\n            delete registeredIframes.current[clientId];\n        }\n        if (timeoutHook.current) {\n            clearTimeout(timeoutHook.current);\n        }\n        var unsubscribeQueuedClients = Object.values((_b = unsubscribeClientListeners.current[clientId]) !== null && _b !== void 0 ? _b : {});\n        // Unsubscribing all listener registered\n        unsubscribeQueuedClients.forEach(function(listenerOfClient) {\n            var listenerFunctions = Object.values(listenerOfClient);\n            listenerFunctions.forEach(function(unsubscribe) {\n                return unsubscribe();\n            });\n        });\n        // Keep running if it still have clients\n        var status = Object.keys(clients.current).length > 0 ? \"running\" : \"idle\";\n        setState(function(prev) {\n            return __assign(__assign({}, prev), {\n                status: status\n            });\n        });\n    };\n    var handleMessage = function(msg) {\n        if (msg.type === \"start\") {\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    error: null\n                });\n            });\n        } else if (msg.type === \"state\") {\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    bundlerState: msg.state\n                });\n            });\n        } else if (msg.type === \"done\" && !msg.compilatonError || msg.type === \"connected\") {\n            if (timeoutHook.current) {\n                clearTimeout(timeoutHook.current);\n            }\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    error: null\n                });\n            });\n        } else if (msg.type === \"action\" && msg.action === \"show-error\") {\n            if (timeoutHook.current) {\n                clearTimeout(timeoutHook.current);\n            }\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    error: (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.e)(msg)\n                });\n            });\n        } else if (msg.type === \"action\" && msg.action === \"notification\" && msg.notificationType === \"error\") {\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    error: {\n                        message: msg.title\n                    }\n                });\n            });\n        }\n    };\n    var registerReactDevTools = function(value) {\n        setState(function(prev) {\n            return __assign(__assign({}, prev), {\n                reactDevTools: value\n            });\n        });\n    };\n    var recompileMode = (_c = options === null || options === void 0 ? void 0 : options.recompileMode) !== null && _c !== void 0 ? _c : \"delayed\";\n    var recompileDelay = (_d = options === null || options === void 0 ? void 0 : options.recompileDelay) !== null && _d !== void 0 ? _d : 200;\n    var dispatchMessage = function(message, clientId) {\n        if (state.status !== \"running\") {\n            console.warn(\"[sandpack-react]: dispatch cannot be called while in idle mode\");\n            return;\n        }\n        if (clientId) {\n            clients.current[clientId].dispatch(message);\n        } else {\n            Object.values(clients.current).forEach(function(client) {\n                client.dispatch(message);\n            });\n        }\n    };\n    var addListener = function(listener, clientId) {\n        if (clientId) {\n            if (clients.current[clientId]) {\n                var unsubscribeListener = clients.current[clientId].listen(listener);\n                return unsubscribeListener;\n            } else {\n                /**\n                 * When listeners are added before the client is instantiated, they are stored with an unique id\n                 * When the client is eventually instantiated, the listeners are registered on the spot\n                 * Their unsubscribe functions are stored in unsubscribeClientListeners for future cleanup\n                 */ var listenerId_1 = generateRandomId();\n                queuedListeners.current[clientId] = queuedListeners.current[clientId] || {};\n                unsubscribeClientListeners.current[clientId] = unsubscribeClientListeners.current[clientId] || {};\n                queuedListeners.current[clientId][listenerId_1] = listener;\n                var unsubscribeListener = function() {\n                    if (queuedListeners.current[clientId][listenerId_1]) {\n                        /**\n                         * Unsubscribe was called before the client was instantiated\n                         * common example - a component with autorun=false that unmounted\n                         */ delete queuedListeners.current[clientId][listenerId_1];\n                    } else if (unsubscribeClientListeners.current[clientId][listenerId_1]) {\n                        /**\n                         * unsubscribe was called for a listener that got added before the client was instantiated\n                         * call the unsubscribe function and remove it from memory\n                         */ unsubscribeClientListeners.current[clientId][listenerId_1]();\n                        delete unsubscribeClientListeners.current[clientId][listenerId_1];\n                    }\n                };\n                return unsubscribeListener;\n            }\n        } else {\n            // Push to the **global** queue\n            var listenerId_2 = generateRandomId();\n            queuedListeners.current.global[listenerId_2] = listener;\n            // Add to the current clients\n            var clientsList = Object.values(clients.current);\n            var currentClientUnsubscribeListeners_1 = clientsList.map(function(client) {\n                return client.listen(listener);\n            });\n            var unsubscribeListener = function() {\n                // Unsubscribing from the clients already created\n                currentClientUnsubscribeListeners_1.forEach(function(unsubscribe) {\n                    return unsubscribe();\n                });\n                delete queuedListeners.current.global[listenerId_2];\n                // Unsubscribe in case it was added later from `global`\n                Object.values(unsubscribeClientListeners.current).forEach(function(client) {\n                    var _a;\n                    (_a = client === null || client === void 0 ? void 0 : client[listenerId_2]) === null || _a === void 0 ? void 0 : _a.call(client);\n                });\n            };\n            return unsubscribeListener;\n        }\n    };\n    /**\n     * Effects\n     */ (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function watchFileChanges() {\n        if (state.status !== \"running\" || !filesState.shouldUpdatePreview) {\n            return;\n        }\n        /**\n         * When the environment changes, Sandpack needs to make sure\n         * to create a new client and the proper bundler\n         */ if (prevEnvironment.current !== filesState.environment) {\n            prevEnvironment.current = filesState.environment;\n            Object.entries(clients.current).forEach({\n                \"useClient.useEffect.watchFileChanges\": function(_a) {\n                    var key = _a[0], client = _a[1];\n                    registerBundler(client.iframe, key);\n                }\n            }[\"useClient.useEffect.watchFileChanges\"]);\n        }\n        if (recompileMode === \"immediate\") {\n            Object.values(clients.current).forEach({\n                \"useClient.useEffect.watchFileChanges\": function(client) {\n                    /**\n                 * Avoid concurrency\n                 */ if (client.status === \"done\") {\n                        client.updateSandbox({\n                            files: filesState.files,\n                            template: filesState.environment\n                        });\n                    }\n                }\n            }[\"useClient.useEffect.watchFileChanges\"]);\n        }\n        if (recompileMode === \"delayed\") {\n            if (true) return;\n            window.clearTimeout(debounceHook.current);\n            debounceHook.current = window.setTimeout({\n                \"useClient.useEffect.watchFileChanges\": function() {\n                    Object.values(clients.current).forEach({\n                        \"useClient.useEffect.watchFileChanges\": function(client) {\n                            /**\n                     * Avoid concurrency\n                     */ if (client.status === \"done\") {\n                                client.updateSandbox({\n                                    files: filesState.files,\n                                    template: filesState.environment\n                                });\n                            }\n                        }\n                    }[\"useClient.useEffect.watchFileChanges\"]);\n                }\n            }[\"useClient.useEffect.watchFileChanges\"], recompileDelay);\n        }\n        return ({\n            \"useClient.useEffect.watchFileChanges\": function() {\n                window.clearTimeout(debounceHook.current);\n            }\n        })[\"useClient.useEffect.watchFileChanges\"];\n    }, [\n        filesState.files,\n        filesState.environment,\n        filesState.shouldUpdatePreview,\n        recompileDelay,\n        recompileMode,\n        registerBundler,\n        state.status\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function watchInitMode() {\n        if (initModeFromProps !== state.initMode) {\n            setState({\n                \"useClient.useEffect.watchInitMode\": function(prev) {\n                    return __assign(__assign({}, prev), {\n                        initMode: initModeFromProps\n                    });\n                }\n            }[\"useClient.useEffect.watchInitMode\"]);\n            initializeSandpackIframe();\n        }\n    }, [\n        initModeFromProps,\n        initializeSandpackIframe,\n        state.initMode\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"useClient.useEffect\": function() {\n            return function unmountClient() {\n                if (typeof unsubscribe.current === \"function\") {\n                    unsubscribe.current();\n                }\n                if (timeoutHook.current) {\n                    clearTimeout(timeoutHook.current);\n                }\n                if (debounceHook.current) {\n                    clearTimeout(debounceHook.current);\n                }\n                if (intersectionObserver.current) {\n                    intersectionObserver.current.disconnect();\n                }\n            };\n        }\n    }[\"useClient.useEffect\"], []);\n    return [\n        state,\n        {\n            clients: clients.current,\n            initializeSandpackIframe: initializeSandpackIframe,\n            runSandpack: runSandpack,\n            registerBundler: registerBundler,\n            unregisterBundler: unregisterBundler,\n            registerReactDevTools: registerReactDevTools,\n            addListener: addListener,\n            dispatchMessage: dispatchMessage,\n            lazyAnchorRef: lazyAnchorRef,\n            unsubscribeClientListenersRef: unsubscribeClientListeners,\n            queuedListenersRef: queuedListeners\n        }\n    ];\n};\nvar useFiles = function(props) {\n    var originalStateFromProps = getSandpackStateFromProps(props);\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(originalStateFromProps), state = _a[0], setState = _a[1];\n    var isMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"useFiles.useEffect\": function() {\n            if (isMountedRef.current) {\n                setState(getSandpackStateFromProps(props));\n            } else {\n                isMountedRef.current = true;\n            }\n        }\n    }[\"useFiles.useEffect\"], [\n        props.files,\n        props.customSetup,\n        props.template\n    ]);\n    var updateFile = function(pathOrFiles, code, shouldUpdatePreview) {\n        if (shouldUpdatePreview === void 0) {\n            shouldUpdatePreview = true;\n        }\n        setState(function(prev) {\n            var _a;\n            var files = prev.files;\n            if (typeof pathOrFiles === \"string\" && typeof code === \"string\") {\n                files = __assign(__assign({}, files), (_a = {}, _a[pathOrFiles] = __assign(__assign({}, files[pathOrFiles]), {\n                    code: code\n                }), _a));\n            } else if (typeof pathOrFiles === \"object\") {\n                files = __assign(__assign({}, files), convertedFilesToBundlerFiles(pathOrFiles));\n            }\n            return __assign(__assign({}, prev), {\n                files: (0,_codesandbox_sandpack_client__WEBPACK_IMPORTED_MODULE_9__.f)(files),\n                shouldUpdatePreview: shouldUpdatePreview\n            });\n        });\n    };\n    var operations = {\n        openFile: function(path) {\n            setState(function(_a) {\n                var visibleFiles = _a.visibleFiles, rest = __rest(_a, [\n                    \"visibleFiles\"\n                ]);\n                var newPaths = visibleFiles.includes(path) ? visibleFiles : __spreadArray(__spreadArray([], visibleFiles, true), [\n                    path\n                ], false);\n                return __assign(__assign({}, rest), {\n                    activeFile: path,\n                    visibleFiles: newPaths\n                });\n            });\n        },\n        resetFile: function(path) {\n            setState(function(prevState) {\n                var _a;\n                return __assign(__assign({}, prevState), {\n                    files: __assign(__assign({}, prevState.files), (_a = {}, _a[path] = originalStateFromProps.files[path], _a))\n                });\n            });\n        },\n        resetAllFiles: function() {\n            setState(function(prev) {\n                return __assign(__assign({}, prev), {\n                    files: originalStateFromProps.files\n                });\n            });\n        },\n        setActiveFile: function(activeFile) {\n            if (state.files[activeFile]) {\n                setState(function(prev) {\n                    return __assign(__assign({}, prev), {\n                        activeFile: activeFile\n                    });\n                });\n            }\n        },\n        updateCurrentFile: function(code, shouldUpdatePreview) {\n            if (shouldUpdatePreview === void 0) {\n                shouldUpdatePreview = true;\n            }\n            updateFile(state.activeFile, code, shouldUpdatePreview);\n        },\n        updateFile: updateFile,\n        addFile: updateFile,\n        closeFile: function(path) {\n            if (state.visibleFiles.length === 1) {\n                return;\n            }\n            setState(function(_a) {\n                var visibleFiles = _a.visibleFiles, activeFile = _a.activeFile, prev = __rest(_a, [\n                    \"visibleFiles\",\n                    \"activeFile\"\n                ]);\n                var indexOfRemovedPath = visibleFiles.indexOf(path);\n                var newPaths = visibleFiles.filter(function(openPath) {\n                    return openPath !== path;\n                });\n                return __assign(__assign({}, prev), {\n                    activeFile: path === activeFile ? indexOfRemovedPath === 0 ? visibleFiles[1] : visibleFiles[indexOfRemovedPath - 1] : activeFile,\n                    visibleFiles: newPaths\n                });\n            });\n        },\n        deleteFile: function(path, shouldUpdatePreview) {\n            if (shouldUpdatePreview === void 0) {\n                shouldUpdatePreview = true;\n            }\n            setState(function(_a) {\n                var visibleFiles = _a.visibleFiles, files = _a.files, activeFile = _a.activeFile, rest = __rest(_a, [\n                    \"visibleFiles\",\n                    \"files\",\n                    \"activeFile\"\n                ]);\n                var newFiles = __assign({}, files);\n                delete newFiles[path];\n                var remainingVisibleFiles = visibleFiles.filter(function(openPath) {\n                    return openPath !== path;\n                });\n                var deletedLastVisibleFile = remainingVisibleFiles.length === 0;\n                if (deletedLastVisibleFile) {\n                    var nextFile = Object.keys(files)[Object.keys(files).length - 1];\n                    return __assign(__assign({}, rest), {\n                        visibleFiles: [\n                            nextFile\n                        ],\n                        activeFile: nextFile,\n                        files: newFiles,\n                        shouldUpdatePreview: shouldUpdatePreview\n                    });\n                }\n                return __assign(__assign({}, rest), {\n                    visibleFiles: remainingVisibleFiles,\n                    activeFile: path === activeFile ? remainingVisibleFiles[remainingVisibleFiles.length - 1] : activeFile,\n                    files: newFiles,\n                    shouldUpdatePreview: shouldUpdatePreview\n                });\n            });\n        }\n    };\n    return [\n        __assign(__assign({}, state), {\n            visibleFilesFromProps: originalStateFromProps.visibleFiles\n        }),\n        operations\n    ];\n};\nvar Sandpack$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(null);\nvar SandpackProvider = function(props) {\n    var _a, _b, _c;\n    var children = props.children, options = props.options, style = props.style, className = props.className, theme = props.theme;\n    var _d = useFiles(props), fileState = _d[0], fileOperations = _d[1];\n    var _e = useClient(props, fileState), clientState = _e[0], _f = _e[1], dispatchMessage = _f.dispatchMessage, addListener = _f.addListener, clientOperations = __rest(_f, [\n        \"dispatchMessage\",\n        \"addListener\"\n    ]);\n    var appState = useAppState(props, fileState.files);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SandpackProvider.useEffect\": function() {\n            clientOperations.initializeSandpackIframe();\n        }\n    }[\"SandpackProvider.useEffect\"], []);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Sandpack$1.Provider, {\n        value: __assign(__assign(__assign(__assign(__assign(__assign({}, fileState), clientState), appState), fileOperations), clientOperations), {\n            autoReload: (_b = (_a = props.options) === null || _a === void 0 ? void 0 : _a.autoReload) !== null && _b !== void 0 ? _b : true,\n            teamId: props === null || props === void 0 ? void 0 : props.teamId,\n            exportOptions: (_c = props === null || props === void 0 ? void 0 : props.customSetup) === null || _c === void 0 ? void 0 : _c.exportOptions,\n            listen: addListener,\n            dispatch: dispatchMessage\n        }),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ClassNamesProvider, {\n            classes: options === null || options === void 0 ? void 0 : options.classes,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackThemeProvider, {\n                className: className,\n                style: style,\n                theme: theme,\n                children: children\n            })\n        })\n    });\n};\n/**\n * @category Provider\n */ var SandpackConsumer = Sandpack$1.Consumer;\n/**\n * @category Hooks\n */ function useSandpack() {\n    var sandpack = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Sandpack$1);\n    if (sandpack === null) {\n        throw new Error(\"[sandpack-react]: \\\"useSandpack\\\" must be wrapped by a \\\"SandpackProvider\\\"\");\n    }\n    var dispatch = sandpack.dispatch, listen = sandpack.listen, rest = __rest(sandpack, [\n        \"dispatch\",\n        \"listen\"\n    ]);\n    return {\n        sandpack: __assign({}, rest),\n        dispatch: dispatch,\n        listen: listen\n    };\n}\n/**\n * This returns the current state of the active file\n * and a method to update its content.\n *\n * @category Hooks\n */ var useActiveCode = function() {\n    var _a, _b, _c;\n    var sandpack = useSandpack().sandpack;\n    return {\n        code: (_a = sandpack.files[sandpack.activeFile]) === null || _a === void 0 ? void 0 : _a.code,\n        readOnly: (_c = (_b = sandpack.files[sandpack.activeFile]) === null || _b === void 0 ? void 0 : _b.readOnly) !== null && _c !== void 0 ? _c : false,\n        updateCode: sandpack.updateCurrentFile\n    };\n};\nvar _a$8, _b$2, _c;\nvar iconStandaloneClassName = css({\n    svg: {\n        margin: \"auto\"\n    }\n});\nvar buttonClassName = css((_a$8 = {\n    appearance: \"none\",\n    outline: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"inherit\",\n    fontFamily: \"inherit\",\n    backgroundColor: \"transparent\",\n    transition: \"color $default, background $default\",\n    cursor: \"pointer\",\n    color: \"$colors$clickable\",\n    border: 0,\n    textDecoration: \"none\",\n    \"&:disabled\": {\n        color: \"$colors$disabled\"\n    },\n    \"&:hover:not(:disabled,[data-active='true'])\": {\n        color: \"$colors$hover\"\n    },\n    '&[data-active=\"true\"]': {\n        color: \"$colors$accent\"\n    },\n    svg: {\n        minWidth: \"$space$4\",\n        width: \"$space$4\",\n        height: \"$space$4\"\n    }\n}, _a$8[\"&.\".concat(iconStandaloneClassName)] = {\n    padding: \"$space$1\",\n    height: \"$space$7\",\n    display: \"flex\"\n}, // If there's a children besides the icon\n_a$8[\"&.\".concat(iconStandaloneClassName, \"&:not(:has(span))\")] = {\n    width: \"$space$7\"\n}, _a$8[\"&.\".concat(iconStandaloneClassName, \"&:has(svg + span)\")] = {\n    paddingRight: \"$space$3\",\n    paddingLeft: \"$space$2\",\n    gap: \"$space$1\"\n}, _a$8));\nvar roundedButtonClassName = css({\n    backgroundColor: \"$colors$surface2\",\n    borderRadius: \"99999px\",\n    border: \"1px solid $colors$surface3\",\n    '&[data-active=\"true\"]': {\n        color: \"$colors$surface1\",\n        background: \"$colors$accent\"\n    },\n    \"&:hover:not(:disabled,[data-active='true'])\": {\n        backgroundColor: \"$colors$surface3\"\n    }\n});\nvar iconClassName = css({\n    padding: 0\n});\nvar fadeIn = keyframes({\n    \"0%\": {\n        opacity: 0\n    },\n    \"100%\": {\n        opacity: 1\n    }\n});\nvar absoluteClassName = css({\n    position: \"absolute\",\n    bottom: \"0\",\n    left: \"0\",\n    right: \"0\",\n    top: \"0\",\n    margin: \"0\",\n    overflow: \"auto\",\n    height: \"100%\",\n    zIndex: \"$top\"\n});\nvar errorClassName = css((_b$2 = {\n    whiteSpace: \"pre-wrap\",\n    padding: \"$space$10\",\n    backgroundColor: \"$colors$surface1\",\n    display: \"flex\",\n    gap: \"$space$2\",\n    flexDirection: \"column\"\n}, _b$2[\".\".concat(buttonClassName)] = {\n    width: \"auto\",\n    gap: \"$space$2\",\n    padding: \"0 $space$3 0 $space$2\",\n    marginTop: \"$space$1\"\n}, _b$2.variants = {\n    solidBg: {\n        true: {\n            backgroundColor: \"$colors$errorSurface\"\n        }\n    }\n}, _b$2));\nvar errorBundlerClassName = css((_c = {\n    padding: \"$space$10\",\n    backgroundColor: \"$colors$surface1\"\n}, _c[\".\".concat(buttonClassName)] = {\n    marginTop: \"$space$6\",\n    width: \"auto\",\n    gap: \"$space$2\",\n    padding: \"0 $space$3 0 $space$2\"\n}, _c));\nvar errorMessageClassName = css({\n    animation: \"\".concat(fadeIn, \" 150ms ease\"),\n    color: \"$colors$error\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"$space$3\",\n    variants: {\n        errorCode: {\n            true: {\n                fontFamily: \"$font$mono\"\n            }\n        }\n    },\n    a: {\n        color: \"inherit\"\n    },\n    p: {\n        margin: 0\n    }\n});\nvar _a$7;\nvar tabsClassName = css({\n    borderBottom: \"1px solid $colors$surface2\",\n    background: \"$colors$surface1\"\n});\nvar tabsScrollableClassName = css({\n    padding: \"0 $space$2\",\n    overflow: \"auto\",\n    display: \"flex\",\n    flexWrap: \"nowrap\",\n    alignItems: \"stretch\",\n    minHeight: \"40px\",\n    marginBottom: \"-1px\"\n});\nvar tabContainer = css({\n    display: \"flex\",\n    alignItems: \"center\",\n    outline: \"none\",\n    position: \"relative\",\n    paddingRight: \"20px\",\n    margin: \"1px 0\",\n    \"&:has(button:focus)\": {\n        outline: \"$colors$accent auto 1px\"\n    }\n});\nvar closeButtonClassName = css({\n    padding: \"0 $space$1 0 $space$1\",\n    borderRadius: \"$border$radius\",\n    marginLeft: \"$space$1\",\n    width: \"$space$5\",\n    visibility: \"hidden\",\n    cursor: \"pointer\",\n    position: \"absolute\",\n    right: \"0px\",\n    svg: {\n        width: \"$space$3\",\n        height: \"$space$3\",\n        display: \"block\",\n        position: \"relative\",\n        top: 1\n    }\n});\nvar tabButton = css((_a$7 = {\n    padding: \"0 $space$2\",\n    height: \"$layout$headerHeight\",\n    whiteSpace: \"nowrap\",\n    \"&:focus\": {\n        outline: \"none\"\n    }\n}, _a$7[\"&:hover ~ .\".concat(closeButtonClassName)] = {\n    visibility: \"visible\"\n}, _a$7));\n/**\n * FileTabs is a list of all open files, the active file, and its state.\n */ var FileTabs = function(_a) {\n    var closableTabs = _a.closableTabs, className = _a.className, activeFileUniqueId = _a.activeFileUniqueId, props = __rest(_a, [\n        \"closableTabs\",\n        \"className\",\n        \"activeFileUniqueId\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    var classNames = useClassNames();\n    var activeFile = sandpack.activeFile, visibleFiles = sandpack.visibleFiles, setActiveFile = sandpack.setActiveFile;\n    var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), hoveredIndex = _b[0], setIsHoveredIndex = _b[1];\n    var getTriggerText = function(currentPath) {\n        var documentFileName = getFileName(currentPath);\n        var pathsWithDuplicateFileNames = visibleFiles.reduce(function(prev, curr) {\n            if (curr === currentPath) {\n                return prev;\n            }\n            var fileName = getFileName(curr);\n            if (fileName === documentFileName) {\n                prev.push(curr);\n                return prev;\n            }\n            return prev;\n        }, []);\n        if (pathsWithDuplicateFileNames.length === 0) {\n            return documentFileName;\n        } else {\n            return calculateNearestUniquePath(currentPath, pathsWithDuplicateFileNames);\n        }\n    };\n    var onKeyDown = function(_a) {\n        var _b, _c, _d, _e;\n        var e = _a.e, index = _a.index;\n        var target = e.currentTarget;\n        switch(e.key){\n            case \"ArrowLeft\":\n                {\n                    var leftSibling = target.previousElementSibling;\n                    if (leftSibling) {\n                        (_b = leftSibling.querySelector(\"button\")) === null || _b === void 0 ? void 0 : _b.focus();\n                        setActiveFile(visibleFiles[index - 1]);\n                    }\n                }\n                break;\n            case \"ArrowRight\":\n                {\n                    var rightSibling = target.nextElementSibling;\n                    if (rightSibling) {\n                        (_c = rightSibling.querySelector(\"button\")) === null || _c === void 0 ? void 0 : _c.focus();\n                        setActiveFile(visibleFiles[index + 1]);\n                    }\n                }\n                break;\n            case \"Home\":\n                {\n                    var parent_1 = target.parentElement;\n                    var firstChild = parent_1.firstElementChild;\n                    (_d = firstChild.querySelector(\"button\")) === null || _d === void 0 ? void 0 : _d.focus();\n                    setActiveFile(visibleFiles[0]);\n                    break;\n                }\n            case \"End\":\n                {\n                    var parent_2 = target.parentElement;\n                    var lastChild = parent_2.lastElementChild;\n                    (_e = lastChild.querySelector(\"button\")) === null || _e === void 0 ? void 0 : _e.focus();\n                    setActiveFile(visibleFiles[-1]);\n                    break;\n                }\n        }\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n        className: classNames(\"tabs\", [\n            tabsClassName,\n            className\n        ]),\n        translate: \"no\"\n    }, props, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            \"aria-label\": \"Select active file\",\n            className: classNames(\"tabs-scrollable-container\", [\n                tabsScrollableClassName\n            ]),\n            role: \"tablist\",\n            children: visibleFiles.map(function(filePath, index) {\n                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    \"aria-controls\": \"\".concat(filePath, \"-\").concat(activeFileUniqueId, \"-tab-panel\"),\n                    \"aria-selected\": filePath === activeFile,\n                    className: classNames(\"tab-container\", [\n                        tabContainer\n                    ]),\n                    onKeyDown: function(e) {\n                        return onKeyDown({\n                            e: e,\n                            index: index\n                        });\n                    },\n                    onMouseEnter: function() {\n                        return setIsHoveredIndex(index);\n                    },\n                    onMouseLeave: function() {\n                        return setIsHoveredIndex(null);\n                    },\n                    role: \"tab\",\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                            className: classNames(\"tab-button\", [\n                                buttonClassName,\n                                tabButton\n                            ]),\n                            \"data-active\": filePath === activeFile,\n                            id: \"\".concat(filePath, \"-\").concat(activeFileUniqueId, \"-tab\"),\n                            onClick: function() {\n                                return setActiveFile(filePath);\n                            },\n                            tabIndex: filePath === activeFile ? 0 : -1,\n                            title: filePath,\n                            type: \"button\",\n                            children: getTriggerText(filePath)\n                        }),\n                        closableTabs && visibleFiles.length > 1 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                            className: classNames(\"close-button\", [\n                                closeButtonClassName\n                            ]),\n                            onClick: function(ev) {\n                                ev.stopPropagation();\n                                sandpack.closeFile(filePath);\n                            },\n                            style: {\n                                visibility: filePath === activeFile || hoveredIndex === index ? \"visible\" : \"hidden\"\n                            },\n                            tabIndex: filePath === activeFile ? 0 : -1,\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CloseIcon, {})\n                        })\n                    ]\n                }, filePath);\n            })\n        })\n    }));\n};\nvar RoundedButton = function(_a) {\n    var onClick = _a.onClick, className = _a.className, children = _a.children;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n        className: classNames(\"button\", [\n            classNames(\"icon-standalone\"),\n            buttonClassName,\n            iconStandaloneClassName,\n            roundedButtonClassName,\n            className\n        ]),\n        onClick: onClick,\n        type: \"button\",\n        children: children\n    });\n};\nvar runButtonClassName = css({\n    position: \"absolute\",\n    bottom: \"$space$2\",\n    right: \"$space$2\",\n    paddingRight: \"$space$3\"\n});\nvar RunButton$1 = function(_a) {\n    _a.className;\n    var onClick = _a.onClick, props = __rest(_a, [\n        \"className\",\n        \"onClick\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(RoundedButton, __assign({\n        className: runButtonClassName.toString(),\n        onClick: function(event) {\n            sandpack.runSandpack();\n            onClick === null || onClick === void 0 ? void 0 : onClick(event);\n        }\n    }, props, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunIcon, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                children: \"Run\"\n            })\n        ]\n    }));\n};\nvar _a$6;\nvar stackClassName = css((_a$6 = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    position: \"relative\",\n    backgroundColor: \"$colors$surface1\",\n    gap: 1\n}, _a$6[\"&:has(.\".concat(THEME_PREFIX, \"-stack)\")] = {\n    backgroundColor: \"$colors$surface2\"\n}, _a$6));\nvar SandpackStack = function(_a) {\n    var className = _a.className, props = __rest(_a, [\n        \"className\"\n    ]);\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n        className: classNames(\"stack\", [\n            stackClassName,\n            className\n        ])\n    }, props));\n};\n/**\n * @category Hooks\n */ var useSandpackTheme = function() {\n    var _a = react__WEBPACK_IMPORTED_MODULE_1__.useContext(SandpackThemeContext), theme = _a.theme, id = _a.id, mode = _a.mode;\n    return {\n        theme: theme,\n        themeId: id,\n        themeMode: mode\n    };\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */ var shallowEqual = function(a, b) {\n    if (a.length !== b.length) return false;\n    var result = true;\n    for(var index = 0; index < a.length; index++){\n        if (a[index] !== b[index]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\nvar getCodeMirrorPosition = function(doc, _a) {\n    var line = _a.line, column = _a.column;\n    return doc.line(line).from + (column !== null && column !== void 0 ? column : 0) - 1;\n};\nvar getEditorTheme = function() {\n    return _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.EditorView.theme({\n        \"&\": {\n            backgroundColor: \"var(--\".concat(THEME_PREFIX, \"-colors-surface1)\"),\n            color: \"var(--\".concat(THEME_PREFIX, \"-syntax-color-plain)\"),\n            height: \"100%\"\n        },\n        \".cm-matchingBracket, .cm-nonmatchingBracket, &.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket\": {\n            color: \"inherit\",\n            backgroundColor: \"rgba(128,128,128,.25)\",\n            backgroundBlendMode: \"difference\"\n        },\n        \"&.cm-editor.cm-focused\": {\n            outline: \"none\"\n        },\n        \"& .cm-activeLine\": {\n            backgroundColor: \"transparent\"\n        },\n        \"&.cm-editor.cm-focused .cm-activeLine\": {\n            backgroundColor: \"var(--\".concat(THEME_PREFIX, \"-colors-surface3)\"),\n            borderRadius: \"var(--\".concat(THEME_PREFIX, \"-border-radius)\")\n        },\n        \".cm-errorLine\": {\n            backgroundColor: \"var(--\".concat(THEME_PREFIX, \"-colors-errorSurface)\"),\n            borderRadius: \"var(--\".concat(THEME_PREFIX, \"-border-radius)\")\n        },\n        \".cm-content\": {\n            caretColor: \"var(--\".concat(THEME_PREFIX, \"-colors-accent)\"),\n            padding: \"0 var(--\".concat(THEME_PREFIX, \"-space-4)\")\n        },\n        \".cm-scroller\": {\n            fontFamily: \"var(--\".concat(THEME_PREFIX, \"-font-mono)\"),\n            lineHeight: \"var(--\".concat(THEME_PREFIX, \"-font-lineHeight)\")\n        },\n        \".cm-gutters\": {\n            backgroundColor: \"var(--\".concat(THEME_PREFIX, \"-colors-surface1)\"),\n            color: \"var(--\".concat(THEME_PREFIX, \"-colors-disabled)\"),\n            border: \"none\",\n            paddingLeft: \"var(--\".concat(THEME_PREFIX, \"-space-1)\")\n        },\n        \".cm-gutter.cm-lineNumbers\": {\n            fontSize: \".6em\"\n        },\n        \".cm-lineNumbers .cm-gutterElement\": {\n            lineHeight: \"var(--\".concat(THEME_PREFIX, \"-font-lineHeight)\"),\n            minWidth: \"var(--\".concat(THEME_PREFIX, \"-space-5)\")\n        },\n        \".cm-content .cm-line\": {\n            paddingLeft: \"var(--\".concat(THEME_PREFIX, \"-space-1)\")\n        },\n        \".cm-content.cm-readonly .cm-line\": {\n            paddingLeft: 0\n        }\n    });\n};\nvar classNameToken = function(name) {\n    return \"\".concat(THEME_PREFIX, \"-syntax-\").concat(name);\n};\nvar styleTokens = function() {\n    var syntaxHighLightTokens = [\n        \"string\",\n        \"plain\",\n        \"comment\",\n        \"keyword\",\n        \"definition\",\n        \"punctuation\",\n        \"property\",\n        \"tag\",\n        \"static\"\n    ];\n    return syntaxHighLightTokens.reduce(function(acc, token) {\n        var _a;\n        return __assign(__assign({}, acc), (_a = {}, _a[\".\".concat(classNameToken(token))] = {\n            color: \"$syntax$color$\".concat(token),\n            fontStyle: \"$syntax$fontStyle$\".concat(token)\n        }, _a));\n    }, {});\n};\nvar getSyntaxHighlight = function(theme) {\n    return _codemirror_language__WEBPACK_IMPORTED_MODULE_12__.HighlightStyle.define([\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.link,\n            textDecoration: \"underline\"\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.emphasis,\n            fontStyle: \"italic\"\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.strong,\n            fontWeight: \"bold\"\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.keyword,\n            class: classNameToken(\"keyword\")\n        },\n        {\n            tag: [\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.atom,\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.number,\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.bool\n            ],\n            class: classNameToken(\"static\")\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.variableName,\n            class: classNameToken(\"plain\")\n        },\n        {\n            // Standard tags, e.g <h1 />\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.standard(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.tagName),\n            class: classNameToken(\"tag\")\n        },\n        {\n            tag: [\n                // Highlight function call\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.function(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.variableName),\n                // Highlight function definition differently (eg: functional component def in React)\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.definition(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.function(_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.variableName)),\n                // \"Custom tags\", meaning React component\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.tagName\n            ],\n            class: classNameToken(\"definition\")\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.propertyName,\n            class: classNameToken(\"property\")\n        },\n        {\n            tag: [\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.literal,\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.inserted\n            ],\n            class: classNameToken(theme.syntax.string ? \"string\" : \"static\")\n        },\n        {\n            tag: _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.punctuation,\n            class: classNameToken(\"punctuation\")\n        },\n        {\n            tag: [\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.comment,\n                _lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.tags.quote\n            ],\n            class: classNameToken(\"comment\")\n        }\n    ]);\n};\nvar getLanguageFromFile = function(filePath, fileType, additionalLanguages) {\n    if (!filePath && !fileType) return \"javascript\";\n    var extension = fileType;\n    if (!extension && filePath) {\n        var extensionDotIndex = filePath.lastIndexOf(\".\");\n        extension = filePath.slice(extensionDotIndex + 1);\n    }\n    for(var _i = 0, additionalLanguages_1 = additionalLanguages; _i < additionalLanguages_1.length; _i++){\n        var additionalLanguage = additionalLanguages_1[_i];\n        if (extension === additionalLanguage.name || additionalLanguage.extensions.includes(extension || \"\")) {\n            return additionalLanguage.name;\n        }\n    }\n    switch(extension){\n        case \"ts\":\n        case \"tsx\":\n            return \"typescript\";\n        case \"html\":\n        case \"svelte\":\n        case \"vue\":\n        case \"astro\":\n            return \"html\";\n        case \"css\":\n        case \"less\":\n        case \"scss\":\n            return \"css\";\n        case \"js\":\n        case \"jsx\":\n        case \"json\":\n        default:\n            return \"javascript\";\n    }\n};\nvar getCodeMirrorLanguage = function(extension, additionalLanguages) {\n    var options = {\n        javascript: (0,_codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_13__.javascript)({\n            jsx: true,\n            typescript: false\n        }),\n        typescript: (0,_codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_13__.javascript)({\n            jsx: true,\n            typescript: true\n        }),\n        html: (0,_codemirror_lang_html__WEBPACK_IMPORTED_MODULE_14__.html)(),\n        css: (0,_codemirror_lang_css__WEBPACK_IMPORTED_MODULE_15__.css)()\n    };\n    for(var _i = 0, additionalLanguages_2 = additionalLanguages; _i < additionalLanguages_2.length; _i++){\n        var additionalLanguage = additionalLanguages_2[_i];\n        if (extension === additionalLanguage.name) {\n            return additionalLanguage.language;\n        }\n    }\n    return options[extension];\n};\nvar useCombinedRefs = function() {\n    var refs = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        refs[_i] = arguments[_i];\n    }\n    return react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useCombinedRefs.useCallback\": function(element) {\n            return refs.forEach({\n                \"useCombinedRefs.useCallback\": function(ref) {\n                    if (!ref) {\n                        return;\n                    }\n                    // Ref can have two types - a function or an object. We treat each case.\n                    if (typeof ref === \"function\") {\n                        return ref(element);\n                    }\n                    // As per https://github.com/facebook/react/issues/13029\n                    // it should be fine to set current this way.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    ref.current = element;\n                }\n            }[\"useCombinedRefs.useCallback\"]);\n        }\n    }[\"useCombinedRefs.useCallback\"], // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs);\n};\nfunction highlightDecorators(positions) {\n    return _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.ViewPlugin.fromClass(/** @class */ function() {\n        function class_1(view) {\n            this.decorations = this.getDecoration(view);\n        }\n        class_1.prototype.update = function(update) {\n            return;\n        };\n        class_1.prototype.getDecoration = function(view) {\n            if (!positions) return _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.none;\n            var rangesDecorators = positions.map(function(item) {\n                var _a, _b, _c;\n                var lineDeco = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.line({\n                    attributes: {\n                        class: (_a = item.className) !== null && _a !== void 0 ? _a : \"\"\n                    }\n                });\n                var markDeco = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.mark({\n                    class: (_b = item.className) !== null && _b !== void 0 ? _b : \"\",\n                    attributes: (_c = item.elementAttributes) !== null && _c !== void 0 ? _c : undefined\n                });\n                var positionLineStart = getCodeMirrorPosition(view.state.doc, {\n                    line: item.line,\n                    column: item.startColumn\n                }) + 1;\n                if (item.startColumn && item.endColumn) {\n                    var positionLineEnd = getCodeMirrorPosition(view.state.doc, {\n                        line: item.line,\n                        column: item.endColumn\n                    }) + 1;\n                    return markDeco.range(positionLineStart, positionLineEnd);\n                }\n                return lineDeco.range(positionLineStart);\n            });\n            return _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.set(rangesDecorators);\n        };\n        return class_1;\n    }(), {\n        decorations: function(v) {\n            return v.decorations;\n        }\n    });\n}\nfunction highlightInlineError() {\n    return activeLineHighlighter;\n}\nvar lineDeco = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.line({\n    attributes: {\n        class: \"cm-errorLine\"\n    }\n});\nvar activeLineHighlighter = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.ViewPlugin.fromClass(/** @class */ function() {\n    function class_1() {\n        this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.none;\n    }\n    class_1.prototype.update = function(update) {\n        var _this = this;\n        update.transactions.forEach(function(trans) {\n            // @ts-ignore\n            var errorValue = trans.annotation(\"show-error\");\n            if (errorValue !== undefined) {\n                var position = getCodeMirrorPosition(update.view.state.doc, {\n                    line: errorValue\n                }) + 1;\n                _this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.set([\n                    lineDeco.range(position)\n                ]);\n            // @ts-ignore\n            } else if (trans.annotation(\"remove-errors\")) {\n                _this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.Decoration.none;\n            }\n        });\n    };\n    return class_1;\n}(), {\n    decorations: function(v) {\n        return v.decorations;\n    }\n});\nvar _a$5, _b$1;\nvar placeholderClassName = css({\n    margin: \"0\",\n    display: \"block\",\n    fontFamily: \"$font$mono\",\n    fontSize: \"$font$size\",\n    color: \"$syntax$color$plain\",\n    lineHeight: \"$font$lineHeight\"\n});\nvar tokensClassName = css(styleTokens());\nvar editorClassName = css((_a$5 = {\n    flex: 1,\n    position: \"relative\",\n    overflow: \"auto\",\n    background: \"$colors$surface1\",\n    \".cm-scroller\": {\n        padding: \"$space$4 0\"\n    }\n}, _a$5[\".\".concat(placeholderClassName)] = {\n    padding: \"$space$4 0\"\n}, /**\n     * For iOS: prevent browser zoom when clicking on sandbox.\n     * Does NOT apply to code blocks.\n     */ _a$5[\"@media screen and (max-width: 768px)\"] = {\n    \"@supports (-webkit-overflow-scrolling: touch)\": {\n        \".cm-content\": {\n            fontSize: \"16px\"\n        }\n    }\n}, _a$5));\nvar cmClassName = css({\n    margin: \"0\",\n    outline: \"none\",\n    height: \"100%\"\n});\nvar readOnlyClassName = css((_b$1 = {\n    fontFamily: \"$font$mono\",\n    fontSize: \"0.8em\",\n    position: \"absolute\",\n    right: \"$space$2\",\n    bottom: \"$space$2\",\n    zIndex: \"$top\",\n    color: \"$colors$clickable\",\n    backgroundColor: \"$colors$surface2\",\n    borderRadius: \"99999px\",\n    padding: \"calc($space$1 / 2) $space$2\"\n}, _b$1[\"& + .\".concat(buttonClassName)] = {\n    right: \"calc($space$11 * 2)\"\n}, _b$1));\nvar useSyntaxHighlight = function(_a) {\n    var langSupport = _a.langSupport, highlightTheme = _a.highlightTheme, _b = _a.code, code = _b === void 0 ? \"\" : _b;\n    var tree = langSupport.language.parser.parse(code);\n    var offSet = 0;\n    var codeElementsRender = [];\n    var addElement = function(to, className) {\n        if (to > offSet) {\n            var children = code.slice(offSet, to);\n            codeElementsRender.push(className ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"span\", {\n                children: children,\n                className: className,\n                key: \"\".concat(to).concat(offSet)\n            }) : children);\n            offSet = to;\n        }\n    };\n    (0,_lezer_highlight__WEBPACK_IMPORTED_MODULE_3__.highlightTree)(tree, highlightTheme, function(from, to, className) {\n        addElement(from, \"\");\n        addElement(to, className);\n    });\n    /**\n     * The language parse doesn't look consistent.\n     * The final syntax highlight used by CodeMirror\n     * includes an end empty line, and the parse here doesn't,\n     * so let's add it manually.\n     */ if (offSet < code.length && (code === null || code === void 0 ? void 0 : code.includes(\"\\n\"))) {\n        codeElementsRender.push(\"\\n\\n\");\n    }\n    return codeElementsRender;\n};\nvar CodeMirror = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(_a, ref) {\n    var _b = _a.code, code = _b === void 0 ? \"\" : _b, filePath = _a.filePath, fileType = _a.fileType, onCodeUpdate = _a.onCodeUpdate, _c = _a.showLineNumbers, showLineNumbers = _c === void 0 ? false : _c, _d = _a.showInlineErrors, showInlineErrors = _d === void 0 ? false : _d, _e = _a.wrapContent, wrapContent = _e === void 0 ? false : _e, _f = _a.editorState, editorState = _f === void 0 ? \"pristine\" : _f, _g = _a.readOnly, readOnly = _g === void 0 ? false : _g, _h = _a.showReadOnly, showReadOnly = _h === void 0 ? true : _h, decorators = _a.decorators, _j = _a.initMode, initMode = _j === void 0 ? \"lazy\" : _j, _k = _a.extensions, extensions = _k === void 0 ? [] : _k, _l = _a.extensionsKeymap, extensionsKeymap = _l === void 0 ? [] : _l, _m = _a.additionalLanguages, additionalLanguages = _m === void 0 ? [] : _m;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var wrapper = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var combinedRef = useCombinedRefs(wrapper, ref);\n    var cmView = react__WEBPACK_IMPORTED_MODULE_1__.useRef();\n    var _o = useSandpackTheme(), theme = _o.theme, themeId = _o.themeId;\n    var _p = react__WEBPACK_IMPORTED_MODULE_1__.useState(code), internalCode = _p[0], setInternalCode = _p[1];\n    var _q = react__WEBPACK_IMPORTED_MODULE_1__.useState(initMode === \"immediate\"), shouldInitEditor = _q[0], setShouldInitEditor = _q[1];\n    var classNames = useClassNames();\n    var _r = useSandpack(), listen = _r.listen, autoReload = _r.sandpack.autoReload;\n    var prevExtension = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);\n    var prevExtensionKeymap = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);\n    var isIntersecting = (0,_react_hook_intersection_observer__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(wrapper, {\n        rootMargin: \"600px 0px\",\n        threshold: 0.2\n    }).isIntersecting;\n    react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, {\n        \"CodeMirror.useImperativeHandle\": function() {\n            return {\n                getCodemirror: ({\n                    \"CodeMirror.useImperativeHandle\": function() {\n                        return cmView.current;\n                    }\n                })[\"CodeMirror.useImperativeHandle\"]\n            };\n        }\n    }[\"CodeMirror.useImperativeHandle\"]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"CodeMirror.useEffect\": function() {\n            var mode = initMode === \"lazy\" || initMode === \"user-visible\";\n            if (mode && isIntersecting) {\n                setShouldInitEditor(true);\n            }\n        }\n    }[\"CodeMirror.useEffect\"], [\n        initMode,\n        isIntersecting\n    ]);\n    var languageExtension = getLanguageFromFile(filePath, fileType, additionalLanguages);\n    var langSupport = getCodeMirrorLanguage(languageExtension, additionalLanguages);\n    var highlightTheme = getSyntaxHighlight(theme);\n    var syntaxHighlightRender = useSyntaxHighlight({\n        langSupport: langSupport,\n        highlightTheme: highlightTheme,\n        code: code\n    });\n    // decorators need to be sorted by `line`, otherwise it will throw error\n    // see https://github.com/codesandbox/sandpack/issues/383\n    var sortedDecorators = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"CodeMirror.useMemo[sortedDecorators]\": function() {\n            return decorators ? decorators.sort({\n                \"CodeMirror.useMemo[sortedDecorators]\": function(d1, d2) {\n                    return d1.line - d2.line;\n                }\n            }[\"CodeMirror.useMemo[sortedDecorators]\"]) : decorators;\n        }\n    }[\"CodeMirror.useMemo[sortedDecorators]\"], [\n        decorators\n    ]);\n    var useStaticReadOnly = readOnly && ((decorators === null || decorators === void 0 ? void 0 : decorators.length) === 0 || decorators === undefined);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"CodeMirror.useEffect\": function() {\n            if (!wrapper.current || !shouldInitEditor || useStaticReadOnly) {\n                return;\n            }\n            var parentDiv = wrapper.current;\n            var existingPlaceholder = parentDiv.querySelector(\".sp-pre-placeholder\");\n            if (existingPlaceholder) {\n                parentDiv.removeChild(existingPlaceholder);\n            }\n            var view = new _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.EditorView({\n                doc: code,\n                extensions: [],\n                parent: parentDiv\n            });\n            view.contentDOM.setAttribute(\"data-gramm\", \"false\");\n            view.contentDOM.setAttribute(\"data-lt-active\", \"false\");\n            view.contentDOM.setAttribute(\"aria-label\", filePath ? \"Code Editor for \".concat(getFileName(filePath)) : \"Code Editor\");\n            view.contentDOM.setAttribute(\"tabIndex\", \"-1\");\n            cmView.current = view;\n            return ({\n                \"CodeMirror.useEffect\": function() {\n                    var _a;\n                    (_a = cmView.current) === null || _a === void 0 ? void 0 : _a.destroy();\n                }\n            })[\"CodeMirror.useEffect\"];\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"CodeMirror.useEffect\"], [\n        shouldInitEditor,\n        readOnly,\n        useStaticReadOnly\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"CodeMirror.useEffect\": function() {\n            if (useStaticReadOnly) {\n                return;\n            }\n            if (cmView.current) {\n                var customCommandsKeymap = [\n                    {\n                        key: \"Tab\",\n                        run: {\n                            \"CodeMirror.useEffect\": function(view) {\n                                var _a, _b;\n                                (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.indentMore)(view);\n                                var customKey = extensionsKeymap.find({\n                                    \"CodeMirror.useEffect.customKey\": function(_a) {\n                                        var key = _a.key;\n                                        return key === \"Tab\";\n                                    }\n                                }[\"CodeMirror.useEffect.customKey\"]);\n                                return (_b = (_a = customKey === null || customKey === void 0 ? void 0 : customKey.run) === null || _a === void 0 ? void 0 : _a.call(customKey, view)) !== null && _b !== void 0 ? _b : true;\n                            }\n                        }[\"CodeMirror.useEffect\"]\n                    },\n                    {\n                        key: \"Shift-Tab\",\n                        run: {\n                            \"CodeMirror.useEffect\": function(view) {\n                                var _a, _b;\n                                (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.indentLess)({\n                                    state: view.state,\n                                    dispatch: view.dispatch\n                                });\n                                var customKey = extensionsKeymap.find({\n                                    \"CodeMirror.useEffect.customKey\": function(_a) {\n                                        var key = _a.key;\n                                        return key === \"Shift-Tab\";\n                                    }\n                                }[\"CodeMirror.useEffect.customKey\"]);\n                                return (_b = (_a = customKey === null || customKey === void 0 ? void 0 : customKey.run) === null || _a === void 0 ? void 0 : _a.call(customKey, view)) !== null && _b !== void 0 ? _b : true;\n                            }\n                        }[\"CodeMirror.useEffect\"]\n                    },\n                    {\n                        key: \"Escape\",\n                        run: {\n                            \"CodeMirror.useEffect\": function() {\n                                if (readOnly) return true;\n                                if (wrapper.current) {\n                                    wrapper.current.focus();\n                                }\n                                return true;\n                            }\n                        }[\"CodeMirror.useEffect\"]\n                    },\n                    {\n                        key: \"mod-Backspace\",\n                        run: _codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.deleteGroupBackward\n                    }\n                ];\n                var extensionList = __spreadArray(__spreadArray([\n                    (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.highlightSpecialChars)(),\n                    (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.history)(),\n                    (0,_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_18__.closeBrackets)()\n                ], extensions, true), [\n                    _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.keymap.of(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_18__.closeBracketsKeymap, true), _codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.defaultKeymap, true), _codemirror_commands__WEBPACK_IMPORTED_MODULE_17__.historyKeymap, true), customCommandsKeymap, true), extensionsKeymap, true)),\n                    langSupport,\n                    getEditorTheme(),\n                    (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_12__.syntaxHighlighting)(highlightTheme),\n                    _codemirror_view__WEBPACK_IMPORTED_MODULE_11__.EditorView.updateListener.of({\n                        \"CodeMirror.useEffect.extensionList\": function(update) {\n                            if (update.docChanged) {\n                                var newCode = update.state.doc.toString();\n                                setInternalCode(newCode);\n                                onCodeUpdate === null || onCodeUpdate === void 0 ? void 0 : onCodeUpdate(newCode);\n                            }\n                        }\n                    }[\"CodeMirror.useEffect.extensionList\"])\n                ], false);\n                if (readOnly) {\n                    extensionList.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_19__.EditorState.readOnly.of(true));\n                    extensionList.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.EditorView.editable.of(false));\n                } else {\n                    extensionList.push((0,_codemirror_language__WEBPACK_IMPORTED_MODULE_12__.bracketMatching)());\n                    extensionList.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.highlightActiveLine)());\n                }\n                if (sortedDecorators) {\n                    extensionList.push(highlightDecorators(sortedDecorators));\n                }\n                if (wrapContent) {\n                    extensionList.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.EditorView.lineWrapping);\n                }\n                if (showLineNumbers) {\n                    extensionList.push((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.lineNumbers)());\n                }\n                if (showInlineErrors) {\n                    extensionList.push(highlightInlineError());\n                }\n                // Add new hightlight decorators\n                cmView.current.dispatch({\n                    effects: _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.StateEffect.reconfigure.of(extensionList)\n                });\n            }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"CodeMirror.useEffect\"], [\n        shouldInitEditor,\n        sortedDecorators,\n        showLineNumbers,\n        wrapContent,\n        themeId,\n        readOnly,\n        useStaticReadOnly,\n        autoReload\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function applyExtensions() {\n        var view = cmView.current;\n        var dependenciesAreDiff = !shallowEqual(extensions, prevExtension.current) || !shallowEqual(extensionsKeymap, prevExtensionKeymap.current);\n        if (view && dependenciesAreDiff) {\n            view.dispatch({\n                effects: _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.StateEffect.appendConfig.of(extensions)\n            });\n            view.dispatch({\n                effects: _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.StateEffect.appendConfig.of(_codemirror_view__WEBPACK_IMPORTED_MODULE_11__.keymap.of(__spreadArray([], extensionsKeymap, true)))\n            });\n            prevExtension.current = extensions;\n            prevExtensionKeymap.current = extensionsKeymap;\n        }\n    }, [\n        extensions,\n        extensionsKeymap\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"CodeMirror.useEffect\": function() {\n            // When the user clicks on a tab button on a larger screen\n            // Avoid autofocus on mobile as it leads to a bad experience and an unexpected layout shift\n            if (cmView.current && editorState === \"dirty\" && window.matchMedia(\"(min-width: 768px)\").matches) {\n                cmView.current.contentDOM.focus();\n            }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"CodeMirror.useEffect\"], []);\n    // Update editor when code passed as prop from outside sandpack changes\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"CodeMirror.useEffect\": function() {\n            if (cmView.current && typeof code === \"string\" && code !== internalCode) {\n                var view = cmView.current;\n                var selection = view.state.selection.ranges.some({\n                    \"CodeMirror.useEffect\": function(_a) {\n                        var to = _a.to, from = _a.from;\n                        return to > code.length || from > code.length;\n                    }\n                }[\"CodeMirror.useEffect\"]) ? _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.EditorSelection.cursor(code.length) : view.state.selection;\n                var changes = {\n                    from: 0,\n                    to: view.state.doc.length,\n                    insert: code\n                };\n                view.dispatch({\n                    changes: changes,\n                    selection: selection\n                });\n            }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"CodeMirror.useEffect\"], [\n        code\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function messageToInlineError() {\n        if (!showInlineErrors) return;\n        var unsubscribe = listen({\n            \"CodeMirror.useEffect.messageToInlineError.unsubscribe\": function(message) {\n                var view = cmView.current;\n                if (message.type === \"success\") {\n                    view === null || view === void 0 ? void 0 : view.dispatch({\n                        // @ts-ignore\n                        annotations: [\n                            new _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.Annotation(\"remove-errors\", true)\n                        ]\n                    });\n                } else if (message.type === \"action\" && message.action === \"show-error\" && message.path === filePath && message.line) {\n                    view === null || view === void 0 ? void 0 : view.dispatch({\n                        // @ts-ignore\n                        annotations: [\n                            new _codemirror_state__WEBPACK_IMPORTED_MODULE_19__.Annotation(\"show-error\", message.line)\n                        ]\n                    });\n                }\n            }\n        }[\"CodeMirror.useEffect.messageToInlineError.unsubscribe\"]);\n        return ({\n            \"CodeMirror.useEffect.messageToInlineError\": function() {\n                return unsubscribe();\n            }\n        })[\"CodeMirror.useEffect.messageToInlineError\"];\n    }, [\n        listen,\n        showInlineErrors\n    ]);\n    var handleContainerKeyDown = function(evt) {\n        if (evt.key === \"Enter\" && cmView.current) {\n            evt.preventDefault();\n            cmView.current.contentDOM.focus();\n        }\n    };\n    var gutterLineOffset = function() {\n        // padding-left\n        var offset = 4;\n        if (showLineNumbers) {\n            // line-number-gutter-width + gutter-padding\n            offset += 6;\n        }\n        // line-padding\n        if (!readOnly) {\n            offset += 1;\n        }\n        return \"var(--\".concat(THEME_PREFIX, \"-space-\").concat(offset, \")\");\n    };\n    if (useStaticReadOnly) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", {\n                    ref: combinedRef,\n                    className: classNames(\"cm\", [\n                        classNames(editorState),\n                        classNames(languageExtension),\n                        cmClassName,\n                        tokensClassName\n                    ]),\n                    translate: \"no\",\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", {\n                        className: classNames(\"pre-placeholder\", [\n                            placeholderClassName\n                        ]),\n                        style: {\n                            marginLeft: gutterLineOffset()\n                        },\n                        children: syntaxHighlightRender\n                    })\n                }),\n                readOnly && showReadOnly && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", __assign({\n                    className: classNames(\"read-only\", [\n                        readOnlyClassName\n                    ])\n                }, {}, {\n                    children: \"Read-only\"\n                }))\n            ]\n        });\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        ref: combinedRef,\n        \"aria-autocomplete\": \"list\",\n        \"aria-label\": filePath ? \"Code Editor for \".concat(getFileName(filePath)) : \"Code Editor\",\n        \"aria-multiline\": \"true\",\n        className: classNames(\"cm\", [\n            classNames(editorState),\n            classNames(languageExtension),\n            cmClassName,\n            tokensClassName\n        ]),\n        onKeyDown: handleContainerKeyDown,\n        role: \"textbox\",\n        tabIndex: 0,\n        translate: \"no\",\n        suppressHydrationWarning: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", {\n            className: classNames(\"pre-placeholder\", [\n                placeholderClassName\n            ]),\n            style: {\n                marginLeft: gutterLineOffset()\n            },\n            children: syntaxHighlightRender\n        })\n    });\n});\nvar SandpackCodeEditor = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(_a, ref) {\n    var showTabs = _a.showTabs, _b = _a.showLineNumbers, showLineNumbers = _b === void 0 ? false : _b, _c = _a.showInlineErrors, showInlineErrors = _c === void 0 ? false : _c, _d = _a.showRunButton, showRunButton = _d === void 0 ? true : _d, _e = _a.wrapContent, wrapContent = _e === void 0 ? false : _e, _f = _a.closableTabs, closableTabs = _f === void 0 ? false : _f, initMode = _a.initMode, extensions = _a.extensions, extensionsKeymap = _a.extensionsKeymap, readOnly = _a.readOnly, showReadOnly = _a.showReadOnly, additionalLanguages = _a.additionalLanguages, className = _a.className, props = __rest(_a, [\n        \"showTabs\",\n        \"showLineNumbers\",\n        \"showInlineErrors\",\n        \"showRunButton\",\n        \"wrapContent\",\n        \"closableTabs\",\n        \"initMode\",\n        \"extensions\",\n        \"extensionsKeymap\",\n        \"readOnly\",\n        \"showReadOnly\",\n        \"additionalLanguages\",\n        \"className\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    var _g = useActiveCode(), code = _g.code, updateCode = _g.updateCode, readOnlyFile = _g.readOnly;\n    var activeFile = sandpack.activeFile, status = sandpack.status, editorState = sandpack.editorState;\n    var shouldShowTabs = showTabs !== null && showTabs !== void 0 ? showTabs : sandpack.visibleFiles.length > 1;\n    var classNames = useClassNames();\n    var handleCodeUpdate = function(newCode, shouldUpdatePreview) {\n        if (shouldUpdatePreview === void 0) {\n            shouldUpdatePreview = true;\n        }\n        updateCode(newCode, shouldUpdatePreview);\n    };\n    var activeFileUniqueId = useSandpackId();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n        className: classNames(\"editor\", [\n            className\n        ])\n    }, props, {\n        children: [\n            shouldShowTabs && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FileTabs, {\n                activeFileUniqueId: activeFileUniqueId,\n                closableTabs: closableTabs\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                \"aria-labelledby\": \"\".concat(activeFile, \"-\").concat(activeFileUniqueId, \"-tab\"),\n                className: classNames(\"code-editor\", [\n                    editorClassName\n                ]),\n                id: \"\".concat(activeFile, \"-\").concat(activeFileUniqueId, \"-tab-panel\"),\n                role: \"tabpanel\",\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CodeMirror, {\n                        ref: ref,\n                        additionalLanguages: additionalLanguages,\n                        code: code,\n                        editorState: editorState,\n                        extensions: extensions,\n                        extensionsKeymap: extensionsKeymap,\n                        filePath: activeFile,\n                        initMode: initMode || sandpack.initMode,\n                        onCodeUpdate: function(newCode) {\n                            var _a;\n                            return handleCodeUpdate(newCode, (_a = sandpack.autoReload) !== null && _a !== void 0 ? _a : true);\n                        },\n                        readOnly: readOnly || readOnlyFile,\n                        showInlineErrors: showInlineErrors,\n                        showLineNumbers: showLineNumbers,\n                        showReadOnly: showReadOnly,\n                        wrapContent: wrapContent\n                    }, activeFile),\n                    showRunButton && (!sandpack.autoReload || status === \"idle\") ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunButton$1, {}) : null\n                ]\n            })\n        ]\n    }));\n});\nvar SandpackCodeViewer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(_a, ref) {\n    var showTabs = _a.showTabs, showLineNumbers = _a.showLineNumbers, decorators = _a.decorators, propCode = _a.code, initMode = _a.initMode, wrapContent = _a.wrapContent, additionalLanguages = _a.additionalLanguages, props = __rest(_a, [\n        \"showTabs\",\n        \"showLineNumbers\",\n        \"decorators\",\n        \"code\",\n        \"initMode\",\n        \"wrapContent\",\n        \"additionalLanguages\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    var code = useActiveCode().code;\n    var classNames = useClassNames();\n    var shouldShowTabs = showTabs !== null && showTabs !== void 0 ? showTabs : sandpack.visibleFiles.length > 1;\n    var activeFileUniqueId = useSandpackId();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n        className: classNames(\"editor-viewer\")\n    }, props, {\n        children: [\n            shouldShowTabs ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FileTabs, {\n                activeFileUniqueId: activeFileUniqueId\n            }) : null,\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                \"aria-labelledby\": \"\".concat(sandpack.activeFile, \"-\").concat(activeFileUniqueId, \"-tab\"),\n                className: classNames(\"code-editor\", [\n                    editorClassName\n                ]),\n                id: \"\".concat(sandpack.activeFile, \"-\").concat(activeFileUniqueId, \"-tab-panel\"),\n                role: \"tabpanel\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CodeMirror, {\n                    ref: ref,\n                    additionalLanguages: additionalLanguages,\n                    code: propCode !== null && propCode !== void 0 ? propCode : code,\n                    decorators: decorators,\n                    filePath: sandpack.activeFile,\n                    initMode: initMode || sandpack.initMode,\n                    showLineNumbers: showLineNumbers,\n                    showReadOnly: false,\n                    wrapContent: wrapContent,\n                    readOnly: true\n                })\n            }),\n            sandpack.status === \"idle\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunButton$1, {}) : null\n        ]\n    }));\n});\nvar _a$4, _b;\nvar layoutClassName = css((_a$4 = {\n    border: \"1px solid $colors$surface2\",\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"stretch\",\n    borderRadius: \"$border$radius\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    backgroundColor: \"$colors$surface2\",\n    gap: 1\n}, _a$4[\"> .\".concat(stackClassName)] = {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexBasis: \"0\",\n    height: \"$layout$height\",\n    overflow: \"hidden\",\n    \"@media print\": {\n        height: \"auto\",\n        display: \"block\"\n    },\n    \"@media screen and (max-width: 768px)\": (_b = {}, _b[\"&:not(.\".concat(THEME_PREFIX, \"-preview, .\").concat(THEME_PREFIX, \"-editor, .\").concat(THEME_PREFIX, \"-preset-column)\")] = {\n        height: \"calc($layout$height / 2)\"\n    }, /* triggers the layout break at the 768px breakpoint, not when the component is less then 700px */ _b.minWidth = \"100%;\", _b)\n}, _a$4[\"> .\".concat(THEME_PREFIX, \"-file-explorer\")] = {\n    flex: 0.2,\n    minWidth: 200,\n    \"@media screen and (max-width: 768px)\": {\n        flex: 1\n    }\n}, _a$4));\nvar SandpackLayout = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(_a, ref) {\n    var children = _a.children, className = _a.className, props = __rest(_a, [\n        \"children\",\n        \"className\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    var classNames = useClassNames();\n    var combinedRef = useCombinedRefs(sandpack.lazyAnchorRef, ref);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n        ref: combinedRef,\n        className: classNames(\"layout\", [\n            layoutClassName,\n            className\n        ])\n    }, props, {\n        children: children\n    }));\n});\n/**\n * @category Hooks\n */ var useErrorMessage = function() {\n    var _a;\n    var sandpack = useSandpack().sandpack;\n    var error = sandpack.error;\n    return (_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : null;\n};\nvar FADE_ANIMATION_DURATION = 200;\n/**\n * @category Hooks\n */ var useLoadingOverlayState = function(clientId, externalLoading) {\n    var _a = useSandpack(), sandpack = _a.sandpack, listen = _a.listen;\n    var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(\"LOADING\"), state = _b[0], setState = _b[1];\n    /**\n     * Sandpack listener\n     */ react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useLoadingOverlayState.useEffect\": function() {\n            var unsubscribe = listen({\n                \"useLoadingOverlayState.useEffect.unsubscribe\": function(message) {\n                    if (message.type === \"start\" && message.firstLoad === true) {\n                        setState(\"LOADING\");\n                    }\n                    if (message.type === \"done\") {\n                        setState({\n                            \"useLoadingOverlayState.useEffect.unsubscribe\": function(prev) {\n                                return prev === \"LOADING\" ? \"PRE_FADING\" : \"HIDDEN\";\n                            }\n                        }[\"useLoadingOverlayState.useEffect.unsubscribe\"]);\n                    }\n                }\n            }[\"useLoadingOverlayState.useEffect.unsubscribe\"], clientId);\n            return ({\n                \"useLoadingOverlayState.useEffect\": function() {\n                    unsubscribe();\n                }\n            })[\"useLoadingOverlayState.useEffect\"];\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"useLoadingOverlayState.useEffect\"], [\n        clientId,\n        sandpack.status === \"idle\"\n    ]);\n    /**\n     * Fading transient state\n     */ react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useLoadingOverlayState.useEffect\": function() {\n            var fadeTimeout;\n            if (state === \"PRE_FADING\" && !externalLoading) {\n                setState(\"FADING\");\n            } else if (state === \"FADING\") {\n                fadeTimeout = setTimeout({\n                    \"useLoadingOverlayState.useEffect\": function() {\n                        return setState(\"HIDDEN\");\n                    }\n                }[\"useLoadingOverlayState.useEffect\"], FADE_ANIMATION_DURATION);\n            }\n            return ({\n                \"useLoadingOverlayState.useEffect\": function() {\n                    clearTimeout(fadeTimeout);\n                }\n            })[\"useLoadingOverlayState.useEffect\"];\n        }\n    }[\"useLoadingOverlayState.useEffect\"], [\n        state,\n        externalLoading\n    ]);\n    if (sandpack.status === \"timeout\") {\n        return \"TIMEOUT\";\n    }\n    if (sandpack.status !== \"running\") {\n        return \"HIDDEN\";\n    }\n    return state;\n};\n/**\n * @category Hooks\n */ var useSandpackNavigation = function(clientId) {\n    var dispatch = useSandpack().dispatch;\n    return {\n        refresh: function() {\n            return dispatch({\n                type: \"refresh\"\n            }, clientId);\n        },\n        back: function() {\n            return dispatch({\n                type: \"urlback\"\n            }, clientId);\n        },\n        forward: function() {\n            return dispatch({\n                type: \"urlforward\"\n            }, clientId);\n        }\n    };\n};\nfunction getTranspiledCode(sandpack) {\n    var _a, _b;\n    var activeFile = sandpack.activeFile, bundlerState = sandpack.bundlerState;\n    if (bundlerState == null) {\n        return null;\n    }\n    var tModule = bundlerState.transpiledModules[activeFile + \":\"];\n    return (_b = (_a = tModule === null || tModule === void 0 ? void 0 : tModule.source) === null || _a === void 0 ? void 0 : _a.compiledCode) !== null && _b !== void 0 ? _b : null;\n}\n/**\n * @category Hooks\n */ var useTranspiledCode = function() {\n    var sandpack = useSandpack().sandpack;\n    if (sandpack.status !== \"running\") {\n        return null;\n    }\n    return getTranspiledCode(sandpack);\n};\n/**\n * It registers a new sandpack client and returns its instance,\n * listeners, and dispatch function. Using it when creating a custom\n * component to interact directly with the client is recommended.\n * For other cases, use `useSandpack` instead.\n *\n * @category Hooks\n */ var useSandpackClient = function(clientPropsOverride) {\n    var _a = useSandpack(), sandpack = _a.sandpack, listen = _a.listen, dispatch = _a.dispatch;\n    var iframeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var clientId = react__WEBPACK_IMPORTED_MODULE_1__.useRef(generateRandomId());\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useSandpackClient.useEffect\": function() {\n            var iframeElement = iframeRef.current;\n            var clientIdValue = clientId.current;\n            if (iframeElement !== null) {\n                sandpack.registerBundler(iframeElement, clientIdValue, clientPropsOverride);\n            }\n            return ({\n                \"useSandpackClient.useEffect\": function() {\n                    return sandpack.unregisterBundler(clientIdValue);\n                }\n            })[\"useSandpackClient.useEffect\"];\n        }\n    }[\"useSandpackClient.useEffect\"], []);\n    var getClient = function() {\n        return sandpack.clients[clientId.current] || null;\n    };\n    return {\n        sandpack: sandpack,\n        getClient: getClient,\n        clientId: clientId.current,\n        iframe: iframeRef,\n        listen: function(listener) {\n            return listen(listener, clientId.current);\n        },\n        dispatch: function(message) {\n            return dispatch(message, clientId.current);\n        }\n    };\n};\n/**\n * @category Hooks\n */ var useSandpackShell = function(clientId) {\n    var dispatch = useSandpack().dispatch;\n    return {\n        restart: function() {\n            return dispatch({\n                type: \"shell/restart\"\n            }, clientId);\n        },\n        openPreview: function() {\n            return dispatch({\n                type: \"shell/openPreview\"\n            }, clientId);\n        }\n    };\n};\nvar mapProgressMessage = function(originalMessage, firstTotalPending) {\n    var _a;\n    switch(originalMessage.state){\n        case \"downloading_manifest\":\n            return \"[1/3] Downloading manifest\";\n        case \"downloaded_module\":\n            return \"[2/3] Downloaded \".concat(originalMessage.name, \" (\").concat(firstTotalPending - originalMessage.totalPending, \"/\").concat(firstTotalPending, \")\");\n        case \"starting_command\":\n            return \"[3/3] Starting command\";\n        case \"command_running\":\n            return \"[3/3] Running \\\"\".concat((_a = originalMessage.command) === null || _a === void 0 ? void 0 : _a.trim(), \"\\\"\");\n    }\n};\nvar useSandpackPreviewProgress = function(props) {\n    var _a = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), isReady = _a[0], setIsReady = _a[1];\n    var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(), totalDependencies = _b[0], setTotalDependencies = _b[1];\n    var _c = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), loadingMessage = _c[0], setLoadingMessage = _c[1];\n    var timeout = props === null || props === void 0 ? void 0 : props.timeout;\n    var clientId = props === null || props === void 0 ? void 0 : props.clientId;\n    var listen = useSandpack().listen;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useSandpackPreviewProgress.useEffect\": function() {\n            var timer;\n            var unsubscribe = listen({\n                \"useSandpackPreviewProgress.useEffect.unsubscribe\": function(message) {\n                    if (message.type === \"start\" && message.firstLoad) {\n                        setIsReady(false);\n                    }\n                    if (timeout) {\n                        timer = setTimeout({\n                            \"useSandpackPreviewProgress.useEffect.unsubscribe\": function() {\n                                setLoadingMessage(null);\n                            }\n                        }[\"useSandpackPreviewProgress.useEffect.unsubscribe\"], timeout);\n                    }\n                    if (message.type === \"dependencies\") {\n                        setLoadingMessage({\n                            \"useSandpackPreviewProgress.useEffect.unsubscribe\": function() {\n                                switch(message.data.state){\n                                    case \"downloading_manifest\":\n                                        return \"[1/3] Downloading manifest\";\n                                    case \"downloaded_module\":\n                                        return \"[2/3] Downloaded \".concat(message.data.name, \" (\").concat(message.data.progress, \"/\").concat(message.data.total, \")\");\n                                    case \"starting\":\n                                        return \"[3/3] Starting\";\n                                }\n                                return null;\n                            }\n                        }[\"useSandpackPreviewProgress.useEffect.unsubscribe\"]);\n                    } else if (message.type === \"shell/progress\" && !isReady) {\n                        if (!totalDependencies && message.data.state === \"downloaded_module\") {\n                            setTotalDependencies(message.data.totalPending);\n                        }\n                        if (totalDependencies !== undefined) {\n                            setLoadingMessage(mapProgressMessage(message.data, totalDependencies));\n                        }\n                    }\n                    if (message.type === \"done\" && message.compilatonError === false) {\n                        setLoadingMessage(null);\n                        setIsReady(true);\n                        clearTimeout(timer);\n                    }\n                }\n            }[\"useSandpackPreviewProgress.useEffect.unsubscribe\"], clientId);\n            return ({\n                \"useSandpackPreviewProgress.useEffect\": function() {\n                    if (timer) {\n                        clearTimeout(timer);\n                    }\n                    unsubscribe();\n                }\n            })[\"useSandpackPreviewProgress.useEffect\"];\n        }\n    }[\"useSandpackPreviewProgress.useEffect\"], [\n        clientId,\n        isReady,\n        totalDependencies,\n        timeout\n    ]);\n    return loadingMessage;\n};\nvar MAX_MESSAGE_COUNT$1 = 400 * 2;\nvar useSandpackShellStdout = function(_a) {\n    var clientId = _a.clientId, _b = _a.maxMessageCount, maxMessageCount = _b === void 0 ? MAX_MESSAGE_COUNT$1 : _b;\n    _a.resetOnPreviewRestart;\n    var _d = react__WEBPACK_IMPORTED_MODULE_1__.useState([]), logs = _d[0], setLogs = _d[1];\n    var listen = useSandpack().listen;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useSandpackShellStdout.useEffect\": function() {\n            var unsubscribe = listen({\n                \"useSandpackShellStdout.useEffect.unsubscribe\": function(message) {\n                    if (message.type === \"start\") {\n                        setLogs([]);\n                    } else if (message.type === \"stdout\" && message.payload.data && Boolean(message.payload.data.trim())) {\n                        setLogs({\n                            \"useSandpackShellStdout.useEffect.unsubscribe\": function(prev) {\n                                var messages = __spreadArray(__spreadArray([], prev, true), [\n                                    {\n                                        data: message.payload.data,\n                                        id: generateRandomId()\n                                    }\n                                ], false);\n                                while(messages.length > maxMessageCount){\n                                    messages.shift();\n                                }\n                                return messages;\n                            }\n                        }[\"useSandpackShellStdout.useEffect.unsubscribe\"]);\n                    }\n                }\n            }[\"useSandpackShellStdout.useEffect.unsubscribe\"], clientId);\n            return unsubscribe;\n        }\n    }[\"useSandpackShellStdout.useEffect\"], [\n        maxMessageCount,\n        clientId\n    ]);\n    return {\n        logs: logs,\n        reset: function() {\n            return setLogs([]);\n        }\n    };\n};\nvar mapBundlerErrors = function(originalMessage) {\n    var errorMessage = originalMessage.replace(\"[sandpack-client]: \", \"\");\n    if (/process.exit/.test(errorMessage)) {\n        var exitCode = errorMessage.match(/process.exit\\((\\d+)\\)/);\n        if (!exitCode) return errorMessage;\n        // Crash\n        if (Number(exitCode[1]) === 0) {\n            return \"Server is not running, would you like to start it again?\";\n        }\n        return \"Server has crashed with status code \".concat(exitCode[1], \", would you like to restart the server?\");\n    }\n    return errorMessage;\n};\nvar ErrorOverlay = function(props) {\n    var children = props.children, className = props.className, otherProps = __rest(props, [\n        \"children\",\n        \"className\"\n    ]);\n    var errorMessage = useErrorMessage();\n    var restart = useSandpackShell().restart;\n    var classNames = useClassNames();\n    var _a = useSandpack().sandpack, runSandpack = _a.runSandpack, teamId = _a.teamId;\n    var dispatch = useSandpack().dispatch;\n    if (!errorMessage && !children) {\n        return null;\n    }\n    var isSandpackBundlerError = errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith(\"[sandpack-client]\");\n    var privateDependencyError = errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.includes(\"NPM_REGISTRY_UNAUTHENTICATED_REQUEST\");\n    var onSignIn = function() {\n        if (teamId) {\n            dispatch({\n                type: \"sign-in\",\n                teamId: teamId\n            });\n        }\n    };\n    if (privateDependencyError) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n            className: classNames(\"overlay\", [\n                classNames(\"error\"),\n                absoluteClassName,\n                errorBundlerClassName,\n                className\n            ])\n        }, props, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                    className: classNames(\"error-message\", [\n                        errorMessageClassName\n                    ]),\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n                        children: \"Unable to fetch required dependency.\"\n                    })\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: classNames(\"error-message\", [\n                        errorMessageClassName\n                    ]),\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                        children: [\n                            \"Authentication required. Please sign in to your account (make sure to allow pop-ups to this page) and try again. If the issue persists, contact\",\n                            \" \",\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n                                href: \"mailto:hello@codesandbox.io?subject=Sandpack Timeout Error\",\n                                children: \"support\"\n                            }),\n                            \" \",\n                            \"for further assistance.\"\n                        ]\n                    })\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n                        className: classNames(\"button\", [\n                            buttonClassName,\n                            iconStandaloneClassName,\n                            roundedButtonClassName\n                        ]),\n                        onClick: onSignIn,\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SignInIcon, {}),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                children: \"Sign in\"\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    if (isSandpackBundlerError && errorMessage) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n            className: classNames(\"overlay\", [\n                classNames(\"error\"),\n                absoluteClassName,\n                errorBundlerClassName,\n                className\n            ])\n        }, otherProps, {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"error-message\", [\n                    errorMessageClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                        className: classNames(\"error-title\", [\n                            css({\n                                fontWeight: \"bold\"\n                            })\n                        ]),\n                        children: \"Couldn't connect to server\"\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                        children: mapBundlerErrors(errorMessage)\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n                            className: classNames(\"button\", [\n                                classNames(\"icon-standalone\"),\n                                buttonClassName,\n                                iconStandaloneClassName,\n                                roundedButtonClassName\n                            ]),\n                            onClick: function() {\n                                restart();\n                                runSandpack();\n                            },\n                            title: \"Restart script\",\n                            type: \"button\",\n                            children: [\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {}),\n                                \" \",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                    children: \"Restart\"\n                                })\n                            ]\n                        })\n                    })\n                ]\n            })\n        }));\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n        className: classNames(\"overlay\", [\n            classNames(\"error\"),\n            absoluteClassName,\n            errorClassName({\n                solidBg: true\n            }),\n            className\n        ]),\n        translate: \"no\"\n    }, otherProps, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                className: classNames(\"error-message\", [\n                    errorMessageClassName\n                ]),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n                    children: \"Something went wrong\"\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                className: classNames(\"error-message\", [\n                    errorMessageClassName({\n                        errorCode: true\n                    })\n                ]),\n                children: errorMessage || children\n            })\n        ]\n    }));\n};\n/**\n * Stole from https://github.com/nteract/ansi-to-react/blob/master/src/index.ts\n */ /**\n * Converts ANSI strings into JSON output.\n * @name ansiToJSON\n * @function\n * @param {String} input The input string.\n * @param {boolean} use_classes If `true`, HTML classes will be appended\n *                              to the HTML output.\n * @return {Array} The parsed input.\n */ function ansiToJSON(input, use_classes) {\n    if (use_classes === void 0) {\n        use_classes = false;\n    }\n    input = (0,escape_carriage__WEBPACK_IMPORTED_MODULE_5__.escapeCarriageReturn)(fixBackspace(input));\n    return anser__WEBPACK_IMPORTED_MODULE_4__.ansiToJson(input, {\n        json: true,\n        remove_empty: true,\n        use_classes: use_classes\n    });\n}\n/**\n * Create a class string.\n * @name createClass\n * @function\n * @param {AnserJsonEntry} bundle\n * @return {String} class name(s)\n */ function createClass(bundle) {\n    var classNames = \"\";\n    if (bundle.bg) {\n        classNames += \"\".concat(bundle.bg, \"-bg \");\n    }\n    if (bundle.fg) {\n        classNames += \"\".concat(bundle.fg, \"-fg \");\n    }\n    if (bundle.decoration) {\n        classNames += \"ansi-\".concat(bundle.decoration, \" \");\n    }\n    if (classNames === \"\") {\n        return null;\n    }\n    classNames = classNames.substring(0, classNames.length - 1);\n    return classNames;\n}\n/**\n * Create the style attribute.\n * @name createStyle\n * @function\n * @param {AnserJsonEntry} bundle\n * @return {Object} returns the style object\n */ function createStyle(bundle) {\n    var style = {};\n    if (bundle.bg) {\n        style.backgroundColor = \"rgb(\".concat(bundle.bg, \")\");\n    }\n    if (bundle.fg) {\n        style.color = \"rgb(\".concat(bundle.fg, \")\");\n    }\n    switch(bundle.decoration){\n        case \"bold\":\n            style.fontWeight = \"bold\";\n            break;\n        case \"dim\":\n            style.opacity = \"0.5\";\n            break;\n        case \"italic\":\n            style.fontStyle = \"italic\";\n            break;\n        case \"hidden\":\n            style.visibility = \"hidden\";\n            break;\n        case \"strikethrough\":\n            style.textDecoration = \"line-through\";\n            break;\n        case \"underline\":\n            style.textDecoration = \"underline\";\n            break;\n        case \"blink\":\n            style.textDecoration = \"blink\";\n            break;\n    }\n    return style;\n}\n/**\n * Converts an Anser bundle into a React Node.\n * @param linkify whether links should be converting into clickable anchor tags.\n * @param useClasses should render the span with a class instead of style.\n * @param bundle Anser output.\n * @param key\n */ function convertBundleIntoReact(linkify, useClasses, bundle, key) {\n    var style = useClasses ? null : createStyle(bundle);\n    var className = useClasses ? createClass(bundle) : null;\n    if (!linkify) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n            style: style,\n            key: key,\n            className: className\n        }, bundle.content);\n    }\n    var content = [];\n    var linkRegex = /(\\s|^)(https?:\\/\\/(?:www\\.|(?!www))[^\\s.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/g;\n    var index = 0;\n    var match;\n    while((match = linkRegex.exec(bundle.content)) !== null){\n        var pre = match[1], url = match[2];\n        var startIndex = match.index + pre.length;\n        if (startIndex > index) {\n            content.push(bundle.content.substring(index, startIndex));\n        }\n        // Make sure the href we generate from the link is fully qualified. We assume http\n        // if it starts with a www because many sites don't support https\n        var href = url.startsWith(\"www.\") ? \"http://\".concat(url) : url;\n        content.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"a\", {\n            key: index,\n            href: href,\n            target: \"_blank\"\n        }, \"\".concat(url)));\n        index = linkRegex.lastIndex;\n    }\n    if (index < bundle.content.length) {\n        content.push(bundle.content.substring(index));\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        style: style,\n        key: key,\n        className: className\n    }, content);\n}\nfunction Ansi(props) {\n    var className = props.className, useClasses = props.useClasses, children = props.children, linkify = props.linkify;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"code\", {\n        className: className\n    }, ansiToJSON(children !== null && children !== void 0 ? children : \"\", useClasses !== null && useClasses !== void 0 ? useClasses : false).map(convertBundleIntoReact.bind(null, linkify !== null && linkify !== void 0 ? linkify : false, useClasses !== null && useClasses !== void 0 ? useClasses : false)));\n}\n// This is copied from the Jupyter Classic source code\n// notebook/static/base/js/utils.js to handle \\b in a way\n// that is **compatible with Jupyter classic**.   One can\n// argue that this behavior is questionable:\n//   https://stackoverflow.com/questions/55440152/multiple-b-doesnt-work-as-expected-in-jupyter#\nfunction fixBackspace(txt) {\n    var tmp = txt;\n    do {\n        txt = tmp;\n        // Cancel out anything-but-newline followed by backspace\n        // eslint-disable-next-line no-control-regex\n        tmp = txt.replace(/[^\\n]\\x08/gm, \"\");\n    }while (tmp.length < txt.length);\n    return txt;\n}\nvar StdoutList = function(_a) {\n    var data = _a.data;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: data.map(function(_a) {\n            var data = _a.data, id = _a.id;\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: classNames(\"console-item\", [\n                    consoleItemClassName$1\n                ]),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ansi, {\n                    children: data\n                })\n            }, id);\n        })\n    });\n};\nvar consoleItemClassName$1 = css({\n    width: \"100%\",\n    padding: \"$space$3 $space$2\",\n    fontSize: \".85em\",\n    position: \"relative\",\n    whiteSpace: \"pre\",\n    \"&:not(:first-child):after\": {\n        content: \"\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        height: 1,\n        background: \"$colors$surface3\"\n    }\n});\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar getParameters = function(parameters) {\n    return lz_string__WEBPACK_IMPORTED_MODULE_6__.compressToBase64(JSON.stringify(parameters)).replace(/\\+/g, \"-\") // Convert '+' to '-'\n    .replace(/\\//g, \"_\") // Convert '/' to '_'\n    .replace(/=+$/, \"\");\n}; /* Remove ending '='*/ \nvar CSB_URL = \"https://codesandbox.io/api/v1/sandboxes/define\";\nvar getFileParameters = function(files, environment) {\n    var normalizedFiles = Object.keys(files).reduce(function(prev, next) {\n        var _a;\n        var fileName = next.replace(\"/\", \"\");\n        var value = {\n            content: files[next].code,\n            isBinary: false\n        };\n        return __assign(__assign({}, prev), (_a = {}, _a[fileName] = value, _a));\n    }, {});\n    return getParameters(__assign({\n        files: normalizedFiles\n    }, environment ? {\n        template: environment\n    } : null));\n};\nvar UnstyledOpenInCodeSandboxButton = function(props) {\n    var sandpack = useSandpack().sandpack;\n    if (sandpack.exportOptions) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExportToWorkspaceButton, __assign({\n            state: sandpack\n        }, props));\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RegularExportButton, __assign({\n        state: sandpack\n    }, props));\n};\nvar ExportToWorkspaceButton = function(_a) {\n    var children = _a.children, state = _a.state, props = __rest(_a, [\n        \"children\",\n        \"state\"\n    ]);\n    var submit = function() {\n        return __awaiter(void 0, void 0, void 0, function() {\n            var normalizedFiles, response, data;\n            var _a;\n            return __generator(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        if (!((_a = state.exportOptions) === null || _a === void 0 ? void 0 : _a.apiToken)) {\n                            throw new Error(\"Missing `apiToken` property\");\n                        }\n                        normalizedFiles = Object.keys(state.files).reduce(function(prev, next) {\n                            var _a;\n                            var fileName = next.replace(\"/\", \"\");\n                            return __assign(__assign({}, prev), (_a = {}, _a[fileName] = state.files[next], _a));\n                        }, {});\n                        return [\n                            4 /*yield*/ ,\n                            fetch(\"https://api.codesandbox.io/sandbox\", {\n                                method: \"POST\",\n                                body: JSON.stringify({\n                                    template: state.environment,\n                                    files: normalizedFiles,\n                                    privacy: state.exportOptions.privacy === \"public\" ? 0 : 2\n                                }),\n                                headers: {\n                                    Authorization: \"Bearer \".concat(state.exportOptions.apiToken),\n                                    \"Content-Type\": \"application/json\",\n                                    \"X-CSB-API-Version\": \"2023-07-01\"\n                                }\n                            })\n                        ];\n                    case 1:\n                        response = _b.sent();\n                        return [\n                            4 /*yield*/ ,\n                            response.json()\n                        ];\n                    case 2:\n                        data = _b.sent();\n                        window.open(\"https://codesandbox.io/p/sandbox/\".concat(data.data.alias, \"?file=/\").concat(state.activeFile, \"&utm-source=storybook-addon\"), \"_blank\");\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", __assign({\n        onClick: submit,\n        title: \"Export to workspace in CodeSandbox\",\n        type: \"button\"\n    }, props, {\n        children: children\n    }));\n};\nvar RegularExportButton = function(_a) {\n    var _b, _c, _d;\n    var children = _a.children, state = _a.state, props = __rest(_a, [\n        \"children\",\n        \"state\"\n    ]);\n    var formRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var _e = react__WEBPACK_IMPORTED_MODULE_1__.useState(), paramsValues = _e[0], setParamsValues = _e[1];\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function debounce() {\n        var timer = setTimeout({\n            \"RegularExportButton.useEffect.debounce.timer\": function() {\n                var params = getFileParameters(state.files, state.environment);\n                var searchParams = new URLSearchParams({\n                    parameters: params,\n                    query: new URLSearchParams({\n                        file: state.activeFile,\n                        utm_medium: \"sandpack\"\n                    }).toString()\n                });\n                setParamsValues(searchParams);\n            }\n        }[\"RegularExportButton.useEffect.debounce.timer\"], 600);\n        return ({\n            \"RegularExportButton.useEffect.debounce\": function() {\n                clearTimeout(timer);\n            }\n        })[\"RegularExportButton.useEffect.debounce\"];\n    }, [\n        state.activeFile,\n        state.environment,\n        state.files\n    ]);\n    /**\n     * This is a safe limit to avoid too long requests (401),\n     * as all parameters are attached in the URL\n     */ if (((_d = (_c = (_b = paramsValues === null || paramsValues === void 0 ? void 0 : paramsValues.get) === null || _b === void 0 ? void 0 : _b.call(paramsValues, \"parameters\")) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 1500) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", __assign({\n            onClick: function() {\n                var _a;\n                return (_a = formRef.current) === null || _a === void 0 ? void 0 : _a.submit();\n            },\n            title: \"Open in CodeSandbox\",\n            type: \"button\"\n        }, props, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"form\", {\n                    ref: formRef,\n                    action: CSB_URL,\n                    method: \"POST\",\n                    style: {\n                        visibility: \"hidden\"\n                    },\n                    target: \"_blank\",\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n                            name: \"environment\",\n                            type: \"hidden\",\n                            value: state.environment === \"node\" ? \"server\" : state.environment\n                        }),\n                        Array.from(paramsValues, function(_a) {\n                            var key = _a[0], value = _a[1];\n                            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n                                name: key,\n                                type: \"hidden\",\n                                value: value\n                            }, key);\n                        })\n                    ]\n                }),\n                children\n            ]\n        }));\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", __assign({\n        href: \"\".concat(CSB_URL, \"?\").concat(paramsValues === null || paramsValues === void 0 ? void 0 : paramsValues.toString(), \"&environment=\").concat(state.environment === \"node\" ? \"server\" : state.environment),\n        rel: \"noreferrer noopener\",\n        target: \"_blank\",\n        title: \"Open in CodeSandbox\"\n    }, props, {\n        children: children\n    }));\n};\nvar OpenInCodeSandboxButton = function() {\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(UnstyledOpenInCodeSandboxButton, {\n        className: classNames(\"button\", [\n            classNames(\"icon-standalone\"),\n            buttonClassName,\n            iconStandaloneClassName,\n            roundedButtonClassName\n        ]),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExportIcon, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                children: \"Open Sandbox\"\n            })\n        ]\n    });\n};\nvar _a$3;\nvar cubeClassName = css({\n    transform: \"translate(-4px, 9px) scale(0.13, 0.13)\",\n    \"*\": {\n        position: \"absolute\",\n        width: \"96px\",\n        height: \"96px\"\n    }\n});\nvar wrapperClassName$2 = css((_a$3 = {\n    position: \"absolute\",\n    right: \"$space$2\",\n    bottom: \"$space$2\",\n    zIndex: \"$top\",\n    width: \"32px\",\n    height: \"32px\",\n    borderRadius: \"$border$radius\"\n}, _a$3[\".\".concat(cubeClassName)] = {\n    display: \"flex\"\n}, _a$3[\".sp-button.\".concat(buttonClassName)] = {\n    display: \"none\"\n}, _a$3[\"&:hover .sp-button.\".concat(buttonClassName)] = {\n    display: \"flex\"\n}, _a$3[\"&:hover .sp-button.\".concat(buttonClassName, \" > span\")] = {\n    display: \"none\"\n}, _a$3[\"&:hover .\".concat(cubeClassName)] = {\n    display: \"none\"\n}, _a$3));\nvar cubeRotate = keyframes({\n    \"0%\": {\n        transform: \"rotateX(-25.5deg) rotateY(45deg)\"\n    },\n    \"100%\": {\n        transform: \"rotateX(-25.5deg) rotateY(405deg)\"\n    }\n});\nvar sidesClassNames = css({\n    animation: \"\".concat(cubeRotate, \" 1s linear infinite\"),\n    animationFillMode: \"forwards\",\n    transformStyle: \"preserve-3d\",\n    transform: \"rotateX(-25.5deg) rotateY(45deg)\",\n    \"*\": {\n        border: \"10px solid $colors$clickable\",\n        borderRadius: \"8px\",\n        background: \"$colors$surface1\"\n    },\n    \".top\": {\n        transform: \"rotateX(90deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    },\n    \".bottom\": {\n        transform: \"rotateX(-90deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    },\n    \".front\": {\n        transform: \"rotateY(0deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    },\n    \".back\": {\n        transform: \"rotateY(-180deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    },\n    \".left\": {\n        transform: \"rotateY(-90deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    },\n    \".right\": {\n        transform: \"rotateY(90deg) translateZ(44px)\",\n        transformOrigin: \"50% 50%\"\n    }\n});\nvar Loading = function(_a) {\n    var className = _a.className, showOpenInCodeSandbox = _a.showOpenInCodeSandbox, props = __rest(_a, [\n        \"className\",\n        \"showOpenInCodeSandbox\"\n    ]);\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n        className: classNames(\"cube-wrapper\", [\n            wrapperClassName$2,\n            className\n        ]),\n        title: \"Open in CodeSandbox\"\n    }, props, {\n        children: [\n            showOpenInCodeSandbox && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(OpenInCodeSandboxButton, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: classNames(\"cube\", [\n                    cubeClassName\n                ]),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    className: classNames(\"sides\", [\n                        sidesClassNames\n                    ]),\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"top\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"right\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"bottom\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"left\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"front\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: \"back\"\n                        })\n                    ]\n                })\n            })\n        ]\n    }));\n};\nvar loadingClassName = css({\n    backgroundColor: \"$colors$surface1\"\n});\nvar LoadingOverlay = function(_a) {\n    var clientId = _a.clientId, loading = _a.loading, className = _a.className, style = _a.style, showOpenInCodeSandbox = _a.showOpenInCodeSandbox, props = __rest(_a, [\n        \"clientId\",\n        \"loading\",\n        \"className\",\n        \"style\",\n        \"showOpenInCodeSandbox\"\n    ]);\n    var classNames = useClassNames();\n    var _b = useSandpack().sandpack, runSandpack = _b.runSandpack, environment = _b.environment;\n    var _c = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), shouldShowStdout = _c[0], setShouldShowStdout = _c[1];\n    var loadingOverlayState = useLoadingOverlayState(clientId, loading);\n    var progressMessage = useSandpackPreviewProgress({\n        clientId: clientId\n    });\n    var stdoutData = useSandpackShellStdout({\n        clientId: clientId\n    }).logs;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"LoadingOverlay.useEffect\": function() {\n            var timer;\n            if (progressMessage === null || progressMessage === void 0 ? void 0 : progressMessage.includes(\"Running\")) {\n                timer = setTimeout({\n                    \"LoadingOverlay.useEffect\": function() {\n                        setShouldShowStdout(true);\n                    }\n                }[\"LoadingOverlay.useEffect\"], 3000);\n            }\n            return ({\n                \"LoadingOverlay.useEffect\": function() {\n                    if (timer) {\n                        clearTimeout(timer);\n                    }\n                }\n            })[\"LoadingOverlay.useEffect\"];\n        }\n    }[\"LoadingOverlay.useEffect\"], [\n        progressMessage\n    ]);\n    if (loadingOverlayState === \"HIDDEN\") {\n        return null;\n    }\n    if (loadingOverlayState === \"TIMEOUT\") {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n            className: classNames(\"overlay\", [\n                classNames(\"error\"),\n                absoluteClassName,\n                errorClassName,\n                errorBundlerClassName,\n                className\n            ])\n        }, props, {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"error-message\", [\n                    errorMessageClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                        className: classNames(\"error-title\", [\n                            css({\n                                fontWeight: \"bold\"\n                            })\n                        ]),\n                        children: \"Couldn't connect to server\"\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: classNames(\"error-message\", [\n                            errorMessageClassName\n                        ]),\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                            children: [\n                                \"This means sandpack cannot connect to the runtime or your network is having some issues. Please check the network tab in your browser and try again. If the problem persists, report it via\",\n                                \" \",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n                                    href: \"mailto:hello@codesandbox.io?subject=Sandpack Timeout Error\",\n                                    children: \"email\"\n                                }),\n                                \" \",\n                                \"or submit an issue on\",\n                                \" \",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n                                    href: \"https://github.com/codesandbox/sandpack/issues\",\n                                    rel: \"noreferrer noopener\",\n                                    target: \"_blank\",\n                                    children: \"GitHub.\"\n                                })\n                            ]\n                        })\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                        className: classNames(\"error-message\", [\n                            errorMessageClassName({\n                                errorCode: true\n                            })\n                        ]),\n                        children: [\n                            \"ENV: \",\n                            environment,\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}),\n                            \"ERROR: TIME_OUT\"\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n                            className: classNames(\"button\", [\n                                classNames(\"icon-standalone\"),\n                                buttonClassName,\n                                iconStandaloneClassName,\n                                roundedButtonClassName\n                            ]),\n                            onClick: runSandpack,\n                            title: \"Restart script\",\n                            type: \"button\",\n                            children: [\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {}),\n                                \" \",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                    children: \"Try again\"\n                                })\n                            ]\n                        })\n                    })\n                ]\n            })\n        }));\n    }\n    var stillLoading = loadingOverlayState === \"LOADING\" || loadingOverlayState === \"PRE_FADING\";\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n                className: classNames(\"overlay\", [\n                    classNames(\"loading\"),\n                    absoluteClassName,\n                    loadingClassName,\n                    className\n                ]),\n                style: __assign(__assign({}, style), {\n                    opacity: stillLoading ? 1 : 0,\n                    transition: \"opacity \".concat(FADE_ANIMATION_DURATION, \"ms ease-out\")\n                })\n            }, props, {\n                children: [\n                    shouldShowStdout && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: stdoutPreview.toString(),\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StdoutList, {\n                            data: stdoutData\n                        })\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Loading, {\n                        showOpenInCodeSandbox: showOpenInCodeSandbox\n                    })\n                ]\n            })),\n            progressMessage && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: progressClassName$1.toString(),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                    children: progressMessage\n                })\n            })\n        ]\n    });\n};\nvar stdoutPreview = css({\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    bottom: \"$space$8\",\n    overflow: \"auto\",\n    opacity: 0.5,\n    overflowX: \"hidden\"\n});\nvar progressClassName$1 = css({\n    position: \"absolute\",\n    left: \"$space$5\",\n    bottom: \"$space$4\",\n    zIndex: \"$top\",\n    color: \"$colors$clickable\",\n    animation: \"\".concat(fadeIn, \" 150ms ease\"),\n    fontFamily: \"$font$mono\",\n    fontSize: \".8em\",\n    width: \"75%\",\n    p: {\n        whiteSpace: \"nowrap\",\n        margin: 0,\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\"\n    }\n});\nvar DependenciesProgress = function(_a) {\n    var clientId = _a.clientId;\n    var progressMessage = useSandpackPreviewProgress({\n        timeout: 3000,\n        clientId: clientId\n    });\n    if (!progressMessage) {\n        return null;\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: progressClassName.toString(),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n            children: progressMessage\n        })\n    });\n};\nvar progressClassName = css({\n    position: \"absolute\",\n    left: \"$space$5\",\n    bottom: \"$space$4\",\n    zIndex: \"$top\",\n    color: \"$colors$clickable\",\n    animation: \"\".concat(fadeIn, \" 150ms ease\"),\n    fontFamily: \"$font$mono\",\n    fontSize: \".8em\",\n    width: \"75%\",\n    p: {\n        whiteSpace: \"nowrap\",\n        margin: 0,\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\"\n    }\n});\nvar explorerClassName = css({\n    borderRadius: \"0\",\n    width: \"100%\",\n    padding: 0,\n    marginBottom: \"$space$2\",\n    span: {\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\"\n    },\n    svg: {\n        marginRight: \"$space$1\"\n    }\n});\nvar File = function(_a) {\n    var selectFile = _a.selectFile, path = _a.path, active = _a.active, onClick = _a.onClick, depth = _a.depth, isDirOpen = _a.isDirOpen;\n    var classNames = useClassNames();\n    var onClickButton = function(event) {\n        if (selectFile) {\n            selectFile(path);\n        }\n        onClick === null || onClick === void 0 ? void 0 : onClick(event);\n    };\n    var fileName = path.split(\"/\").filter(Boolean).pop();\n    var getIcon = function() {\n        if (selectFile) return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FileIcon, {});\n        return isDirOpen ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DirectoryIconOpen, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DirectoryIconClosed, {});\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n        className: classNames(\"button\", [\n            classNames(\"explorer\"),\n            buttonClassName,\n            explorerClassName\n        ]),\n        \"data-active\": active,\n        onClick: onClickButton,\n        style: {\n            paddingLeft: 18 * depth + \"px\"\n        },\n        title: fileName,\n        type: \"button\",\n        children: [\n            getIcon(),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                children: fileName\n            })\n        ]\n    });\n};\nvar Directory = function(_a) {\n    var prefixedPath = _a.prefixedPath, files = _a.files, selectFile = _a.selectFile, activeFile = _a.activeFile, depth = _a.depth, autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles, initialCollapsedFolder = _a.initialCollapsedFolder;\n    var _b = react__WEBPACK_IMPORTED_MODULE_1__.useState(!(initialCollapsedFolder === null || initialCollapsedFolder === void 0 ? void 0 : initialCollapsedFolder.includes(prefixedPath))), open = _b[0], setOpen = _b[1];\n    var toggle = function() {\n        return setOpen(function(prev) {\n            return !prev;\n        });\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(File, {\n                depth: depth,\n                isDirOpen: open,\n                onClick: toggle,\n                path: prefixedPath + \"/\"\n            }),\n            open && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ModuleList, {\n                activeFile: activeFile,\n                autoHiddenFiles: autoHiddenFiles,\n                depth: depth + 1,\n                files: files,\n                initialCollapsedFolder: initialCollapsedFolder,\n                prefixedPath: prefixedPath,\n                selectFile: selectFile,\n                visibleFiles: visibleFiles\n            })\n        ]\n    }, prefixedPath);\n};\nvar fromPropsToModules = function(_a) {\n    var autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles, files = _a.files, prefixedPath = _a.prefixedPath;\n    var hasVisibleFilesOption = visibleFiles.length > 0;\n    /**\n     * When visibleFiles or activeFile are set, the hidden and active flags on the files prop are ignored.\n     */ var filterByHiddenProperty = autoHiddenFiles && !hasVisibleFilesOption;\n    var filterByVisibleFilesOption = autoHiddenFiles && !!hasVisibleFilesOption;\n    var fileListWithoutPrefix = Object.keys(files).filter(function(filePath) {\n        var _a;\n        var isValidatedPath = filePath.startsWith(prefixedPath);\n        if (filterByVisibleFilesOption) {\n            return isValidatedPath && visibleFiles.includes(filePath);\n        }\n        if (filterByHiddenProperty) {\n            return isValidatedPath && !((_a = files[filePath]) === null || _a === void 0 ? void 0 : _a.hidden);\n        }\n        return isValidatedPath;\n    }).map(function(file) {\n        return file.substring(prefixedPath.length);\n    });\n    var directories = new Set(fileListWithoutPrefix.filter(function(file) {\n        return file.includes(\"/\");\n    }).map(function(file) {\n        return \"\".concat(prefixedPath).concat(file.split(\"/\")[0], \"/\");\n    }));\n    var modules = fileListWithoutPrefix.filter(function(file) {\n        return !file.includes(\"/\");\n    }).map(function(file) {\n        return \"\".concat(prefixedPath).concat(file);\n    });\n    return {\n        directories: Array.from(directories),\n        modules: modules\n    };\n};\nvar ModuleList = function(_a) {\n    var _b = _a.depth, depth = _b === void 0 ? 0 : _b, activeFile = _a.activeFile, selectFile = _a.selectFile, prefixedPath = _a.prefixedPath, files = _a.files, autoHiddenFiles = _a.autoHiddenFiles, visibleFiles = _a.visibleFiles, initialCollapsedFolder = _a.initialCollapsedFolder;\n    var _c = fromPropsToModules({\n        visibleFiles: visibleFiles,\n        autoHiddenFiles: autoHiddenFiles,\n        prefixedPath: prefixedPath,\n        files: files\n    }), directories = _c.directories, modules = _c.modules;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        children: [\n            directories.map(function(dir) {\n                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Directory, {\n                    activeFile: activeFile,\n                    autoHiddenFiles: autoHiddenFiles,\n                    depth: depth,\n                    files: files,\n                    initialCollapsedFolder: initialCollapsedFolder,\n                    prefixedPath: dir,\n                    selectFile: selectFile,\n                    visibleFiles: visibleFiles\n                }, dir);\n            }),\n            modules.map(function(file) {\n                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(File, {\n                    active: activeFile === file,\n                    depth: depth,\n                    path: file,\n                    selectFile: selectFile\n                }, file);\n            })\n        ]\n    });\n};\nvar fileExplorerClassName = css({\n    padding: \"$space$3\",\n    overflow: \"auto\",\n    height: \"100%\"\n});\nvar SandpackFileExplorer = function(_a) {\n    var className = _a.className, _b = _a.autoHiddenFiles, autoHiddenFiles = _b === void 0 ? false : _b, _c = _a.initialCollapsedFolder, initialCollapsedFolder = _c === void 0 ? [] : _c, props = __rest(_a, [\n        \"className\",\n        \"autoHiddenFiles\",\n        \"initialCollapsedFolder\"\n    ]);\n    var _d = useSandpack(), _e = _d.sandpack, status = _e.status, updateFile = _e.updateFile, deleteFile = _e.deleteFile, activeFile = _e.activeFile, files = _e.files, openFile = _e.openFile, visibleFilesFromProps = _e.visibleFilesFromProps, listen = _d.listen;\n    var classNames = useClassNames();\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function watchFSFilesChanges() {\n        if (status !== \"running\") return;\n        var unsubscribe = listen({\n            \"SandpackFileExplorer.useEffect.watchFSFilesChanges.unsubscribe\": function(message) {\n                if (message.type === \"fs/change\") {\n                    updateFile(message.path, message.content, false);\n                }\n                if (message.type === \"fs/remove\") {\n                    deleteFile(message.path, false);\n                }\n            }\n        }[\"SandpackFileExplorer.useEffect.watchFSFilesChanges.unsubscribe\"]);\n        return unsubscribe;\n    }, [\n        status\n    ]);\n    var orderedFiles = Object.keys(files).sort().reduce(function(obj, key) {\n        obj[key] = files[key];\n        return obj;\n    }, {});\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", __assign({\n        className: classNames(\"file-explorer\", [\n            stackClassName,\n            className\n        ])\n    }, props, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n            className: classNames(\"file-explorer-list\", [\n                fileExplorerClassName\n            ]),\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ModuleList, {\n                activeFile: activeFile,\n                autoHiddenFiles: autoHiddenFiles,\n                files: orderedFiles,\n                initialCollapsedFolder: initialCollapsedFolder,\n                prefixedPath: \"/\",\n                selectFile: openFile,\n                visibleFiles: visibleFilesFromProps\n            })\n        })\n    }));\n};\nvar splitUrl = function(url) {\n    var match = url.match(/(https?:\\/\\/.*?)\\//);\n    if (match && match[1]) {\n        return [\n            match[1],\n            url.replace(match[1], \"\")\n        ];\n    }\n    return [\n        url,\n        \"/\"\n    ];\n};\nvar navigatorClassName = css({\n    display: \"flex\",\n    alignItems: \"center\",\n    height: \"$layout$headerHeight\",\n    borderBottom: \"1px solid $colors$surface2\",\n    padding: \"$space$3 $space$2\",\n    background: \"$colors$surface1\"\n});\nvar inputClassName = css({\n    backgroundColor: \"$colors$surface2\",\n    color: \"$colors$clickable\",\n    padding: \"$space$1 $space$3\",\n    borderRadius: \"99999px\",\n    border: \"1px solid $colors$surface2\",\n    height: \"24px\",\n    lineHeight: \"24px\",\n    fontSize: \"inherit\",\n    outline: \"none\",\n    flex: 1,\n    marginLeft: \"$space$4\",\n    width: \"0\",\n    transition: \"background $transitions$default\",\n    \"&:hover\": {\n        backgroundColor: \"$colors$surface3\"\n    },\n    \"&:focus\": {\n        backgroundColor: \"$surface1\",\n        border: \"1px solid $colors$accent\",\n        color: \"$colors$base\"\n    }\n});\nvar Navigator = function(_a) {\n    var _b;\n    var clientId = _a.clientId, onURLChange = _a.onURLChange, className = _a.className, startRoute = _a.startRoute, props = __rest(_a, [\n        \"clientId\",\n        \"onURLChange\",\n        \"className\",\n        \"startRoute\"\n    ]);\n    var _c = react__WEBPACK_IMPORTED_MODULE_1__.useState(\"\"), baseUrl = _c[0], setBaseUrl = _c[1];\n    var _d = useSandpack(), sandpack = _d.sandpack, dispatch = _d.dispatch, listen = _d.listen;\n    var _e = react__WEBPACK_IMPORTED_MODULE_1__.useState((_b = startRoute !== null && startRoute !== void 0 ? startRoute : sandpack.startRoute) !== null && _b !== void 0 ? _b : \"/\"), relativeUrl = _e[0], setRelativeUrl = _e[1];\n    var _f = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), backEnabled = _f[0], setBackEnabled = _f[1];\n    var _g = react__WEBPACK_IMPORTED_MODULE_1__.useState(false), forwardEnabled = _g[0], setForwardEnabled = _g[1];\n    var classNames = useClassNames();\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"Navigator.useEffect\": function() {\n            var unsub = listen({\n                \"Navigator.useEffect.unsub\": function(message) {\n                    if (message.type === \"urlchange\") {\n                        var url = message.url, back = message.back, forward = message.forward;\n                        var _a = splitUrl(url), newBaseUrl = _a[0], newRelativeUrl = _a[1];\n                        setBaseUrl(newBaseUrl);\n                        setRelativeUrl(newRelativeUrl);\n                        setBackEnabled(back);\n                        setForwardEnabled(forward);\n                    }\n                }\n            }[\"Navigator.useEffect.unsub\"], clientId);\n            return ({\n                \"Navigator.useEffect\": function() {\n                    return unsub();\n                }\n            })[\"Navigator.useEffect\"];\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"Navigator.useEffect\"], []);\n    var handleInputChange = function(e) {\n        var path = e.target.value.startsWith(\"/\") ? e.target.value : \"/\".concat(e.target.value);\n        setRelativeUrl(path);\n    };\n    var handleKeyDown = function(e) {\n        if (e.code === \"Enter\") {\n            //  Enter\n            e.preventDefault();\n            e.stopPropagation();\n            if (typeof onURLChange === \"function\") {\n                onURLChange(baseUrl + e.currentTarget.value);\n            }\n        }\n    };\n    var handleRefresh = function() {\n        dispatch({\n            type: \"refresh\"\n        });\n    };\n    var handleBack = function() {\n        dispatch({\n            type: \"urlback\"\n        });\n    };\n    var handleForward = function() {\n        dispatch({\n            type: \"urlforward\"\n        });\n    };\n    var buttonsClassNames = classNames(\"button\", [\n        classNames(\"icon\"),\n        buttonClassName,\n        iconClassName,\n        css({\n            minWidth: \"$space$6\",\n            justifyContent: \"center\"\n        })\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n        className: classNames(\"navigator\", [\n            navigatorClassName,\n            className\n        ])\n    }, props, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                \"aria-label\": \"Go back one page\",\n                className: buttonsClassNames,\n                disabled: !backEnabled,\n                onClick: handleBack,\n                type: \"button\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BackwardIcon, {})\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                \"aria-label\": \"Go forward one page\",\n                className: buttonsClassNames,\n                disabled: !forwardEnabled,\n                onClick: handleForward,\n                type: \"button\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ForwardIcon, {})\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                \"aria-label\": \"Refresh page\",\n                className: buttonsClassNames,\n                onClick: handleRefresh,\n                type: \"button\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RefreshIcon, {})\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n                \"aria-label\": \"Current Sandpack URL\",\n                className: classNames(\"input\", [\n                    inputClassName\n                ]),\n                name: \"Current Sandpack URL\",\n                onChange: handleInputChange,\n                onKeyDown: handleKeyDown,\n                type: \"text\",\n                value: relativeUrl\n            })\n        ]\n    }));\n};\nvar _a$2;\nvar previewClassName = css((_a$2 = {\n    flex: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    background: \"white\",\n    overflow: \"auto\",\n    position: \"relative\"\n}, _a$2[\".\".concat(THEME_PREFIX, \"-bridge-frame\")] = {\n    border: 0,\n    position: \"absolute\",\n    left: \"$space$2\",\n    bottom: \"$space$2\",\n    zIndex: \"$top\",\n    height: 12,\n    width: \"30%\",\n    mixBlendMode: \"multiply\",\n    pointerEvents: \"none\"\n}, _a$2));\nvar previewIframe = css({\n    border: \"0\",\n    outline: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    minHeight: \"160px\",\n    maxHeight: \"2000px\",\n    flex: 1\n});\nvar previewActionsClassName$1 = css({\n    display: \"flex\",\n    position: \"absolute\",\n    bottom: \"$space$2\",\n    right: \"$space$2\",\n    zIndex: \"$overlay\",\n    gap: \"$space$2\"\n});\nvar SandpackPreview = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(_a, ref) {\n    var _b = _a.showNavigator, showNavigator = _b === void 0 ? false : _b, _c = _a.showRefreshButton, showRefreshButton = _c === void 0 ? true : _c, _d = _a.showOpenInCodeSandbox, showOpenInCodeSandbox = _d === void 0 ? true : _d, _e = _a.showSandpackErrorOverlay, showSandpackErrorOverlay = _e === void 0 ? true : _e;\n    _a.showOpenNewtab;\n    var _g = _a.showRestartButton, showRestartButton = _g === void 0 ? true : _g, _h = _a.actionsChildren, actionsChildren = _h === void 0 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}) : _h, children = _a.children, className = _a.className, _j = _a.startRoute, startRoute = _j === void 0 ? \"/\" : _j, props = __rest(_a, [\n        \"showNavigator\",\n        \"showRefreshButton\",\n        \"showOpenInCodeSandbox\",\n        \"showSandpackErrorOverlay\",\n        \"showOpenNewtab\",\n        \"showRestartButton\",\n        \"actionsChildren\",\n        \"children\",\n        \"className\",\n        \"startRoute\"\n    ]);\n    var _k = useSandpackClient({\n        startRoute: startRoute\n    }), sandpack = _k.sandpack, listen = _k.listen, iframe = _k.iframe, getClient = _k.getClient, clientId = _k.clientId, dispatch = _k.dispatch;\n    var _l = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), iframeComputedHeight = _l[0], setComputedAutoHeight = _l[1];\n    var status = sandpack.status;\n    var refresh = useSandpackNavigation(clientId).refresh;\n    var restart = useSandpackShell(clientId).restart;\n    var classNames = useClassNames();\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SandpackPreview.useEffect\": function() {\n            var unsubscribe = listen({\n                \"SandpackPreview.useEffect.unsubscribe\": function(message) {\n                    if (message.type === \"resize\") {\n                        setComputedAutoHeight(message.height);\n                    }\n                }\n            }[\"SandpackPreview.useEffect.unsubscribe\"]);\n            return unsubscribe;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"SandpackPreview.useEffect\"], []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, {\n        \"SandpackPreview.useImperativeHandle\": function() {\n            return {\n                clientId: clientId,\n                getClient: getClient\n            };\n        }\n    }[\"SandpackPreview.useImperativeHandle\"], [\n        getClient,\n        clientId\n    ]);\n    var handleNewURL = function(newUrl) {\n        if (!iframe.current) {\n            return;\n        }\n        iframe.current.src = newUrl;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n        className: classNames(\"preview\", [\n            className\n        ])\n    }, props, {\n        children: [\n            showNavigator && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Navigator, {\n                clientId: clientId,\n                onURLChange: handleNewURL,\n                startRoute: startRoute\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"preview-container\", [\n                    previewClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n                        ref: iframe,\n                        className: classNames(\"preview-iframe\", [\n                            previewIframe\n                        ]),\n                        style: {\n                            // set height based on the content only in auto mode\n                            // and when the computed height was returned by the bundler\n                            height: iframeComputedHeight ? iframeComputedHeight : undefined\n                        },\n                        title: \"Sandpack Preview\"\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: classNames(\"preview-actions\", [\n                            previewActionsClassName$1\n                        ]),\n                        children: [\n                            actionsChildren,\n                            showRestartButton && sandpack.environment === \"node\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n                                onClick: restart,\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {})\n                            }),\n                            !showNavigator && showRefreshButton && status === \"running\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n                                onClick: refresh,\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RefreshIcon, {})\n                            }),\n                            sandpack.teamId && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                                className: classNames(\"button\", [\n                                    classNames(\"icon-standalone\"),\n                                    buttonClassName,\n                                    iconStandaloneClassName,\n                                    roundedButtonClassName\n                                ]),\n                                onClick: function() {\n                                    return dispatch({\n                                        type: \"sign-out\"\n                                    });\n                                },\n                                title: \"Sign out\",\n                                type: \"button\",\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SignOutIcon, {})\n                            }),\n                            showOpenInCodeSandbox && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(OpenInCodeSandboxButton, {})\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LoadingOverlay, {\n                        clientId: clientId,\n                        showOpenInCodeSandbox: showOpenInCodeSandbox\n                    }),\n                    showSandpackErrorOverlay && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ErrorOverlay, {}),\n                    children\n                ]\n            })\n        ]\n    }));\n});\nvar _a$1;\nvar transpiledCodeClassName = css((_a$1 = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    position: \"relative\",\n    overflow: \"auto\",\n    minHeight: \"160px\",\n    flex: 1\n}, _a$1[\".\".concat(THEME_PREFIX, \"-stack\")] = {\n    height: \"100%\"\n}, _a$1));\nvar SandpackTranspiledCode = function(_a) {\n    var className = _a.className, props = __rest(_a, [\n        \"className\"\n    ]);\n    var sandpack = useSandpack().sandpack;\n    var transpiledCode = useTranspiledCode();\n    var classNames = useClassNames();\n    var hiddenIframeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SandpackTranspiledCode.useEffect\": function() {\n            var hiddenIframe = hiddenIframeRef.current;\n            if (hiddenIframe) {\n                sandpack.registerBundler(hiddenIframe, \"hidden\");\n            }\n            return ({\n                \"SandpackTranspiledCode.useEffect\": function() {\n                    sandpack.unregisterBundler(\"hidden\");\n                }\n            })[\"SandpackTranspiledCode.useEffect\"];\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"SandpackTranspiledCode.useEffect\"], []);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", __assign({\n        className: classNames(\"transpiled-code\", [\n            stackClassName,\n            transpiledCodeClassName,\n            className\n        ])\n    }, props, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackCodeViewer, __assign({\n                code: transpiledCode !== null && transpiledCode !== void 0 ? transpiledCode : \"\",\n                initMode: sandpack.initMode\n            }, props)),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n                ref: hiddenIframeRef,\n                style: {\n                    display: \"none\"\n                },\n                title: \"transpiled sandpack code\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ErrorOverlay, {}),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LoadingOverlay, {\n                clientId: \"hidden\",\n                showOpenInCodeSandbox: false\n            })\n        ]\n    }));\n};\nvar wrapperClassName$1 = css({\n    justifyContent: \"space-between\",\n    borderBottom: \"1px solid $colors$surface2\",\n    padding: \"0 $space$2\",\n    fontFamily: \"$font$mono\",\n    height: \"$layout$headerHeight\",\n    minHeight: \"$layout$headerHeight\",\n    overflowX: \"auto\",\n    whiteSpace: \"nowrap\"\n});\nvar flexClassName$1 = css({\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: \"$space$2\"\n});\nvar Header$1 = function(_a) {\n    var status = _a.status, suiteOnly = _a.suiteOnly, setSuiteOnly = _a.setSuiteOnly, setVerbose = _a.setVerbose, verbose = _a.verbose, watchMode = _a.watchMode, setWatchMode = _a.setWatchMode, showSuitesOnly = _a.showSuitesOnly, showWatchButton = _a.showWatchButton, showVerboseButton = _a.showVerboseButton, hideTestsAndSupressLogs = _a.hideTestsAndSupressLogs;\n    var classNames = useClassNames();\n    var buttonsClassName = classNames(\"test-header-button\", [\n        buttonClassName,\n        roundedButtonClassName,\n        css({\n            padding: \"$space$1 $space$3\"\n        })\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"test-header\", [\n            wrapperClassName$1,\n            flexClassName$1\n        ]),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: classNames(\"test-header-wrapper\", [\n                    flexClassName$1\n                ]),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                    className: classNames(\"test-header-title\", [\n                        css({\n                            lineHeight: 1,\n                            margin: 0,\n                            color: \"$colors$base\",\n                            fontSize: \"$font$size\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            gap: \"$space$2\"\n                        })\n                    ]),\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleIcon, {}),\n                        \"Tests\"\n                    ]\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-header-actions\", [\n                    flexClassName$1\n                ]),\n                children: [\n                    showSuitesOnly && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        className: buttonsClassName,\n                        \"data-active\": suiteOnly,\n                        disabled: status === \"initialising\",\n                        onClick: setSuiteOnly,\n                        type: \"button\",\n                        children: \"Suite only\"\n                    }),\n                    showVerboseButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        className: buttonsClassName,\n                        \"data-active\": verbose,\n                        disabled: status === \"initialising\" || hideTestsAndSupressLogs,\n                        onClick: setVerbose,\n                        type: \"button\",\n                        children: \"Verbose\"\n                    }),\n                    showWatchButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        className: buttonsClassName,\n                        \"data-active\": watchMode,\n                        disabled: status === \"initialising\",\n                        onClick: setWatchMode,\n                        type: \"button\",\n                        children: \"Watch\"\n                    })\n                ]\n            })\n        ]\n    });\n};\nvar RunButton = function(_a) {\n    var onClick = _a.onClick;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n        onClick: onClick,\n        title: \"Run tests\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunIcon, {})\n    });\n};\nvar setTestTheme = function(isDark) {\n    return {\n        \"--test-pass\": isDark ? \"#18df16\" : \"#15c213\",\n        \"--test-fail\": isDark ? \"#df162b\" : \"#c21325\",\n        \"--test-skip\": isDark ? \"#eace2b\" : \"#c2a813\",\n        \"--test-run\": isDark ? \"#eace2b\" : \"#c2a813\",\n        \"--test-title\": isDark ? \"#3fbabe\" : \"#256c6f\"\n    };\n};\nvar color = css({\n    variants: {\n        status: {\n            pass: {\n                color: \"var(--test-pass)\"\n            },\n            fail: {\n                color: \"var(--test-fail)\"\n            },\n            skip: {\n                color: \"var(--test-skip)\"\n            },\n            title: {\n                color: \"var(--test-title)\"\n            }\n        }\n    }\n});\nvar passTextClassName = color({\n    status: \"pass\"\n});\nvar failTextClassName = color({\n    status: \"fail\"\n});\nvar skipTextClassName = color({\n    status: \"skip\"\n});\nvar titleTextClassName = color({\n    status: \"title\"\n});\nvar background = css({\n    variants: {\n        status: {\n            pass: {\n                background: \"var(--test-pass)\",\n                color: \"$colors$surface1\"\n            },\n            fail: {\n                background: \"var(--test-fail)\",\n                color: \"$colors$surface1\"\n            },\n            run: {\n                background: \"var(--test-run)\",\n                color: \"$colors$surface1\"\n            }\n        }\n    }\n});\nvar runBackgroundClassName = background({\n    status: \"run\"\n});\nvar passBackgroundClassName = background({\n    status: \"pass\"\n});\nvar failBackgroundClassName = background({\n    status: \"fail\"\n});\nvar testContainerClassName = css({\n    marginLeft: \"$space$4\"\n});\nvar containerClassName$4 = css({\n    marginBottom: \"$space$2\",\n    color: \"$colors$clickable\"\n});\nvar testClassName = css({\n    marginBottom: \"$space$2\",\n    color: \"$colors$hover\"\n});\nvar durationClassName = css({\n    marginLeft: \"$space$2\"\n});\nvar gapRightClassName = css({\n    marginRight: \"$space$2\"\n});\nvar Tests = function(_a) {\n    var tests = _a.tests;\n    _a.style;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: classNames(\"test\", [\n            testContainerClassName\n        ]),\n        children: tests.map(function(test) {\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-result\", [\n                    containerClassName$4\n                ]),\n                children: [\n                    test.status === \"pass\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-pass-text\", [\n                            passTextClassName,\n                            gapRightClassName\n                        ]),\n                        children: \"\\u2713\"\n                    }),\n                    test.status === \"fail\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-fail-text\", [\n                            failTextClassName,\n                            gapRightClassName\n                        ]),\n                        children: \"\\u2715\"\n                    }),\n                    test.status === \"idle\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-idle-text\", [\n                            skipTextClassName,\n                            gapRightClassName\n                        ]),\n                        children: \"\\u25CB\"\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-name-text\", [\n                            testClassName\n                        ]),\n                        children: test.name\n                    }),\n                    test.duration !== undefined && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-duration-text\", [\n                            durationClassName\n                        ]),\n                        children: [\n                            \"(\",\n                            test.duration,\n                            \" ms)\"\n                        ]\n                    })\n                ]\n            }, test.name);\n        })\n    });\n};\nvar getTests = function(block) {\n    var _a;\n    var _b, _c;\n    return (_a = Object.values((_b = block.tests) !== null && _b !== void 0 ? _b : {})).concat.apply(_a, Object.values((_c = block.describes) !== null && _c !== void 0 ? _c : {}).map(getTests));\n};\nvar getFailingTests = function(block) {\n    return getTests(block).filter(function(t) {\n        return t.status === \"fail\";\n    });\n};\nvar getAllTestResults = function(specs) {\n    return specs.map(getSpecTestResults).reduce(function(acc, stats) {\n        return {\n            pass: acc.pass + stats.pass,\n            fail: acc.fail + stats.fail,\n            skip: acc.skip + stats.skip,\n            total: acc.total + stats.total\n        };\n    }, {\n        pass: 0,\n        skip: 0,\n        fail: 0,\n        total: 0\n    });\n};\nvar getSpecTestResults = function(spec) {\n    return getTests(spec).reduce(function(acc, test) {\n        return {\n            pass: test.status === \"pass\" ? acc.pass + 1 : acc.pass,\n            fail: test.status === \"fail\" ? acc.fail + 1 : acc.fail,\n            skip: test.status === \"idle\" || test.status === \"running\" ? acc.skip + 1 : acc.skip,\n            total: acc.total + 1\n        };\n    }, {\n        pass: 0,\n        fail: 0,\n        skip: 0,\n        total: 0\n    });\n};\nvar getAllSuiteResults = function(specs) {\n    return specs.filter(function(spec) {\n        var _a, _b;\n        return Object.values((_a = spec.describes) !== null && _a !== void 0 ? _a : {}).length > 0 || Object.values((_b = spec.tests) !== null && _b !== void 0 ? _b : {}).length > 0;\n    }).map(getSpecTestResults).reduce(function(acc, stats) {\n        return {\n            pass: acc.pass + (stats.fail === 0 ? 1 : 0),\n            fail: acc.fail + (stats.fail > 0 ? 1 : 0),\n            total: acc.total + 1\n        };\n    }, {\n        pass: 0,\n        fail: 0,\n        total: 0\n    });\n};\nvar getDuration = function(specs) {\n    return flatMap(specs, getTests).reduce(function(acc, test) {\n        return acc + (test.duration || 0);\n    }, 0);\n};\nvar isEmpty = function(block) {\n    var _a, _b;\n    return Object.values((_a = block.describes) !== null && _a !== void 0 ? _a : {}).length === 0 && Object.values((_b = block.tests) !== null && _b !== void 0 ? _b : {}).length === 0;\n};\nvar splitTail = function(as) {\n    var lastIndex = as.length - 1;\n    var head = as.slice(0, lastIndex);\n    var tail = as[lastIndex];\n    return [\n        head,\n        tail\n    ];\n};\nvar flatMap = function(as, f) {\n    return as.map(f).reduce(function(acc, next) {\n        return acc.concat(next);\n    }, []);\n};\nvar set = function(path, value) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(object) {\n        return (0,clean_set__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(object, path, value);\n    };\n};\nvar nameClassName = css({\n    color: \"$colors$hover\",\n    marginBottom: \"$space$2\"\n});\nvar containerClassName$3 = css({\n    marginLeft: \"$space$4\"\n});\nvar Describes = function(_a) {\n    var describes = _a.describes;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: describes.map(function(describe) {\n            var _a, _b;\n            if (isEmpty(describe)) {\n                return null;\n            }\n            var tests = Object.values((_a = describe.tests) !== null && _a !== void 0 ? _a : {});\n            var describes = Object.values((_b = describe.describes) !== null && _b !== void 0 ? _b : {});\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-describe\", [\n                    containerClassName$3\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                        className: classNames(\"test-name\", [\n                            nameClassName\n                        ]),\n                        children: describe.name\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Tests, {\n                        tests: tests\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Describes, {\n                        describes: describes\n                    })\n                ]\n            }, describe.name);\n        })\n    });\n};\nvar containerClassName$2 = css({\n    color: \"$colors$hover\",\n    fontSize: \"$font$size\",\n    padding: \"$space$2\",\n    whiteSpace: \"pre-wrap\"\n});\nvar FormattedError = function(_a) {\n    var error = _a.error, path = _a.path;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n        className: classNames(\"test-error\", [\n            containerClassName$2\n        ]),\n        dangerouslySetInnerHTML: {\n            __html: formatDiffMessage(error, path)\n        }\n    });\n};\nvar escapeHtml = function(unsafe) {\n    return unsafe.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n};\nvar formatDiffMessage = function(error, path) {\n    var _a, _b;\n    var finalMessage = \"\";\n    if (error.matcherResult) {\n        finalMessage = \"<span>\".concat(escapeHtml((_a = error.message) !== null && _a !== void 0 ? _a : \"\").replace(/(expected)/m, \"<span class=\\\"\".concat(passTextClassName, \"\\\">$1</span>\")).replace(/(received)/m, \"<span class=\\\"\".concat(failTextClassName, \"\\\">$1</span>\")).replace(/(Difference:)/m, \"<span>$1</span>\").replace(/(Expected:)(.*)/m, \"<span>$1</span><span class=\\\"\".concat(passTextClassName, \"\\\">$2</span>\")).replace(/(Received:)(.*)/m, \"<span>$1</span><span class=\\\"\".concat(failTextClassName, \"\\\">$2</span>\")).replace(/^(-.*)/gm, \"<span class=\\\"\".concat(failTextClassName, \"\\\">$1</span>\")).replace(/^(\\+.*)/gm, \"<span class=\\\"\".concat(passTextClassName, \"\\\">$1</span>\")), \"</span>\");\n    } else {\n        finalMessage = escapeHtml((_b = error.message) !== null && _b !== void 0 ? _b : \"\");\n    }\n    if (error.mappedErrors && error.mappedErrors[0] && error.mappedErrors[0].fileName.endsWith(path) && error.mappedErrors[0]._originalScriptCode) {\n        var mappedError = error.mappedErrors[0];\n        var _originalScriptCode = mappedError._originalScriptCode || [];\n        var widestNumber_1 = Math.max.apply(Math, _originalScriptCode.map(function(code) {\n            return (code.lineNumber + \"\").length;\n        })) + 2;\n        var margin_1 = Array.from({\n            length: widestNumber_1\n        }).map(function() {\n            return \" \";\n        });\n        finalMessage += \"<br />\";\n        finalMessage += \"<br />\";\n        finalMessage += \"<div>\";\n        _originalScriptCode.filter(function(s) {\n            return s.content.trim();\n        }).forEach(function(code) {\n            var currentLineMargin = (code.lineNumber + \"\").length;\n            var newMargin = __spreadArray([], margin_1, true);\n            newMargin.length -= currentLineMargin;\n            if (code.highlight) {\n                newMargin.length -= 2;\n            }\n            var toBeIndex = code.content.indexOf(\".to\");\n            var toBeMargin = Array.from({\n                length: margin_1.length + toBeIndex - (widestNumber_1 - 1)\n            }, function() {\n                return \" \";\n            });\n            var content = escapeHtml(code.content).replace(/(describe|test|it)(\\()(&#039;|&quot;|`)(.*)(&#039;|&quot;|`)/m, \"<span>$1$2$3</span><span class=\\\"\".concat(titleTextClassName, \"\\\">$4</span><span>$5</span>\")).replace(/(expect\\()(.*)(\\)\\..*)(to[\\w\\d]*)(\\()(.*)(\\))/m, \"<span>$1</span><span class=\\\"\".concat(failTextClassName, \"\\\">$2</span><span>$3</span><span style=\\\"text-decoration: underline; font-weight: 900\\\">$4</span><span>$5</span><span class=\\\"\").concat(passTextClassName, \"\\\">$6</span><span>$7</span>\"));\n            finalMessage += \"<div \".concat(code.highlight ? \"style=\\\"font-weight:200;\\\"\" : \"\", \">\") + (code.highlight ? \"<span class=\\\"\".concat(failTextClassName, \"\\\">></span> \") : \"\") + newMargin.join(\"\") + escapeHtml(\"\" + code.lineNumber) + \" | \" + content + \"</div>\" + (code.highlight ? \"<div>\" + margin_1.join(\"\") + \" | \" + toBeMargin.join(\"\") + \"<span class=\\\"\".concat(failTextClassName, \"\\\">^</span>\") + \"</div>\" : \"\");\n        });\n        finalMessage += \"</div>\";\n    }\n    return finalMessage.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br />\");\n};\nvar fileContainer = css({\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: \"$space$2\"\n});\nvar gapBottomClassName$1 = css({\n    marginBottom: \"$space$2\"\n});\nvar failTestClassName = css({\n    fontWeight: \"bold\"\n});\nvar labelClassName$1 = css({\n    borderRadius: \"calc($border$radius / 2)\"\n});\nvar specLabelClassName = css({\n    padding: \"$space$1 $space$2\",\n    fontFamily: \"$font$mono\",\n    textTransform: \"uppercase\",\n    marginRight: \"$space$2\"\n});\nvar filePathButtonClassName = css({\n    fontFamily: \"$font$mono\",\n    cursor: \"pointer\",\n    display: \"inline-block\"\n});\nvar filePathClassName = css({\n    color: \"$colors$clickable\",\n    textDecorationStyle: \"dotted\",\n    textDecorationLine: \"underline\"\n});\nvar fileNameClassName = css({\n    color: \"$colors$hover\",\n    fontWeight: \"bold\",\n    textDecorationStyle: \"dotted\",\n    textDecorationLine: \"underline\"\n});\nvar Specs = function(_a) {\n    var specs = _a.specs, openSpec = _a.openSpec, status = _a.status, verbose = _a.verbose, hideTestsAndSupressLogs = _a.hideTestsAndSupressLogs;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: specs.map(function(spec) {\n            if (spec.error) {\n                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    className: classNames(\"test-spec\", [\n                        gapBottomClassName$1\n                    ]),\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n                            className: classNames(\"test-spec-error\", [\n                                labelClassName$1,\n                                failBackgroundClassName\n                            ]),\n                            children: \"Error\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilePath, {\n                            onClick: function() {\n                                return openSpec(spec.name);\n                            },\n                            path: spec.name\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormattedError, {\n                            error: spec.error,\n                            path: spec.name\n                        })\n                    ]\n                }, spec.name);\n            }\n            if (isEmpty(spec)) {\n                return null;\n            }\n            var tests = Object.values(spec.tests);\n            var describes = Object.values(spec.describes);\n            var stats = getSpecTestResults(spec);\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-spec-name\", [\n                    gapBottomClassName$1\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                        className: classNames(\"test-spec-name-container\", [\n                            fileContainer\n                        ]),\n                        children: [\n                            status === \"complete\" ? stats.fail > 0 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n                                className: classNames(\"test-spec-complete\", [\n                                    labelClassName$1,\n                                    failBackgroundClassName\n                                ]),\n                                children: \"Fail\"\n                            }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n                                className: classNames(\"test-spec-pass\", [\n                                    labelClassName$1,\n                                    passBackgroundClassName\n                                ]),\n                                children: \"Pass\"\n                            }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SpecLabel, {\n                                className: classNames(\"test-spec-run\", [\n                                    labelClassName$1,\n                                    runBackgroundClassName\n                                ]),\n                                children: \"Run\"\n                            }),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilePath, {\n                                onClick: function() {\n                                    if (!hideTestsAndSupressLogs) {\n                                        openSpec(spec.name);\n                                    }\n                                },\n                                path: spec.name\n                            })\n                        ]\n                    }),\n                    verbose && !hideTestsAndSupressLogs && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Tests, {\n                        tests: tests\n                    }),\n                    verbose && !hideTestsAndSupressLogs && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Describes, {\n                        describes: describes\n                    }),\n                    !hideTestsAndSupressLogs && getFailingTests(spec).map(function(test) {\n                        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                            className: classNames(\"test-spec-error\", [\n                                gapBottomClassName$1\n                            ]),\n                            children: [\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                                    className: classNames(\"test-spec-error-text\", [\n                                        failTestClassName,\n                                        failTextClassName\n                                    ]),\n                                    children: [\n                                        \"\\u25CF \",\n                                        test.blocks.join(\" › \"),\n                                        \" \\u203A \",\n                                        test.name\n                                    ]\n                                }),\n                                test.errors.map(function(e) {\n                                    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FormattedError, {\n                                        error: e,\n                                        path: test.path\n                                    }, \"failing-\".concat(test.name, \"-error\"));\n                                })\n                            ]\n                        }, \"failing-\".concat(test.name));\n                    })\n                ]\n            }, spec.name);\n        })\n    });\n};\nvar SpecLabel = function(_a) {\n    var children = _a.children, className = _a.className;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n        className: classNames(\"test-spec-label\", [\n            specLabelClassName,\n            className\n        ]),\n        children: children\n    });\n};\nvar FilePath = function(_a) {\n    var onClick = _a.onClick, path = _a.path;\n    var parts = path.split(\"/\");\n    var basePath = parts.slice(0, parts.length - 1).join(\"/\") + \"/\";\n    var fileName = parts[parts.length - 1];\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"button\", {\n        className: classNames(\"test-filename\", [\n            buttonClassName,\n            filePathButtonClassName\n        ]),\n        onClick: onClick,\n        type: \"button\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: classNames(\"test-filename-base\", [\n                    filePathClassName\n                ]),\n                children: basePath\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                className: classNames(\"test-filename-file\", [\n                    fileNameClassName\n                ]),\n                children: fileName\n            })\n        ]\n    });\n};\nvar gapBottomClassName = css({\n    marginBottom: \"$space$2\"\n});\nvar labelClassName = css({\n    fontWeight: \"bold\",\n    color: \"$colors$hover\",\n    whiteSpace: \"pre-wrap\"\n});\nvar containerClassName$1 = css({\n    fontWeight: \"bold\",\n    color: \"$colors$clickable\"\n});\nvar Summary = function(_a) {\n    var suites = _a.suites, tests = _a.tests, duration = _a.duration;\n    var widestLabel = \"Test suites: \";\n    var withMargin = function(label) {\n        var difference = widestLabel.length - label.length;\n        var margin = Array.from({\n            length: difference\n        }, function() {\n            return \" \";\n        }).join(\"\");\n        return label + margin;\n    };\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"test-summary\", [\n            containerClassName$1\n        ]),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-summary\", [\n                    gapBottomClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-summary-suites-label\", [\n                            labelClassName\n                        ]),\n                        children: widestLabel\n                    }),\n                    suites.fail > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-summary-suites-fail\", [\n                            failTextClassName\n                        ]),\n                        children: [\n                            suites.fail,\n                            \" failed,\",\n                            \" \"\n                        ]\n                    }),\n                    suites.pass > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-summary-suites-pass\", [\n                            passTextClassName\n                        ]),\n                        children: [\n                            suites.pass,\n                            \" passed,\",\n                            \" \"\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        children: [\n                            suites.total,\n                            \" total\"\n                        ]\n                    })\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-summary\", [\n                    gapBottomClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        className: classNames(\"test-summary-label\", [\n                            labelClassName\n                        ]),\n                        children: withMargin(\"Tests:\")\n                    }),\n                    tests.fail > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-summary-fail\", [\n                            failTextClassName\n                        ]),\n                        children: [\n                            tests.fail,\n                            \" failed,\",\n                            \" \"\n                        ]\n                    }),\n                    tests.skip > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-summary-skip\", [\n                            skipTextClassName\n                        ]),\n                        children: [\n                            tests.skip,\n                            \" skipped,\",\n                            \" \"\n                        ]\n                    }),\n                    tests.pass > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        className: classNames(\"test-summary-pass\", [\n                            passTextClassName\n                        ]),\n                        children: [\n                            tests.pass,\n                            \" passed,\",\n                            \" \"\n                        ]\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n                        children: [\n                            tests.total,\n                            \" total\"\n                        ]\n                    })\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"test-summary-curation\", [\n                    labelClassName\n                ]),\n                children: [\n                    withMargin(\"Time:\"),\n                    duration / 1000,\n                    \"s\"\n                ]\n            })\n        ]\n    });\n};\nvar previewActionsClassName = css({\n    display: \"flex\",\n    position: \"absolute\",\n    bottom: \"$space$2\",\n    right: \"$space$2\",\n    zIndex: \"$overlay\",\n    \"> *\": {\n        marginLeft: \"$space$2\"\n    }\n});\nvar INITIAL_STATE = {\n    specs: {},\n    status: \"initialising\",\n    verbose: false,\n    watchMode: true,\n    suiteOnly: false,\n    specsCount: 0\n};\nvar SandpackTests = function(_a) {\n    var _b = _a.verbose, verbose = _b === void 0 ? false : _b, _c = _a.watchMode, watchMode = _c === void 0 ? true : _c, style = _a.style, className = _a.className, onComplete = _a.onComplete, actionsChildren = _a.actionsChildren, _d = _a.showVerboseButton, showVerboseButton = _d === void 0 ? true : _d, _e = _a.showWatchButton, showWatchButton = _e === void 0 ? true : _e, _f = _a.hideTestsAndSupressLogs, hideTestsAndSupressLogs = _f === void 0 ? false : _f, props = __rest(_a, [\n        \"verbose\",\n        \"watchMode\",\n        \"style\",\n        \"className\",\n        \"onComplete\",\n        \"actionsChildren\",\n        \"showVerboseButton\",\n        \"showWatchButton\",\n        \"hideTestsAndSupressLogs\"\n    ]);\n    var theme = useSandpackTheme();\n    var _g = useSandpackClient(), getClient = _g.getClient, iframe = _g.iframe, listen = _g.listen, sandpack = _g.sandpack;\n    var _h = react__WEBPACK_IMPORTED_MODULE_1__.useState(__assign(__assign({}, INITIAL_STATE), {\n        verbose: verbose,\n        watchMode: watchMode\n    })), state = _h[0], setState = _h[1];\n    var runAllTests = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SandpackTests.useCallback[runAllTests]\": function() {\n            setState({\n                \"SandpackTests.useCallback[runAllTests]\": function(oldState) {\n                    return __assign(__assign({}, oldState), {\n                        status: \"running\",\n                        specs: {}\n                    });\n                }\n            }[\"SandpackTests.useCallback[runAllTests]\"]);\n            var client = getClient();\n            if (client) {\n                client.dispatch({\n                    type: \"run-all-tests\"\n                });\n            }\n        }\n    }[\"SandpackTests.useCallback[runAllTests]\"], [\n        getClient\n    ]);\n    var runSpec = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SandpackTests.useCallback[runSpec]\": function() {\n            setState({\n                \"SandpackTests.useCallback[runSpec]\": function(oldState) {\n                    return __assign(__assign({}, oldState), {\n                        status: \"running\",\n                        specs: {}\n                    });\n                }\n            }[\"SandpackTests.useCallback[runSpec]\"]);\n            var client = getClient();\n            if (client) {\n                client.dispatch({\n                    type: \"run-tests\",\n                    path: sandpack.activeFile\n                });\n            }\n        }\n    }[\"SandpackTests.useCallback[runSpec]\"], [\n        getClient,\n        sandpack.activeFile\n    ]);\n    var testFileRegex = /.*\\.(test|spec)\\.[tj]sx?$/;\n    var isSpecOpen = sandpack.activeFile.match(testFileRegex) !== null;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SandpackTests.useEffect\": function() {\n            var currentDescribeBlocks = [];\n            var currentSpec = \"\";\n            var unsubscribe = listen({\n                \"SandpackTests.useEffect.unsubscribe\": function(data) {\n                    // Note: short-circuit if message isn't for the currently active spec when `suiteOnly` is true\n                    if (state.suiteOnly && (\"path\" in data && data.path !== sandpack.activeFile || \"test\" in data && \"path\" in data.test && data.test.path !== sandpack.activeFile)) {\n                        return;\n                    }\n                    if (data.type === \"action\" && data.action === \"clear-errors\" && data.source === \"jest\") {\n                        currentSpec = data.path;\n                        return;\n                    }\n                    if (data.type === \"test\") {\n                        if (data.event === \"initialize_tests\") {\n                            currentDescribeBlocks = [];\n                            currentSpec = \"\";\n                            if (state.watchMode) {\n                                return runAllTests();\n                            } else {\n                                return setState({\n                                    \"SandpackTests.useEffect.unsubscribe\": function(oldState) {\n                                        return __assign(__assign({}, oldState), {\n                                            status: \"idle\",\n                                            specs: {}\n                                        });\n                                    }\n                                }[\"SandpackTests.useEffect.unsubscribe\"]);\n                            }\n                        }\n                        if (data.event === \"test_count\") {\n                            return setState({\n                                \"SandpackTests.useEffect.unsubscribe\": function(oldState) {\n                                    return __assign(__assign({}, oldState), {\n                                        specsCount: data.count\n                                    });\n                                }\n                            }[\"SandpackTests.useEffect.unsubscribe\"]);\n                        }\n                        if (data.event === \"total_test_start\") {\n                            currentDescribeBlocks = [];\n                            return setState({\n                                \"SandpackTests.useEffect.unsubscribe\": function(oldState) {\n                                    return __assign(__assign({}, oldState), {\n                                        status: \"running\"\n                                    });\n                                }\n                            }[\"SandpackTests.useEffect.unsubscribe\"]);\n                        }\n                        if (data.event === \"total_test_end\") {\n                            return setState({\n                                \"SandpackTests.useEffect.unsubscribe\": function(oldState) {\n                                    if (onComplete !== undefined) {\n                                        onComplete(oldState.specs);\n                                    }\n                                    return __assign(__assign({}, oldState), {\n                                        status: \"complete\"\n                                    });\n                                }\n                            }[\"SandpackTests.useEffect.unsubscribe\"]);\n                        }\n                        if (data.event === \"add_file\") {\n                            return setState(set([\n                                \"specs\",\n                                data.path\n                            ], {\n                                describes: {},\n                                tests: {},\n                                name: data.path\n                            }));\n                        }\n                        if (data.event === \"remove_file\") {\n                            return setState({\n                                \"SandpackTests.useEffect.unsubscribe\": function(oldState) {\n                                    var specs = Object.entries(oldState.specs).reduce({\n                                        \"SandpackTests.useEffect.unsubscribe.specs\": function(acc, _a) {\n                                            var _b;\n                                            var key = _a[0], value = _a[1];\n                                            if (key === data.path) {\n                                                return acc;\n                                            } else {\n                                                return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n                                            }\n                                        }\n                                    }[\"SandpackTests.useEffect.unsubscribe.specs\"], {});\n                                    return __assign(__assign({}, oldState), {\n                                        specs: specs\n                                    });\n                                }\n                            }[\"SandpackTests.useEffect.unsubscribe\"]);\n                        }\n                        if (data.event === \"file_error\") {\n                            return setState(set([\n                                \"specs\",\n                                data.path,\n                                \"error\"\n                            ], data.error));\n                        }\n                        if (data.event === \"describe_start\") {\n                            currentDescribeBlocks.push(data.blockName);\n                            var _a = splitTail(currentDescribeBlocks), describePath = _a[0], currentDescribe = _a[1];\n                            var spec = currentSpec;\n                            if (currentDescribe === undefined) {\n                                return;\n                            }\n                            return setState(set(__spreadArray(__spreadArray([\n                                \"specs\",\n                                spec,\n                                \"describes\"\n                            ], flatMap(describePath, {\n                                \"SandpackTests.useEffect.unsubscribe\": function(name) {\n                                    return [\n                                        name,\n                                        \"describes\"\n                                    ];\n                                }\n                            }[\"SandpackTests.useEffect.unsubscribe\"]), true), [\n                                currentDescribe\n                            ], false), {\n                                name: data.blockName,\n                                tests: {},\n                                describes: {}\n                            }));\n                        }\n                        if (data.event === \"describe_end\") {\n                            currentDescribeBlocks.pop();\n                            return;\n                        }\n                        if (data.event === \"add_test\") {\n                            var _b = splitTail(currentDescribeBlocks), describePath = _b[0], currentDescribe = _b[1];\n                            var test_1 = {\n                                status: \"idle\",\n                                errors: [],\n                                name: data.testName,\n                                blocks: __spreadArray([], currentDescribeBlocks, true),\n                                path: data.path\n                            };\n                            if (currentDescribe === undefined) {\n                                return setState(set([\n                                    \"specs\",\n                                    data.path,\n                                    \"tests\",\n                                    data.testName\n                                ], test_1));\n                            } else {\n                                return setState(set(__spreadArray(__spreadArray([\n                                    \"specs\",\n                                    data.path,\n                                    \"describes\"\n                                ], flatMap(describePath, {\n                                    \"SandpackTests.useEffect.unsubscribe\": function(name) {\n                                        return [\n                                            name,\n                                            \"describes\"\n                                        ];\n                                    }\n                                }[\"SandpackTests.useEffect.unsubscribe\"]), true), [\n                                    currentDescribe,\n                                    \"tests\",\n                                    data.testName\n                                ], false), test_1));\n                            }\n                        }\n                        if (data.event === \"test_start\") {\n                            var test_2 = data.test;\n                            var _c = splitTail(test_2.blocks), describePath = _c[0], currentDescribe = _c[1];\n                            var startedTest = {\n                                status: \"running\",\n                                name: test_2.name,\n                                blocks: test_2.blocks,\n                                path: test_2.path,\n                                errors: []\n                            };\n                            if (currentDescribe === undefined) {\n                                return setState(set([\n                                    \"specs\",\n                                    test_2.path,\n                                    \"tests\",\n                                    test_2.name\n                                ], startedTest));\n                            } else {\n                                return setState(set(__spreadArray(__spreadArray([\n                                    \"specs\",\n                                    test_2.path,\n                                    \"describes\"\n                                ], flatMap(describePath, {\n                                    \"SandpackTests.useEffect.unsubscribe\": function(name) {\n                                        return [\n                                            name,\n                                            \"describes\"\n                                        ];\n                                    }\n                                }[\"SandpackTests.useEffect.unsubscribe\"]), true), [\n                                    currentDescribe,\n                                    \"tests\",\n                                    test_2.name\n                                ], false), startedTest));\n                            }\n                        }\n                        if (data.event === \"test_end\") {\n                            var test_3 = data.test;\n                            var _d = splitTail(test_3.blocks), describePath = _d[0], currentDescribe = _d[1];\n                            var endedTest = {\n                                status: test_3.status,\n                                errors: test_3.errors,\n                                duration: test_3.duration,\n                                name: test_3.name,\n                                blocks: test_3.blocks,\n                                path: test_3.path\n                            };\n                            if (currentDescribe === undefined) {\n                                return setState(set([\n                                    \"specs\",\n                                    test_3.path,\n                                    \"tests\",\n                                    test_3.name\n                                ], endedTest));\n                            } else {\n                                return setState(set(__spreadArray(__spreadArray([\n                                    \"specs\",\n                                    test_3.path,\n                                    \"describes\"\n                                ], flatMap(describePath, {\n                                    \"SandpackTests.useEffect.unsubscribe\": function(name) {\n                                        return [\n                                            name,\n                                            \"describes\"\n                                        ];\n                                    }\n                                }[\"SandpackTests.useEffect.unsubscribe\"]), true), [\n                                    currentDescribe,\n                                    \"tests\",\n                                    test_3.name\n                                ], false), endedTest));\n                            }\n                        }\n                    }\n                }\n            }[\"SandpackTests.useEffect.unsubscribe\"]);\n            return unsubscribe;\n        }\n    }[\"SandpackTests.useEffect\"], [\n        state.suiteOnly,\n        state.watchMode,\n        sandpack.activeFile\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function watchMode() {\n        var unsunscribe = listen({\n            \"SandpackTests.useEffect.watchMode.unsunscribe\": function(_a) {\n                var type = _a.type;\n                if (type === \"done\" && state.watchMode) {\n                    if (isSpecOpen) {\n                        runSpec();\n                    } else {\n                        runAllTests();\n                    }\n                }\n            }\n        }[\"SandpackTests.useEffect.watchMode.unsunscribe\"]);\n        return unsunscribe;\n    }, [\n        runSpec,\n        runAllTests,\n        state.watchMode,\n        isSpecOpen\n    ]);\n    var openSpec = function(file) {\n        sandpack.setActiveFile(file);\n    };\n    var specs = Object.values(state.specs);\n    var duration = getDuration(specs);\n    var testResults = getAllTestResults(specs);\n    var suiteResults = getAllSuiteResults(specs);\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n        className: classNames(\"tests\", [\n            className\n        ]),\n        style: __assign(__assign({}, setTestTheme(theme.themeMode === \"dark\")), style)\n    }, props, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n                ref: iframe,\n                style: {\n                    display: \"none\"\n                },\n                title: \"Sandpack Tests\"\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Header$1, {\n                hideTestsAndSupressLogs: hideTestsAndSupressLogs,\n                setSuiteOnly: function() {\n                    return setState(function(s) {\n                        return __assign(__assign({}, s), {\n                            suiteOnly: !s.suiteOnly\n                        });\n                    });\n                },\n                setVerbose: function() {\n                    return setState(function(s) {\n                        return __assign(__assign({}, s), {\n                            verbose: !s.verbose\n                        });\n                    });\n                },\n                setWatchMode: function() {\n                    setState(function(s) {\n                        return __assign(__assign({}, s), {\n                            watchMode: !s.watchMode\n                        });\n                    });\n                },\n                showSuitesOnly: state.specsCount > 1,\n                showVerboseButton: showVerboseButton,\n                showWatchButton: showWatchButton,\n                status: state.status,\n                suiteOnly: state.suiteOnly,\n                verbose: state.verbose,\n                watchMode: state.watchMode\n            }),\n            state.status === \"running\" || state.status === \"initialising\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Loading, {\n                showOpenInCodeSandbox: false\n            }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: previewActionsClassName.toString(),\n                children: [\n                    actionsChildren,\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RunButton, {\n                        onClick: state.suiteOnly ? runSpec : runAllTests\n                    })\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                className: containerClassName.toString(),\n                children: specs.length === 0 && state.status === \"complete\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                    className: fileErrorContainerClassName.toString(),\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n                            children: \"No test files found.\"\n                        }),\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                            children: [\n                                \"Test match:\",\n                                \" \",\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                    className: failTextClassName.toString(),\n                                    children: testFileRegex.toString()\n                                })\n                            ]\n                        })\n                    ]\n                }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Specs, {\n                            hideTestsAndSupressLogs: hideTestsAndSupressLogs,\n                            openSpec: openSpec,\n                            specs: specs,\n                            status: state.status,\n                            verbose: state.verbose\n                        }),\n                        state.status === \"complete\" && testResults.total > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Summary, {\n                            duration: duration,\n                            suites: suiteResults,\n                            tests: testResults\n                        })\n                    ]\n                })\n            })\n        ]\n    }));\n};\nvar containerClassName = css({\n    padding: \"$space$4\",\n    height: \"100%\",\n    overflow: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    fontFamily: \"$font$mono\"\n});\nvar fileErrorContainerClassName = css({\n    fontWeight: \"bold\",\n    color: \"$colors$base\"\n});\nvar SYNTAX_ERROR_PATTERN = [\n    \"SyntaxError: \",\n    \"Error in sandbox:\"\n];\nvar CLEAR_LOG = {\n    id: \"random\",\n    method: \"clear\",\n    data: [\n        \"Console was cleared\"\n    ]\n};\nvar TRANSFORMED_TYPE_KEY = \"@t\";\nvar TRANSFORMED_TYPE_KEY_ALTERNATE = \"#@t\";\nvar CIRCULAR_REF_KEY = \"@r\";\nvar MAX_LENGTH_STRING = 10000;\nvar MAX_NEST_LEVEL = 2;\nvar MAX_KEYS = 400;\nvar MAX_MESSAGE_COUNT = MAX_KEYS * 2;\n/* eslint-disable @typescript-eslint/ban-ts-comment */ /* eslint-disable @typescript-eslint/no-empty-function */ /* eslint-disable @typescript-eslint/explicit-function-return-type */ /* eslint-disable @typescript-eslint/no-explicit-any */ // Const\nvar GLOBAL = function getGlobal() {\n    if (typeof globalThis !== \"undefined\") return globalThis; // modern standard\n    if (false) {} // browser\n    if (typeof global !== \"undefined\") return global; // Node.js\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof self !== \"undefined\") return self; // Web Worker\n    throw Error(\"Unable to locate global object\");\n}();\nvar ARRAY_BUFFER_SUPPORTED = typeof ArrayBuffer === \"function\";\nvar MAP_SUPPORTED = typeof Map === \"function\";\nvar SET_SUPPORTED = typeof Set === \"function\";\nvar Arithmetic;\n(function(Arithmetic) {\n    Arithmetic[Arithmetic[\"infinity\"] = 0] = \"infinity\";\n    Arithmetic[Arithmetic[\"minusInfinity\"] = 1] = \"minusInfinity\";\n    Arithmetic[Arithmetic[\"minusZero\"] = 2] = \"minusZero\";\n})(Arithmetic || (Arithmetic = {}));\nvar transformers = {\n    Arithmetic: function(data) {\n        if (data === Arithmetic.infinity) return Infinity;\n        if (data === Arithmetic.minusInfinity) return -Infinity;\n        if (data === Arithmetic.minusZero) return -0;\n        return data;\n    },\n    HTMLElement: function(data) {\n        var sandbox = document.implementation.createHTMLDocument(\"sandbox\");\n        try {\n            var element = sandbox.createElement(data.tagName);\n            element.innerHTML = data.innerHTML;\n            for(var _i = 0, _a = Object.keys(data.attributes); _i < _a.length; _i++){\n                var attribute = _a[_i];\n                try {\n                    element.setAttribute(attribute, data.attributes[attribute]);\n                } catch (_b) {\n                //\n                }\n            }\n            return element;\n        } catch (e) {\n            return data;\n        }\n    },\n    Function: function(data) {\n        var tempFun = function() {};\n        Object.defineProperty(tempFun, \"toString\", {\n            value: function() {\n                return \"function \".concat(data.name, \"() {\").concat(data.body, \"}\");\n            }\n        });\n        return tempFun;\n    },\n    \"[[NaN]]\": function() {\n        return NaN;\n    },\n    \"[[undefined]]\": function() {\n        return void 0;\n    },\n    \"[[Date]]\": function(val) {\n        var date = new Date();\n        date.setTime(val);\n        return date;\n    },\n    \"[[RegExp]]\": function(val) {\n        return new RegExp(val.src, val.flags);\n    },\n    \"[[Error]]\": function(val) {\n        var Ctor = GLOBAL[val.name] || Error;\n        var err = new Ctor(val.message);\n        err.stack = val.stack;\n        return err;\n    },\n    \"[[ArrayBuffer]]\": function(val) {\n        if (ARRAY_BUFFER_SUPPORTED) {\n            var buffer = new ArrayBuffer(val.length);\n            var view = new Int8Array(buffer);\n            view.set(val);\n            return buffer;\n        }\n        return val;\n    },\n    \"[[TypedArray]]\": function(val) {\n        return typeof GLOBAL[val.ctorName] === \"function\" ? new GLOBAL[val.ctorName](val.arr) : val.arr;\n    },\n    \"[[Map]]\": function(val) {\n        if (MAP_SUPPORTED) {\n            // NOTE: new Map(iterable) is not supported by all browsers\n            var map = new Map();\n            for(var i = 0; i < val.length; i += 2)map.set(val[i], val[i + 1]);\n            return map;\n        }\n        var kvArr = [];\n        // @ts-ignore\n        for(var j = 0; j < val.length; j += 2)kvArr.push([\n            val[i],\n            val[i + 1]\n        ]);\n        return kvArr;\n    },\n    \"[[Set]]\": function(val) {\n        if (SET_SUPPORTED) {\n            // NOTE: new Set(iterable) is not supported by all browsers\n            var set = new Set();\n            for(var i = 0; i < val.length; i++)set.add(val[i]);\n            return set;\n        }\n        return val;\n    }\n};\n/* eslint-disable @typescript-eslint/array-type */ /* eslint-disable @typescript-eslint/ban-ts-comment */ /* eslint-disable @typescript-eslint/no-empty-function */ /* eslint-disable @typescript-eslint/explicit-function-return-type */ /* eslint-disable @typescript-eslint/ban-types */ /* eslint-disable @typescript-eslint/no-explicit-any */ var formatSymbols = function(message) {\n    var _a;\n    if (typeof message === \"string\" || typeof message === \"number\" || message === null) {\n        return message;\n    } else if (Array.isArray(message)) {\n        return message.map(formatSymbols);\n    } else if (typeof message == \"object\" && TRANSFORMED_TYPE_KEY in message) {\n        var type = message[TRANSFORMED_TYPE_KEY];\n        var transform = transformers[type];\n        return transform(message.data);\n    } else if (typeof message == \"object\" && TRANSFORMED_TYPE_KEY_ALTERNATE in message) {\n        var type = message[TRANSFORMED_TYPE_KEY_ALTERNATE];\n        var transform = transformers[type];\n        return transform(message.data);\n    } else if (typeof message == \"object\" && ((_a = message.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"NodeList\") {\n        var NodeList_1 = {};\n        Object.entries(message).forEach(function(_a) {\n            var key = _a[0], value = _a[1];\n            // @ts-ignore\n            NodeList_1[key] = formatSymbols(value);\n        });\n        return NodeList_1;\n    }\n    return message;\n};\nvar arrayToString = function(output, references, level) {\n    var mergeArray = output.reduce(function(acc, curr, index) {\n        return \"\".concat(acc).concat(index ? \", \" : \"\").concat(fromConsoleToString(curr, references, level));\n    }, \"\");\n    return \"[\".concat(mergeArray, \"]\");\n};\nvar objectToString = function(output, references, level) {\n    var constructorName = output.constructor.name !== \"Object\" ? \"\".concat(output.constructor.name, \" \") : \"\";\n    if (level > MAX_NEST_LEVEL) {\n        return constructorName;\n    }\n    var entries = Object.entries(output);\n    var formattedObject = Object.entries(output).reduce(function(acc, _a, index) {\n        var key = _a[0], value = _a[1];\n        var comma = index === 0 ? \"\" : \", \";\n        var breakLine = entries.length > 10 ? \"\\n  \" : \"\";\n        var formatted = fromConsoleToString(value, references, level);\n        if (index === MAX_KEYS) {\n            return acc + breakLine + \"...\";\n        } else if (index > MAX_KEYS) {\n            return acc;\n        }\n        return acc + \"\".concat(comma).concat(breakLine).concat(key, \": \") + formatted;\n    }, \"\");\n    return \"\".concat(constructorName, \"{ \").concat(formattedObject).concat(entries.length > 10 ? \"\\n\" : \" \", \"}\");\n};\nvar fromConsoleToString = function(message, references, level) {\n    var _a;\n    if (level === void 0) {\n        level = 0;\n    }\n    try {\n        var output_1 = formatSymbols(message);\n        if (Array.isArray(output_1)) {\n            return arrayToString(output_1, references, level + 1);\n        }\n        switch(typeof output_1){\n            case \"string\":\n                return \"\\\"\".concat(output_1, \"\\\"\").slice(0, MAX_LENGTH_STRING);\n            case \"number\":\n            case \"function\":\n            case \"symbol\":\n                return output_1.toString();\n            case \"boolean\":\n                return String(output_1);\n            case \"undefined\":\n                return \"undefined\";\n            case \"object\":\n            default:\n                if (output_1 instanceof RegExp || output_1 instanceof Error || output_1 instanceof Date) {\n                    return output_1.toString();\n                }\n                if (output_1 === null) {\n                    return String(null);\n                }\n                if (output_1 instanceof HTMLElement) {\n                    return output_1.outerHTML.slice(0, MAX_LENGTH_STRING);\n                }\n                if (Object.entries(output_1).length === 0) {\n                    return \"{}\";\n                }\n                if (CIRCULAR_REF_KEY in output_1) {\n                    if (level > MAX_NEST_LEVEL) {\n                        return \"Unable to print information\";\n                    }\n                    var newMessage = references[output_1[CIRCULAR_REF_KEY]];\n                    return fromConsoleToString(newMessage, references, level + 1);\n                }\n                if (((_a = output_1.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"NodeList\") {\n                    var length_1 = output_1.length;\n                    var nodes = new Array(length_1).fill(null).map(function(_, index) {\n                        return fromConsoleToString(output_1[index], references);\n                    });\n                    return \"NodeList(\".concat(output_1.length, \")[\").concat(nodes, \"]\");\n                }\n                return objectToString(output_1, references, level + 1);\n        }\n    } catch (_b) {\n        return \"Unable to print information\";\n    }\n};\nvar getType = function(message) {\n    switch(message){\n        case \"warn\":\n            return \"warning\";\n        case \"clear\":\n            return \"clear\";\n        case \"error\":\n            return \"error\";\n        case \"log\":\n        case \"info\":\n        default:\n            return \"info\";\n    }\n};\nvar _a;\nvar ConsoleList = function(_a) {\n    var data = _a.data;\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: data.map(function(_a, logIndex, references) {\n            var data = _a.data, id = _a.id, method = _a.method;\n            if (!data) return null;\n            if (Array.isArray(data)) {\n                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                    children: data.map(function(msg, msgIndex) {\n                        var fixReferences = references.slice(logIndex, references.length);\n                        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                            className: classNames(\"console-item\", [\n                                consoleItemClassName({\n                                    variant: getType(method)\n                                })\n                            ]),\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CodeMirror, {\n                                code: method === \"clear\" ? msg : fromConsoleToString(msg, fixReferences),\n                                fileType: \"js\",\n                                initMode: \"user-visible\",\n                                showReadOnly: false,\n                                readOnly: true,\n                                wrapContent: true\n                            })\n                        }, \"\".concat(id, \"-\").concat(msgIndex));\n                    })\n                }, id);\n            }\n            return null;\n        })\n    });\n};\nvar consoleItemClassName = css((_a = {\n    width: \"100%\",\n    padding: \"$space$3 $space$2\",\n    fontSize: \".8em\",\n    position: \"relative\",\n    \"&:not(:first-child):after\": {\n        content: \"\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        height: 1,\n        background: \"$colors$surface3\"\n    },\n    /**\n         * Editor reset\n         */ \".sp-cm\": {\n        padding: 0\n    },\n    \".cm-editor\": {\n        background: \"none\"\n    },\n    \".cm-content\": {\n        padding: 0\n    }\n}, _a[\".\".concat(THEME_PREFIX, \"-pre-placeholder\")] = {\n    margin: \"0 !important\",\n    fontSize: \"1em\"\n}, _a.variants = {\n    variant: {\n        error: {\n            color: \"$colors$error\",\n            background: \"$colors$errorSurface\",\n            \"&:not(:first-child):after\": {\n                background: \"$colors$error\",\n                opacity: 0.07\n            }\n        },\n        warning: {\n            color: \"$colors$warning\",\n            background: \"$colors$warningSurface\",\n            \"&:not(:first-child):after\": {\n                background: \"$colors$warning\",\n                opacity: 0.07\n            }\n        },\n        clear: {\n            fontStyle: \"italic\"\n        },\n        info: {}\n    }\n}, _a));\nvar wrapperClassName = css({\n    justifyContent: \"space-between\",\n    borderBottom: \"1px solid $colors$surface2\",\n    padding: \"0 $space$2\",\n    fontFamily: \"$font$mono\",\n    height: \"$layout$headerHeight\",\n    minHeight: \"$layout$headerHeight\",\n    overflowX: \"auto\",\n    whiteSpace: \"nowrap\"\n});\nvar flexClassName = css({\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: \"$space$2\"\n});\nvar Header = function(_a) {\n    var currentTab = _a.currentTab, setCurrentTab = _a.setCurrentTab, node = _a.node;\n    var classNames = useClassNames();\n    var buttonsClassName = classNames(\"console-header-button\", [\n        buttonClassName,\n        roundedButtonClassName,\n        css({\n            padding: \"$space$1 $space$3\"\n        })\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n        className: classNames(\"console-header\", [\n            wrapperClassName,\n            flexClassName\n        ]),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"p\", {\n                className: classNames(\"console-header-title\", [\n                    css({\n                        lineHeight: 1,\n                        margin: 0,\n                        color: \"$colors$base\",\n                        fontSize: \"$font$size\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        gap: \"$space$2\"\n                    })\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleIcon, {}),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                        children: \"Terminal\"\n                    })\n                ]\n            }),\n            node && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"console-header-actions\", [\n                    flexClassName\n                ]),\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        className: buttonsClassName,\n                        \"data-active\": currentTab === \"server\",\n                        onClick: function() {\n                            return setCurrentTab(\"server\");\n                        },\n                        type: \"button\",\n                        children: \"Server\"\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"button\", {\n                        className: buttonsClassName,\n                        \"data-active\": currentTab === \"client\",\n                        onClick: function() {\n                            return setCurrentTab(\"client\");\n                        },\n                        type: \"button\",\n                        children: \"Client\"\n                    })\n                ]\n            })\n        ]\n    });\n};\n/**\n * It provides an interface to consume the logs from a sandpack client.\n *\n * @category Hooks\n */ var useSandpackConsole = function(_a) {\n    var clientId = _a.clientId, _b = _a.maxMessageCount, maxMessageCount = _b === void 0 ? MAX_MESSAGE_COUNT : _b, _c = _a.showSyntaxError, showSyntaxError = _c === void 0 ? false : _c, _d = _a.resetOnPreviewRestart, resetOnPreviewRestart = _d === void 0 ? false : _d;\n    var _e = react__WEBPACK_IMPORTED_MODULE_1__.useState([]), logs = _e[0], setLogs = _e[1];\n    var listen = useSandpack().listen;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useSandpackConsole.useEffect\": function() {\n            var unsubscribe = listen({\n                \"useSandpackConsole.useEffect.unsubscribe\": function(message) {\n                    if (resetOnPreviewRestart && message.type === \"start\") {\n                        setLogs([]);\n                    } else if (message.type === \"console\" && message.codesandbox) {\n                        var payloadLog = Array.isArray(message.log) ? message.log : [\n                            message.log\n                        ];\n                        if (payloadLog.find({\n                            \"useSandpackConsole.useEffect.unsubscribe\": function(_a) {\n                                var method = _a.method;\n                                return method === \"clear\";\n                            }\n                        }[\"useSandpackConsole.useEffect.unsubscribe\"])) {\n                            return setLogs([\n                                CLEAR_LOG\n                            ]);\n                        }\n                        var logsMessages_1 = showSyntaxError ? payloadLog : payloadLog.filter({\n                            \"useSandpackConsole.useEffect.unsubscribe\": function(messageItem) {\n                                var _a, _b, _c;\n                                var messagesWithoutSyntaxErrors = (_c = (_b = (_a = messageItem === null || messageItem === void 0 ? void 0 : messageItem.data) === null || _a === void 0 ? void 0 : _a.filter) === null || _b === void 0 ? void 0 : _b.call(_a, {\n                                    \"useSandpackConsole.useEffect.unsubscribe\": function(dataItem) {\n                                        if (typeof dataItem !== \"string\") return true;\n                                        var matches = SYNTAX_ERROR_PATTERN.filter({\n                                            \"useSandpackConsole.useEffect.unsubscribe.matches\": function(lookFor) {\n                                                return dataItem.startsWith(lookFor);\n                                            }\n                                        }[\"useSandpackConsole.useEffect.unsubscribe.matches\"]);\n                                        return matches.length === 0;\n                                    }\n                                }[\"useSandpackConsole.useEffect.unsubscribe\"])) !== null && _c !== void 0 ? _c : [];\n                                return messagesWithoutSyntaxErrors.length > 0;\n                            }\n                        }[\"useSandpackConsole.useEffect.unsubscribe\"]);\n                        if (!logsMessages_1) return;\n                        setLogs({\n                            \"useSandpackConsole.useEffect.unsubscribe\": function(prev) {\n                                var messages = __spreadArray(__spreadArray([], prev, true), logsMessages_1, true).filter({\n                                    \"useSandpackConsole.useEffect.unsubscribe.messages\": function(value, index, self1) {\n                                        return index === self1.findIndex({\n                                            \"useSandpackConsole.useEffect.unsubscribe.messages\": function(s) {\n                                                return s.id === value.id;\n                                            }\n                                        }[\"useSandpackConsole.useEffect.unsubscribe.messages\"]);\n                                    }\n                                }[\"useSandpackConsole.useEffect.unsubscribe.messages\"]);\n                                while(messages.length > maxMessageCount){\n                                    messages.shift();\n                                }\n                                return messages;\n                            }\n                        }[\"useSandpackConsole.useEffect.unsubscribe\"]);\n                    }\n                }\n            }[\"useSandpackConsole.useEffect.unsubscribe\"], clientId);\n            return unsubscribe;\n        }\n    }[\"useSandpackConsole.useEffect\"], [\n        showSyntaxError,\n        maxMessageCount,\n        clientId,\n        resetOnPreviewRestart\n    ]);\n    return {\n        logs: logs,\n        reset: function() {\n            return setLogs([]);\n        }\n    };\n};\n/**\n * `SandpackConsole` is a Sandpack devtool that allows printing\n * the console logs from a Sandpack client. It is designed to be\n * a light version of a browser console, which means that it's\n * limited to a set of common use cases you may encounter when coding.\n */ var SandpackConsole = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(_a, ref) {\n    var _b;\n    var _c = _a.showHeader, showHeader = _c === void 0 ? true : _c, _d = _a.showSyntaxError, showSyntaxError = _d === void 0 ? false : _d, maxMessageCount = _a.maxMessageCount, onLogsChange = _a.onLogsChange, className = _a.className;\n    _a.showSetupProgress;\n    var _f = _a.showResetConsoleButton, showResetConsoleButton = _f === void 0 ? true : _f, _g = _a.showRestartButton, showRestartButton = _g === void 0 ? true : _g, _h = _a.resetOnPreviewRestart, resetOnPreviewRestart = _h === void 0 ? false : _h, _j = _a.actionsChildren, actionsChildren = _j === void 0 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}) : _j, _k = _a.standalone, standalone = _k === void 0 ? false : _k, props = __rest(_a, [\n        \"showHeader\",\n        \"showSyntaxError\",\n        \"maxMessageCount\",\n        \"onLogsChange\",\n        \"className\",\n        \"showSetupProgress\",\n        \"showResetConsoleButton\",\n        \"showRestartButton\",\n        \"resetOnPreviewRestart\",\n        \"actionsChildren\",\n        \"standalone\"\n    ]);\n    var environment = useSandpack().sandpack.environment;\n    var _l = useSandpackClient(), iframe = _l.iframe, internalClientId = _l.clientId;\n    var restart = useSandpackShell().restart;\n    var _m = react__WEBPACK_IMPORTED_MODULE_1__.useState(environment === \"node\" ? \"server\" : \"client\"), currentTab = _m[0], setCurrentTab = _m[1];\n    var clientId = standalone ? internalClientId : undefined;\n    var _o = useSandpackConsole({\n        maxMessageCount: maxMessageCount,\n        showSyntaxError: showSyntaxError,\n        resetOnPreviewRestart: resetOnPreviewRestart,\n        clientId: clientId\n    }), consoleData = _o.logs, resetConsole = _o.reset;\n    var _p = useSandpackShellStdout({\n        maxMessageCount: maxMessageCount,\n        resetOnPreviewRestart: resetOnPreviewRestart,\n        clientId: clientId\n    }), stdoutData = _p.logs, resetStdout = _p.reset;\n    var wrapperRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SandpackConsole.useEffect\": function() {\n            onLogsChange === null || onLogsChange === void 0 ? void 0 : onLogsChange(consoleData);\n            if (wrapperRef.current) {\n                wrapperRef.current.scrollTop = wrapperRef.current.scrollHeight;\n            }\n        }\n    }[\"SandpackConsole.useEffect\"], [\n        onLogsChange,\n        consoleData,\n        stdoutData,\n        currentTab\n    ]);\n    var isServerTab = currentTab === \"server\";\n    var isNodeEnvironment = environment === \"node\";\n    react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, {\n        \"SandpackConsole.useImperativeHandle\": function() {\n            return {\n                reset: ({\n                    \"SandpackConsole.useImperativeHandle\": function() {\n                        resetConsole();\n                        resetStdout();\n                    }\n                })[\"SandpackConsole.useImperativeHandle\"]\n            };\n        }\n    }[\"SandpackConsole.useImperativeHandle\"]);\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackStack, __assign({\n        className: classNames(\"console\", [\n            css((_b = {\n                height: \"100%\",\n                background: \"$surface1\",\n                iframe: {\n                    display: \"none\"\n                }\n            }, _b[\".\".concat(THEME_PREFIX, \"-bridge-frame\")] = {\n                display: \"block\",\n                border: 0,\n                position: \"absolute\",\n                left: \"$space$2\",\n                bottom: \"$space$2\",\n                zIndex: \"$top\",\n                height: 12,\n                width: \"30%\",\n                mixBlendMode: \"multiply\",\n                pointerEvents: \"none\"\n            }, _b)),\n            className\n        ])\n    }, props, {\n        children: [\n            showHeader && isNodeEnvironment && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Header, {\n                currentTab: currentTab,\n                node: isNodeEnvironment,\n                setCurrentTab: setCurrentTab\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                ref: wrapperRef,\n                className: classNames(\"console-list\", [\n                    css({\n                        overflow: \"auto\",\n                        scrollBehavior: \"smooth\"\n                    })\n                ]),\n                children: isServerTab ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StdoutList, {\n                    data: stdoutData\n                }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleList, {\n                    data: consoleData\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", {\n                className: classNames(\"console-actions\", [\n                    css({\n                        position: \"absolute\",\n                        bottom: \"$space$2\",\n                        right: \"$space$2\",\n                        display: \"flex\",\n                        gap: \"$space$2\"\n                    })\n                ]),\n                children: [\n                    actionsChildren,\n                    showRestartButton && isServerTab && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n                        onClick: function() {\n                            restart();\n                            resetConsole();\n                            resetStdout();\n                        },\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartIcon, {})\n                    }),\n                    showResetConsoleButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoundedButton, {\n                        onClick: function() {\n                            if (currentTab === \"client\") {\n                                resetConsole();\n                            } else {\n                                resetStdout();\n                            }\n                        },\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CleanIcon, {})\n                    })\n                ]\n            }),\n            standalone && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DependenciesProgress, {\n                        clientId: clientId\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"iframe\", {\n                        ref: iframe\n                    })\n                ]\n            })\n        ]\n    }));\n});\nvar Sandpack = function(_a) {\n    var _b, _c, _d, _e, _f, _g, _h, _j;\n    var options = _a.options, template = _a.template, customSetup = _a.customSetup, files = _a.files, theme = _a.theme, props = __rest(_a, [\n        \"options\",\n        \"template\",\n        \"customSetup\",\n        \"files\",\n        \"theme\"\n    ]);\n    options !== null && options !== void 0 ? options : options = {};\n    (_b = options.resizablePanels) !== null && _b !== void 0 ? _b : options.resizablePanels = true;\n    (_c = options.editorWidthPercentage) !== null && _c !== void 0 ? _c : options.editorWidthPercentage = 50;\n    (_d = options.showConsole) !== null && _d !== void 0 ? _d : options.showConsole = false;\n    var rtlLayout = (_e = options === null || options === void 0 ? void 0 : options.rtl) !== null && _e !== void 0 ? _e : false;\n    var codeEditorOptions = {\n        showTabs: options.showTabs,\n        showLineNumbers: options.showLineNumbers,\n        showInlineErrors: options.showInlineErrors,\n        wrapContent: options.wrapContent,\n        closableTabs: options.closableTabs,\n        initMode: options.initMode,\n        extensions: (_f = options.codeEditor) === null || _f === void 0 ? void 0 : _f.extensions,\n        extensionsKeymap: (_g = options.codeEditor) === null || _g === void 0 ? void 0 : _g.extensionsKeymap,\n        readOnly: options.readOnly,\n        showReadOnly: options.showReadOnly,\n        additionalLanguages: (_h = options.codeEditor) === null || _h === void 0 ? void 0 : _h.additionalLanguages\n    };\n    var providerOptions = {\n        /**\n         * TS-why: Type 'string | number | symbol' is not assignable to type 'string'\n         */ activeFile: options.activeFile,\n        visibleFiles: options.visibleFiles,\n        recompileMode: options.recompileMode,\n        recompileDelay: options.recompileDelay,\n        autorun: options.autorun,\n        autoReload: options.autoReload,\n        bundlerURL: options.bundlerURL,\n        startRoute: options.startRoute,\n        skipEval: options.skipEval,\n        fileResolver: options.fileResolver,\n        initMode: options.initMode,\n        initModeObserverOptions: options.initModeObserverOptions,\n        externalResources: options.externalResources,\n        logLevel: options.logLevel,\n        classes: options.classes,\n        experimental_enableServiceWorker: options.experimental_enableServiceWorker,\n        experimental_enableStableServiceWorkerId: options.experimental_enableStableServiceWorkerId\n    };\n    /**\n     * Console\n     */ var _k = react__WEBPACK_IMPORTED_MODULE_1__.useState(options.showConsole), consoleVisibility = _k[0], setConsoleVisibility = _k[1];\n    var _l = react__WEBPACK_IMPORTED_MODULE_1__.useState(0), counter = _l[0], setCounter = _l[1];\n    var hasRightColumn = options.showConsole || options.showConsoleButton;\n    /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */ var templateFiles = (_j = SANDBOX_TEMPLATES[template]) !== null && _j !== void 0 ? _j : {};\n    var mode = (options === null || options === void 0 ? void 0 : options.layout) ? options === null || options === void 0 ? void 0 : options.layout : \"mode\" in templateFiles ? templateFiles.mode : \"preview\";\n    var actionsChildren = options.showConsoleButton ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleCounterButton, {\n        counter: counter,\n        onClick: function() {\n            return setConsoleVisibility(function(prev) {\n                return !prev;\n            });\n        }\n    }) : undefined;\n    /**\n     * Resizable\n     */ /* eslint-disable @typescript-eslint/no-explicit-any */ var dragEventTargetRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var _m = react__WEBPACK_IMPORTED_MODULE_1__.useState(options.editorWidthPercentage), horizontalSize = _m[0], setHorizontalSize = _m[1];\n    var _o = react__WEBPACK_IMPORTED_MODULE_1__.useState(70), verticalSize = _o[0], setVerticalSize = _o[1];\n    var RightColumn = hasRightColumn ? SandpackStack : react__WEBPACK_IMPORTED_MODULE_1__.Fragment;\n    var rightColumnStyle = {\n        flexGrow: 100 - horizontalSize,\n        flexShrink: 100 - horizontalSize,\n        flexBasis: 0,\n        width: 100 - horizontalSize + \"%\",\n        gap: consoleVisibility ? 1 : 0,\n        height: options.editorHeight\n    };\n    var topRowStyle = hasRightColumn ? {\n        flexGrow: verticalSize,\n        flexShrink: verticalSize,\n        flexBasis: 0,\n        overflow: \"hidden\"\n    } : rightColumnStyle;\n    var onDragMove = function(event) {\n        if (!dragEventTargetRef.current) return;\n        var container = dragEventTargetRef.current.parentElement;\n        if (!container) return;\n        var direction = dragEventTargetRef.current.dataset.direction;\n        var isHorizontal = direction === \"horizontal\";\n        var _a = container.getBoundingClientRect(), left = _a.left, top = _a.top, height = _a.height, width = _a.width;\n        var offset = isHorizontal ? (event.clientX - left) / width * 100 : (event.clientY - top) / height * 100;\n        var boundaries = Math.min(Math.max(offset, 25), 75);\n        if (isHorizontal) {\n            setHorizontalSize(rtlLayout ? 100 - boundaries : boundaries);\n        } else {\n            setVerticalSize(boundaries);\n        }\n        container.querySelectorAll(\".\".concat(THEME_PREFIX, \"-stack\")).forEach(function(item) {\n            item.style.pointerEvents = \"none\";\n        });\n    };\n    var stopDragging = function() {\n        var _a;\n        var container = (_a = dragEventTargetRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;\n        if (!container) return;\n        container.querySelectorAll(\".\".concat(THEME_PREFIX, \"-stack\")).forEach(function(item) {\n            item.style.pointerEvents = \"\";\n        });\n        dragEventTargetRef.current = null;\n    };\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"Sandpack.useEffect\": function() {\n            if (!(options === null || options === void 0 ? void 0 : options.resizablePanels)) return;\n            document.body.addEventListener(\"mousemove\", onDragMove);\n            document.body.addEventListener(\"mouseup\", stopDragging);\n            return ({\n                \"Sandpack.useEffect\": function() {\n                    document.body.removeEventListener(\"mousemove\", onDragMove);\n                    document.body.removeEventListener(\"mouseup\", stopDragging);\n                }\n            })[\"Sandpack.useEffect\"];\n        }\n    }[\"Sandpack.useEffect\"], [\n        options\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"Sandpack.useEffect\": function() {\n            var _a;\n            setConsoleVisibility((_a = options === null || options === void 0 ? void 0 : options.showConsole) !== null && _a !== void 0 ? _a : false);\n        }\n    }[\"Sandpack.useEffect\"], [\n        options.showConsole\n    ]);\n    var rightColumnProps = hasRightColumn ? {\n        className: THEME_PREFIX + \"-preset-column\",\n        style: rightColumnStyle\n    } : {};\n    var classNames = useClassNames();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackProvider, __assign({\n        customSetup: customSetup,\n        files: files,\n        options: providerOptions,\n        template: template,\n        theme: theme\n    }, props, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(SandpackLayout, {\n            className: rtlLayout ? classNames(\"rtl-layout\", [\n                rtlLayoutClassName\n            ]) : \"\",\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackCodeEditor, __assign({}, codeEditorOptions, {\n                    style: {\n                        height: options.editorHeight,\n                        flexGrow: horizontalSize,\n                        flexShrink: horizontalSize,\n                        flexBasis: 0,\n                        overflow: \"hidden\"\n                    }\n                })),\n                options.resizablePanels && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                    className: classNames(\"resize-handler\", [\n                        dragHandler({\n                            direction: \"horizontal\"\n                        })\n                    ]),\n                    \"data-direction\": \"horizontal\",\n                    onMouseDown: function(event) {\n                        dragEventTargetRef.current = event.target;\n                    },\n                    style: {\n                        left: \"calc(\".concat(rtlLayout ? 100 - horizontalSize : horizontalSize, \"% - 5px)\")\n                    }\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(RightColumn, __assign({}, rightColumnProps, {\n                    children: [\n                        mode === \"preview\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackPreview, {\n                            actionsChildren: actionsChildren,\n                            showNavigator: options.showNavigator,\n                            showRefreshButton: options.showRefreshButton,\n                            style: topRowStyle\n                        }),\n                        mode === \"tests\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackTests, {\n                            actionsChildren: actionsChildren,\n                            style: topRowStyle\n                        }),\n                        mode === \"console\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackConsole, {\n                            actionsChildren: actionsChildren,\n                            style: topRowStyle,\n                            standalone: true\n                        }),\n                        (options.showConsoleButton || consoleVisibility) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                            children: [\n                                options.resizablePanels && consoleVisibility && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                    className: classNames(\"resize-handler\", [\n                                        dragHandler({\n                                            direction: \"vertical\"\n                                        })\n                                    ]),\n                                    \"data-direction\": \"vertical\",\n                                    onMouseDown: function(event) {\n                                        dragEventTargetRef.current = event.target;\n                                    },\n                                    style: {\n                                        top: \"calc(\".concat(verticalSize, \"% - 5px)\")\n                                    }\n                                }),\n                                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                                    className: classNames(\"console-wrapper\", [\n                                        consoleWrapper\n                                    ]),\n                                    style: {\n                                        flexGrow: consoleVisibility ? 100 - verticalSize : 0,\n                                        flexShrink: consoleVisibility ? 100 - verticalSize : 0,\n                                        flexBasis: 0\n                                    },\n                                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SandpackConsole, {\n                                        onLogsChange: function(logs) {\n                                            return setCounter(logs.length);\n                                        },\n                                        showHeader: false\n                                    })\n                                })\n                            ]\n                        })\n                    ]\n                }))\n            ]\n        })\n    }), template);\n};\nvar dragHandler = css({\n    position: \"absolute\",\n    zIndex: \"$top\",\n    variants: {\n        direction: {\n            vertical: {\n                right: 0,\n                left: 0,\n                height: 10,\n                cursor: \"ns-resize\"\n            },\n            horizontal: {\n                top: 0,\n                bottom: 0,\n                width: 10,\n                cursor: \"ew-resize\"\n            }\n        }\n    },\n    \"@media screen and (max-width: 768px)\": {\n        display: \"none\"\n    }\n});\nvar ConsoleCounterButton = function(_a) {\n    var onClick = _a.onClick, counter = _a.counter;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(RoundedButton, {\n        className: buttonCounter.toString(),\n        onClick: onClick,\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ConsoleIcon, {}),\n            counter > 0 && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n                children: counter\n            })\n        ]\n    });\n};\nvar buttonCounter = css({\n    position: \"relative\",\n    strong: {\n        background: \"$colors$clickable\",\n        color: \"$colors$surface1\",\n        minWidth: 12,\n        height: 12,\n        padding: \"0 2px\",\n        borderRadius: 12,\n        fontSize: 8,\n        lineHeight: \"12px\",\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        fontWeight: \"normal\"\n    }\n});\nvar consoleWrapper = css({\n    width: \"100%\",\n    overflow: \"hidden\"\n});\nvar rtlLayoutClassName = css({\n    flexDirection: \"row-reverse\",\n    \"@media screen and (max-width: 768px)\": {\n        flexFlow: \"wrap-reverse !important\",\n        flexDirection: \"initial\"\n    }\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@codesandbox/sandpack-react/dist/index.mjs\n");

/***/ })

};
;